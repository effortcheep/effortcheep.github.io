<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EFFORT × Blog</title>
  
  
  <link href="http://effort.fun/atom.xml" rel="self"/>
  
  <link href="http://effort.fun/"/>
  <updated>2025-08-03T14:09:32.000Z</updated>
  <id>http://effort.fun/</id>
  
  <author>
    <name>EFFORT</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>neovim-config</title>
    <link href="http://effort.fun/post/neovim-config.html"/>
    <id>http://effort.fun/post/neovim-config.html</id>
    <published>2025-08-03T13:44:20.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>(仓库)[<a href="https://github.com/patricorgi/dotfiles]">https://github.com/patricorgi/dotfiles]</a></p><h2 id="快捷键表格"><a href="#快捷键表格" class="headerlink" title="快捷键表格"></a>快捷键表格</h2><h3 id="核心编辑快捷键"><a href="#核心编辑快捷键" class="headerlink" title="核心编辑快捷键"></a>核心编辑快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>jk</code></td><td>退出插入模式</td><td>在插入模式下快速退出</td></tr><tr><td><code>j</code>&#x2F;<code>k</code></td><td>智能移动</td><td>无计数时按显示行移动，有计数时按实际行移动</td></tr><tr><td><code>&lt;Esc&gt;</code></td><td>清除搜索高亮</td><td>取消搜索结果高亮显示</td></tr><tr><td><code>\</code></td><td>水平分割窗口</td><td>创建水平分割</td></tr><tr><td><code>|</code></td><td>垂直分割窗口</td><td>创建垂直分割</td></tr><tr><td><code>L</code>&#x2F;<code>H</code></td><td>切换缓冲区</td><td>在最近使用的缓冲区间切换</td></tr><tr><td><code>+</code></td><td>最大化窗格</td><td>最大化当前 Neovim 窗格</td></tr><tr><td><code>=</code></td><td>恢复窗格</td><td>恢复所有窗格大小</td></tr></tbody></table><h3 id="文件查找和导航-Snacks"><a href="#文件查找和导航-Snacks" class="headerlink" title="文件查找和导航 (Snacks)"></a>文件查找和导航 (Snacks)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;ff</code></td><td>智能文件查找</td><td>上下文感知的文件查找器</td></tr><tr><td><code>&lt;leader&gt;fo</code></td><td>最近文件</td><td>查找最近打开的文件</td></tr><tr><td><code>&lt;leader&gt;fw</code></td><td>内容搜索</td><td>在文件中搜索内容</td></tr><tr><td><code>&lt;leader&gt;&lt;leader&gt;</code></td><td>缓冲区切换</td><td>在打开的缓冲区间切换</td></tr><tr><td><code>&lt;leader&gt;ls</code></td><td>符号查找</td><td>查找当前缓冲区中的符号</td></tr><tr><td><code>&lt;leader&gt;fd</code></td><td>诊断信息</td><td>查找 LSP 诊断信息</td></tr><tr><td><code>&lt;leader&gt;fc</code></td><td>配置文件</td><td>查找 Neovim 配置文件</td></tr><tr><td><code>&lt;leader&gt;fg</code></td><td>仓库选择</td><td>自定义仓库选择器</td></tr><tr><td><code>&lt;leader&gt;fh</code></td><td>帮助查找</td><td>在帮助文档中查找</td></tr><tr><td><code>&lt;leader&gt;fk</code></td><td>快捷键查找</td><td>查找已定义的快捷键</td></tr><tr><td><code>&lt;leader&gt;fm</code></td><td>标记查找</td><td>查找 Vim 标记</td></tr><tr><td><code>&lt;leader&gt;fn</code></td><td>通知查找</td><td>查找通知历史</td></tr><tr><td><code>&lt;leader&gt;fs</code></td><td>工作区符号</td><td>查找工作区中的符号</td></tr><tr><td><code>&lt;leader&gt;fi</code></td><td>图标查找</td><td>查找可用图标</td></tr><tr><td><code>&lt;leader&gt;fb</code></td><td>行内容查找</td><td>在当前缓冲区中查找行</td></tr><tr><td><code>&lt;leader&gt;fH</code></td><td>高亮查找</td><td>查找高亮组</td></tr><tr><td><code>&lt;leader&gt;f/</code></td><td>搜索历史</td><td>查找搜索历史</td></tr><tr><td><code>&lt;leader&gt;fj</code></td><td>跳转列表</td><td>查找跳转历史</td></tr><tr><td><code>&lt;leader&gt;ft</code></td><td>TODO 查找</td><td>查找 TODO 注释或 Markdown 任务</td></tr><tr><td><code>&lt;leader&gt;bc</code></td><td>删除缓冲区</td><td>删除当前缓冲区</td></tr><tr><td><code>&lt;leader&gt;bC</code></td><td>删除其他缓冲区</td><td>删除除当前外的所有缓冲区</td></tr><tr><td><code>&lt;leader&gt;n</code></td><td>通知历史</td><td>显示通知历史记录</td></tr></tbody></table><h3 id="LSP-相关快捷键"><a href="#LSP-相关快捷键" class="headerlink" title="LSP 相关快捷键"></a>LSP 相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>gd</code></td><td>跳转定义</td><td>使用 Snacks picker 跳转到定义</td></tr><tr><td><code>gD</code></td><td>分割跳转定义</td><td>在新分割窗口中跳转到定义</td></tr><tr><td><code>gr</code></td><td>查找引用</td><td>查找符号的所有引用</td></tr><tr><td><code>&lt;leader&gt;la</code></td><td>代码操作</td><td>显示可用的代码操作</td></tr><tr><td><code>&lt;leader&gt;rn</code></td><td>重命名符号</td><td>重命名当前符号</td></tr><tr><td><code>&lt;leader&gt;ld</code></td><td>显示诊断</td><td>显示当前行的诊断信息</td></tr><tr><td><code>&lt;leader&gt;td</code></td><td>切换诊断</td><td>开关诊断信息显示</td></tr><tr><td><code>&lt;leader&gt;th</code></td><td>切换内联提示</td><td>开关 LSP 内联提示</td></tr></tbody></table><h3 id="Git-操作快捷键"><a href="#Git-操作快捷键" class="headerlink" title="Git 操作快捷键"></a>Git 操作快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>]c</code>&#x2F;<code>[c</code></td><td>Git 块导航</td><td>跳转到下一个&#x2F;上一个 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gs</code></td><td>暂存块</td><td>暂存当前 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gr</code></td><td>重置块</td><td>重置当前 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gp</code></td><td>预览块</td><td>预览 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gd</code></td><td>Git 差异</td><td>显示与索引的差异</td></tr><tr><td><code>&lt;leader&gt;gb</code></td><td>Git blame</td><td>显示当前行的 Git blame 信息</td></tr><tr><td><code>&lt;leader&gt;gg</code></td><td>打开 Lazygit</td><td>在当前仓库根目录打开 Lazygit</td></tr><tr><td><code>&lt;leader&gt;gS</code></td><td>暂存整个缓冲区</td><td>暂存当前文件的所有更改</td></tr><tr><td><code>&lt;leader&gt;gR</code></td><td>重置整个缓冲区</td><td>重置当前文件的所有更改</td></tr><tr><td><code>&lt;leader&gt;gD</code></td><td>与上次提交对比</td><td>显示与最后一次提交的差异</td></tr><tr><td><code>&lt;leader&gt;tb</code></td><td>切换 blame 显示</td><td>开关当前行的 Git blame 信息</td></tr><tr><td><code>&lt;leader&gt;tD</code></td><td>切换删除预览</td><td>开关删除内容的内联预览</td></tr><tr><td><code>&lt;leader&gt;tg</code></td><td>切换 Git 标记</td><td>开关 Git 状态标记显示</td></tr></tbody></table><h3 id="调试相关快捷键"><a href="#调试相关快捷键" class="headerlink" title="调试相关快捷键"></a>调试相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;du</code></td><td>切换调试 UI</td><td>开关调试界面</td></tr><tr><td><code>&lt;F1&gt;</code></td><td>切换调试 UI</td><td>同上，功能键版本</td></tr><tr><td><code>&lt;leader&gt;ds</code></td><td>开始&#x2F;继续调试</td><td>启动或继续调试会话</td></tr></tbody></table><h3 id="任务管理快捷键-Overseer"><a href="#任务管理快捷键-Overseer" class="headerlink" title="任务管理快捷键 (Overseer)"></a>任务管理快捷键 (Overseer)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;rr</code></td><td>运行模板</td><td>运行 Overseer 任务模板</td></tr><tr><td><code>&lt;leader&gt;rt</code></td><td>切换任务列表</td><td>开关任务列表显示</td></tr><tr><td><code>&lt;leader&gt;ra</code></td><td>快速操作</td><td>显示快速操作列表</td></tr></tbody></table><h3 id="多光标操作快捷键"><a href="#多光标操作快捷键" class="headerlink" title="多光标操作快捷键"></a>多光标操作快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>添加光标</td><td>匹配并添加新光标</td></tr><tr><td><code>&lt;leader&gt;s</code></td><td>跳过光标</td><td>跳过当前匹配</td></tr><tr><td><code>&lt;leader&gt;A</code></td><td>添加所有匹配</td><td>为所有匹配项添加光标</td></tr><tr><td><code>&lt;C-q&gt;</code></td><td>切换光标</td><td>在当前位置添加&#x2F;移除光标</td></tr></tbody></table><h2 id="主要插件功能"><a href="#主要插件功能" class="headerlink" title="主要插件功能"></a>主要插件功能</h2><h3 id="核心插件"><a href="#核心插件" class="headerlink" title="核心插件"></a>核心插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>snacks.nvim</strong></td><td>多功能工具集</td><td>文件查找、缓冲区管理、通知系统、仪表板</td></tr><tr><td><strong>blink.cmp</strong></td><td>补全引擎</td><td>提供智能代码补全和文档显示</td></tr><tr><td><strong>gitsigns.nvim</strong></td><td>Git 集成</td><td>Git 状态显示、块操作、blame 信息</td></tr><tr><td><strong>flash.nvim</strong></td><td>快速跳转</td><td>使用 <code>ss</code> 进行快速文本跳转</td></tr><tr><td><strong>multicursor.nvim</strong></td><td>多光标编辑</td><td>支持多光标同时编辑</td></tr></tbody></table><h3 id="开发工具插件"><a href="#开发工具插件" class="headerlink" title="开发工具插件"></a>开发工具插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>nvim-dap</strong></td><td>调试适配器</td><td>提供调试功能支持</td></tr><tr><td><strong>overseer.nvim</strong></td><td>任务运行器</td><td>管理和运行各种开发任务</td></tr><tr><td><strong>oil.nvim</strong></td><td>文件管理器</td><td>类似缓冲区的文件浏览器</td></tr><tr><td><strong>mini.nvim</strong></td><td>轻量工具集</td><td>包含文件操作、图标、环绕编辑等功能</td></tr></tbody></table><h3 id="UI-和主题插件"><a href="#UI-和主题插件" class="headerlink" title="UI 和主题插件"></a>UI 和主题插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>catppuccin</strong></td><td>主题配色</td><td>提供 Mocha 配色方案，支持透明背景</td></tr><tr><td><strong>ultimate-autopair</strong></td><td>自动配对</td><td>智能括号、引号配对，支持多种文件类型</td></tr><tr><td><strong>render-markdown</strong></td><td>Markdown 渲染</td><td>增强 Markdown 文件的显示效果</td></tr></tbody></table><h3 id="调试相关快捷键-1"><a href="#调试相关快捷键-1" class="headerlink" title="调试相关快捷键"></a>调试相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;du</code></td><td>切换调试 UI</td><td>开关调试界面</td></tr><tr><td><code>&lt;F1&gt;</code></td><td>切换调试 UI</td><td>同上，功能键版本</td></tr><tr><td><code>&lt;leader&gt;ds</code></td><td>开始&#x2F;继续调试</td><td>启动或继续调试会话</td></tr></tbody></table><h3 id="任务管理快捷键-Overseer-1"><a href="#任务管理快捷键-Overseer-1" class="headerlink" title="任务管理快捷键 (Overseer)"></a>任务管理快捷键 (Overseer)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;rr</code></td><td>运行模板</td><td>运行 Overseer 任务模板</td></tr><tr><td><code>&lt;leader&gt;rt</code></td><td>切换任务列表</td><td>开关任务列表显示</td></tr><tr><td><code>&lt;leader&gt;ra</code></td><td>快速操作</td><td>显示快速操作列表</td></tr></tbody></table><h3 id="快速跳转快捷键-Flash"><a href="#快速跳转快捷键-Flash" class="headerlink" title="快速跳转快捷键 (Flash)"></a>快速跳转快捷键 (Flash)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>ss</code></td><td>Flash 跳转</td><td>快速跳转到指定位置</td></tr><tr><td><code>SS</code></td><td>Treesitter 搜索</td><td>基于语法树的搜索跳转</td></tr></tbody></table><h3 id="缓冲区管理快捷键"><a href="#缓冲区管理快捷键" class="headerlink" title="缓冲区管理快捷键"></a>缓冲区管理快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;bc</code></td><td>删除缓冲区</td><td>删除当前缓冲区</td></tr><tr><td><code>&lt;leader&gt;bC</code></td><td>删除其他缓冲区</td><td>删除除当前外的所有缓冲区</td></tr><tr><td><code>&lt;leader&gt;n</code></td><td>通知历史</td><td>显示通知历史记录</td></tr></tbody></table><h3 id="补全系统快捷键"><a href="#补全系统快捷键" class="headerlink" title="补全系统快捷键"></a>补全系统快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-u&gt;</code></td><td>文档向上滚动</td><td>在补全文档中向上滚动</td></tr><tr><td><code>&lt;C-d&gt;</code></td><td>文档向下滚动</td><td>在补全文档中向下滚动</td></tr></tbody></table><h3 id="特殊功能快捷键"><a href="#特殊功能快捷键" class="headerlink" title="特殊功能快捷键"></a>特殊功能快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;tz</code></td><td>无干扰模式</td><td>连续切换多个显示选项</td></tr><tr><td><code>&lt;space&gt;X</code></td><td>执行 Lua 文件</td><td>运行当前 Lua 文件</td></tr><tr><td><code>&lt;space&gt;x</code></td><td>执行当前行</td><td>运行当前行的 Lua 代码</td></tr><tr><td><code>&lt;CR&gt;</code></td><td>切换折叠</td><td>在折叠行上切换折叠状态</td></tr></tbody></table><h2 id="Oil-nvim-配置概述"><a href="#Oil-nvim-配置概述" class="headerlink" title="Oil.nvim 配置概述"></a>Oil.nvim 配置概述</h2><p>Oil.nvim 是一个文件管理器插件，它将文件浏览器作为一个可编辑的缓冲区来使用。 <a href="#8-0">1</a></p><h2 id="主要配置内容"><a href="#主要配置内容" class="headerlink" title="主要配置内容"></a>主要配置内容</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><ul><li><code>default_file_explorer = true</code> - 将 Oil 设置为默认文件浏览器，替代 netrw <a href="#8-1">2</a></li></ul><h3 id="自定义快捷键映射"><a href="#自定义快捷键映射" class="headerlink" title="自定义快捷键映射"></a>自定义快捷键映射</h3><p>Oil 重新定义了许多快捷键以提供更直观的文件操作体验：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-r&gt;</code></td><td>刷新</td><td>刷新当前目录内容</td></tr><tr><td><code>&lt;leader&gt;y</code></td><td>复制路径</td><td>复制当前文件&#x2F;目录路径</td></tr><tr><td><code>zh</code></td><td>切换隐藏文件</td><td>显示&#x2F;隐藏以点开头的文件</td></tr><tr><td><code>\</code></td><td>水平分割打开</td><td>在水平分割窗口中打开文件</td></tr><tr><td><code>|</code></td><td>垂直分割打开</td><td>在垂直分割窗口中打开文件</td></tr><tr><td><code>-</code></td><td>关闭 Oil</td><td>关闭文件浏览器</td></tr><tr><td><code>&lt;leader&gt;e</code></td><td>关闭 Oil</td><td>另一个关闭快捷键</td></tr><tr><td><code>&lt;BS&gt;</code></td><td>返回上级目录</td><td>导航到父目录</td></tr></tbody></table><h3 id="详细视图切换功能"><a href="#详细视图切换功能" class="headerlink" title="详细视图切换功能"></a>详细视图切换功能</h3><p>Oil 包含一个智能的详细视图切换功能，通过 <code>gd</code> 快捷键控制： <a href="#8-3">4</a></p><ul><li><strong>简单视图</strong>：只显示文件图标</li><li><strong>详细视图</strong>：显示图标、权限、大小和修改时间</li></ul><h3 id="窗口栏配置"><a href="#窗口栏配置" class="headerlink" title="窗口栏配置"></a>窗口栏配置</h3><p>Oil 配置了自定义的窗口栏显示当前目录路径： <a href="#8-4">5</a></p><p>这个函数会显示当前目录的相对路径（相对于家目录），如果无法获取目录则显示缓冲区名称。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li><p><strong>打开 Oil</strong>：由于设置为默认文件浏览器，您可以使用 <code>:e .</code> 或 <code>:Oil</code> 命令打开当前目录</p></li><li><p><strong>导航</strong>：</p><ul><li>使用 <code>j/k</code> 上下移动</li><li>按 <code>&lt;CR&gt;</code> 进入目录或打开文件</li><li>使用 <code>&lt;BS&gt;</code> 返回上级目录</li></ul></li><li><p><strong>文件操作</strong>：</p><ul><li>Oil 将目录内容显示为可编辑的缓冲区</li><li>您可以直接编辑文件名来重命名</li><li>删除行来删除文件</li><li>添加新行来创建新文件</li></ul></li><li><p><strong>视图切换</strong>：</p><ul><li>按 <code>gd</code> 在简单视图和详细视图间切换</li><li>按 <code>zh</code> 显示&#x2F;隐藏隐藏文件</li></ul></li></ol><h2 id="lua-custom-plugins-目录下插件的自定义快捷键"><a href="#lua-custom-plugins-目录下插件的自定义快捷键" class="headerlink" title="lua&#x2F;custom&#x2F;plugins 目录下插件的自定义快捷键"></a>lua&#x2F;custom&#x2F;plugins 目录下插件的自定义快捷键</h2><h3 id="Mini-nvim-插件快捷键-mini-lua"><a href="#Mini-nvim-插件快捷键-mini-lua" class="headerlink" title="Mini.nvim 插件快捷键 (mini.lua)"></a>Mini.nvim 插件快捷键 (mini.lua)</h3><p>Mini.nvim 提供了环绕编辑功能的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>sa</code></td><td>添加环绕</td><td>在普通和可视模式下添加环绕字符</td></tr><tr><td><code>sd</code></td><td>删除环绕</td><td>删除环绕字符</td></tr><tr><td><code>sf</code></td><td>查找环绕（右）</td><td>向右查找环绕字符</td></tr><tr><td><code>sF</code></td><td>查找环绕（左）</td><td>向左查找环绕字符</td></tr><tr><td><code>sh</code></td><td>高亮环绕</td><td>高亮显示环绕字符</td></tr><tr><td><code>sr</code></td><td>替换环绕</td><td>替换环绕字符</td></tr><tr><td><code>sn</code></td><td>更新行数</td><td>更新 <code>n_lines</code> 设置</td></tr></tbody></table><h3 id="Multicursor-nvim-插件快捷键-multicursor-lua"><a href="#Multicursor-nvim-插件快捷键-multicursor-lua" class="headerlink" title="Multicursor.nvim 插件快捷键 (multicursor.lua)"></a>Multicursor.nvim 插件快捷键 (multicursor.lua)</h3><p>多光标编辑插件提供了丰富的光标操作快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>添加匹配光标</td><td>匹配当前词并添加光标</td></tr><tr><td><code>&lt;leader&gt;s</code></td><td>跳过匹配</td><td>跳过当前匹配项</td></tr><tr><td><code>&lt;leader&gt;N</code></td><td>向上添加光标</td><td>向上方向添加匹配光标</td></tr><tr><td><code>&lt;leader&gt;S</code></td><td>向上跳过</td><td>向上方向跳过匹配</td></tr><tr><td><code>&lt;leader&gt;A</code></td><td>添加所有匹配</td><td>为文档中所有匹配项添加光标</td></tr><tr><td><code>&lt;left&gt;</code>&#x2F;<code>&lt;right&gt;</code></td><td>光标导航</td><td>在多个光标间切换</td></tr><tr><td><code>&lt;c-leftmouse&gt;</code></td><td>鼠标添加光标</td><td>用 Ctrl+左键添加&#x2F;移除光标</td></tr><tr><td><code>&lt;c-q&gt;</code></td><td>切换光标</td><td>在当前位置添加&#x2F;移除光标</td></tr><tr><td><code>&lt;leader&gt;gv</code></td><td>恢复光标</td><td>恢复意外清除的光标</td></tr><tr><td><code>&lt;c-i&gt;</code>&#x2F;<code>&lt;c-o&gt;</code></td><td>跳转列表</td><td>在跳转历史中前进&#x2F;后退</td></tr></tbody></table><h3 id="Ultimate-autopair-插件快捷键-autopairs-lua"><a href="#Ultimate-autopair-插件快捷键-autopairs-lua" class="headerlink" title="Ultimate-autopair 插件快捷键 (autopairs.lua)"></a>Ultimate-autopair 插件快捷键 (autopairs.lua)</h3><p>自动配对插件的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-q&gt;</code></td><td>Tab 跳出</td><td>跳出当前配对字符</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;(仓库)[&lt;a href=&quot;https://github.com/patricorgi/dotfiles]&quot;&gt;https://github.com/patricorgi/dotfiles]&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;快捷键表格&quot;&gt;&lt;a href=&quot;#快捷键表格&quot; cl</summary>
      
    
    
    
    
    <category term="nvim config" scheme="http://effort.fun/tags/nvim-config/"/>
    
  </entry>
  
  <entry>
    <title>SwiftDate</title>
    <link href="http://effort.fun/post/SwiftDate.html"/>
    <id>http://effort.fun/post/SwiftDate.html</id>
    <published>2024-11-06T21:59:22.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SwiftDate-使用"><a href="#SwiftDate-使用" class="headerlink" title="SwiftDate 使用"></a>SwiftDate 使用</h1><p>Apple 中的<strong>Date</strong>完全独立于任何特定的地理位置，日历或区域设置，一个普通的<strong>Date</strong>对象只表示一个绝对值：实际上，它计算自 2001 年 1 月 1 日以来经过的秒数。</p><p>在开发过程中，通常需要在更具体的上下文中表示日期：世界上的特定位置，使用指定<code>Local</code>的规则输出他们</p><p>为了实现它，swiftDate 需要引入几个其他对象：<code>Calendar</code>, <code>TimeZone</code>, <code>Locale</code></p><h2 id="Region-DateInRegion"><a href="#Region-DateInRegion" class="headerlink" title="Region &amp; DateInRegion"></a>Region &amp; DateInRegion</h2><p>为了简化特定上下文中的日期管理，SwiftDate 引入了两个简单的结构：</p><ul><li>Region 是一个结构体，它定义了世界上的区域 （TimeZone）、语言 （Locale） 和参考日历 （Calendar）。</li><li>DateInRegion 表示特定区域中的绝对日期。使用此对象时，所有组件都将在创建对象的区域的上下文中进行评估。在 DateInRegion 中，您将具有 absoluteDate 和 region 属性。</li></ul><h3 id="The-Default-Region"><a href="#The-Default-Region" class="headerlink" title="The Default Region"></a>The Default Region</h3><p>在 SwiftDate 中，您可以同时使用 DateInRegion 和 Date 实例。当您需要提取时间单位、比较日期或评估特定操作时，即使是普通的 Date 对象也会使用 Region。</p><p>但是，一个 Default Region 的特殊区域，默认情况下，它具有以下属性：</p><ul><li><p>时区 &#x3D; GMT - 这允许与默认的日期管理保持一致，除非您更改它。</p></li><li><p>日历 &#x3D; 当前设备日历（自动更新）</p></li><li><p>Locale &#x3D; 当前设备的区域设置（自动更新）</p></li></ul><p>虽然始终使用 DateInRegion 是一个不错的选择，但您也可以通过更改默认区域来使用 Date，如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rome <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.italian)</span><br><span class="line"><span class="type">SwiftDate</span>.defaultRegion <span class="operator">=</span> rome</span><br></pre></td></tr></table></figure><p>从现在开始，所有 Date 实例都使用 rome 作为默认区域来解析和评估日期组件：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateInRome <span class="operator">=</span> <span class="string">&quot;2018-01-01 00:00:00&quot;</span>.toDate()<span class="operator">!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Current year is <span class="subst">\(dateInRome.year)</span> and hour is <span class="subst">\(dateInRome.hour)</span>&quot;</span>) <span class="comment">// &quot;Current year is 2018 and hour is 0\n&quot;</span></span><br></pre></td></tr></table></figure><p>我们仍然可以使用 convertTo（region：） 函数将此日期转换为以 UTC 为单位的默认绝对表示形式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateInUTC <span class="operator">=</span> dateInRome.convertTo(region: <span class="type">Region</span>.<span class="type">UTC</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Current year is <span class="subst">\(dateInUTC.year)</span> and hour is <span class="subst">\(dateInUTC.hour)</span>&quot;</span>) <span class="comment">// &quot;Current year is 2017 and hour is 23\n&quot;</span></span><br></pre></td></tr></table></figure><p>设置默认区域时要小心。我们仍然建议使用 DateInRegion 实例，这样您就可以显式读取区域。</p><h3 id="Create-Region"><a href="#Create-Region" class="headerlink" title="Create Region"></a>Create Region</h3><p>现在，您可以创建新的 DateInRegion。创建新日期的方法有很多种：解析字符串、设置时间组件、从另一个日期或给定的时间间隔派生它。</p><p>每个初始化方法都需要一个 region 参数，该参数定义表示日期的区域（默认值可能因 init 而异，如下所示）。</p><h4 id="From-String"><a href="#From-String" class="headerlink" title="From String"></a>From String</h4><p>最常见的情况是解析字符串并将其转换为日期。如您所知，DateFormatter 的创建成本很高，如果您需要解析多个字符串，则应避免在循环中创建新实例。别担心：使用 SwiftDate，该库通过重用自己的解析器（沿调用方线程共享）来帮助您。</p><p><code>DateInRegion 的 init(_：format：region)</code>可用于从字符串初始化新日期（在 String extensions 的 toXXX 前缀下可以使用各种快捷方式）。</p><p>此对象采用三个参数：</p><ul><li>要解析的字符串 （String）</li><li>字符串的格式 （String）：这表示表示字符串的格式。它是 unicode 格式（请参阅字段表）。如果跳过此参数，SwiftDate 将尝试使用 SwiftDate.autoFormats 数组中定义的内置格式之一来解析日期。如果您知道日期的格式，则应明确设置它以获得更好的性能。</li><li>表示日期的区域 （Region）。默认情况下设置为 SwiftDate.defaultRegion。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 <span class="operator">=</span> <span class="type">DateInRegion</span>(<span class="string">&quot;2016-01-05&quot;</span>, format: <span class="string">&quot;yyyy-MM-dd&quot;</span>, region: regionNY)</span><br><span class="line"><span class="keyword">let</span> date2 <span class="operator">=</span> <span class="type">DateInRegion</span>(<span class="string">&quot;2015-09-24T13:20:55&quot;</span>, region: regionNY)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Parse-Custom-Format"><a href="#Parse-Custom-Format" class="headerlink" title="Parse Custom Format"></a>Parse Custom Format</h2><p>将输入字符串转换为有效日期的最简单方法是使用可用作 String 实例扩展的 .toDate（） 函数之一。这些方法的目的是获得可以表示输入字符串的最佳格式，并使用它来生成有效的 DateInRegion。</p><p>与 moment.js 等其他库一样，SwiftDate 有一个内置格式列表，它可以用来获得有效的结果。您可以通过调用 SwiftDate.autoFormats 来获取这些格式的列表。此数组的顺序很重要，因为 SwiftDate 会循环访问此列表，直到返回有效日期 （顺序本身允许库减少误报列表） 。</p><p>您可以通过添加&#x2F;删除或替换此数组的内容来更改此列表。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.toDate(<span class="keyword">_</span> format: <span class="type">String</span>?, region: <span class="type">Region</span>?)</span><br><span class="line">.toDate(<span class="keyword">_</span> formats: [<span class="type">String</span>]<span class="operator">?</span>, region: <span class="type">Region</span>?)</span><br></pre></td></tr></table></figure><p>functions takes as input two arguments:<br>functions 将两个参数作为输入：</p><ul><li>format （String|Array）：它是可选的，允许您显式设置 SwiftDate 必须用于解析日期的格式（或格式的有序列表）。允许的值列在 Unicode DateTime Table 中，您可以在此处找到。如果省略，则 SwiftDates 尝试解析遍历 SwiftDate.autoFormats 中列出的 auto 模式列表的字符串。</li><li>region （Region）：描述表示日期的区域 （locale&#x2F;calendar&#x2F;timezone）。如果省略，则使用 iinstead 的默认区域 （SwiftDate.defaultRegion）。<br>这些函数的结果是一个可选的 DateInRegion 实例（如果解析失败，则返回 nil）。</li></ul><p>Some examples: 一些例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;2018-01-01 15:00&quot;</span>.toDate()</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;15:40:50&quot;</span>.toDate(<span class="string">&quot;HH:mm:ss&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;2015-01-01 at 14&quot;</span>.toDate(<span class="string">&quot;yyyy-MM-dd &#x27;at&#x27; HH&quot;</span>, region: rome)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support for locale</span></span><br><span class="line"><span class="keyword">let</span> itRegion <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.italian)</span><br><span class="line"><span class="keyword">let</span> enRegion <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.english)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> srcString <span class="operator">=</span> <span class="string">&quot;July 15 - 15:30&quot;</span></span><br><span class="line"><span class="comment">// it returns nil because itRegion has Locales.italian</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> srcString.toDate([<span class="string">&quot;yyyy-MM-dd&quot;</span>,<span class="string">&quot;MMM dd &#x27;-&#x27; HH:mm&quot;</span>], region: itRegion)</span><br><span class="line"><span class="comment">// it&#x27;s okay because enRegion has locale set to english</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> srcString.toDate([<span class="string">&quot;yyyy-MM-dd&quot;</span>,<span class="string">&quot;MMM dd &#x27;-&#x27; HH:mm&quot;</span>], region: enRegion)</span><br></pre></td></tr></table></figure><blockquote><p>性能为了保持性能，如果您知道 input 格式，则应传递 format 参数。<br>LOCALE 参数如果您使用可读的单位名称（例如表示月份的 MMM），请确保在 region 参数中选择正确的区域设置，以获得有效的结果。</p></blockquote><h2 id="Date-Formatting"><a href="#Date-Formatting" class="headerlink" title="Date Formatting"></a>Date Formatting</h2><p>日期格式设置非常简单，您可以指定自己的格式、区域设置或使用提供的任何格式、区域设置。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date Formatting</span></span><br><span class="line"><span class="keyword">let</span> london <span class="operator">=</span> <span class="type">Region</span>(calendar: .gregorian, zone: .europeLondon, locale: .english)</span><br><span class="line"><span class="keyword">let</span> date <span class="operator">=</span> <span class="operator">...</span> <span class="comment">// 2017-07-22T18:27:02+02:00 in london region</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toDotNET() <span class="comment">// /Date(1500740822000+0200)/</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toISODate() <span class="comment">// 2017-07-22T18:27:02+02:00</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toFormat(<span class="string">&quot;dd MMM yyyy &#x27;at&#x27; HH:mm&quot;</span>) <span class="comment">// &quot;22 July 2017 at 18:27&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also easily change locale when formatting a region</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toFormat(<span class="string">&quot;dd MMM&quot;</span>, locale: .italian) <span class="comment">// &quot;22 Luglio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Interval Formatting as Countdown</span></span><br><span class="line"><span class="keyword">let</span> interval: <span class="type">TimeInterval</span> <span class="operator">=</span> (<span class="number">2</span>.hours.timeInterval) <span class="operator">+</span> (<span class="number">34</span>.minutes.timeInterval) <span class="operator">+</span> (<span class="number">5</span>.seconds.timeInterval)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> interval.toClock() <span class="comment">// &quot;2:34:05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Interval Formatting by Components</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> interval.toString &#123;</span><br><span class="line"><span class="variable">$0</span>.maximumUnitCount <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="variable">$0</span>.allowedUnits <span class="operator">=</span> [.day, .hour, .minute]</span><br><span class="line"><span class="variable">$0</span>.collapsesLargestUnit <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="variable">$0</span>.unitsStyle <span class="operator">=</span> .abbreviated</span><br><span class="line">&#125; <span class="comment">// &quot;2h 34m&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SwiftDate-使用&quot;&gt;&lt;a href=&quot;#SwiftDate-使用&quot; class=&quot;headerlink&quot; title=&quot;SwiftDate 使用&quot;&gt;&lt;/a&gt;SwiftDate 使用&lt;/h1&gt;&lt;p&gt;Apple 中的&lt;strong&gt;Date&lt;/strong&gt;完</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://effort.fun/tags/iOS/"/>
    
    <category term="swift" scheme="http://effort.fun/tags/swift/"/>
    
    <category term="date" scheme="http://effort.fun/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>storekit</title>
    <link href="http://effort.fun/post/storekit.html"/>
    <id>http://effort.fun/post/storekit.html</id>
    <published>2024-10-19T00:01:35.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="客户端注意事项"><a href="#客户端注意事项" class="headerlink" title="客户端注意事项"></a>客户端注意事项</h4><p>每次启动都需要校验数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> appStoreReceiptURL <span class="operator">=</span> <span class="type">Bundle</span>.main.appStoreReceiptURL,</span><br><span class="line">    <span class="type">FileManager</span>.default.fileExists(atPath: appStoreReceiptURL.path) &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> receiptData <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: appStoreReceiptURL, options: .alwaysMapped)</span><br><span class="line">        <span class="keyword">let</span> receiptString <span class="operator">=</span> receiptData.base64EncodeString(options: [])</span><br><span class="line">        <span class="comment">// 1. update the receiptString to server</span></span><br><span class="line">        <span class="comment">// 2. server should checkout to apple server call http method verifReceipt</span></span><br><span class="line">        <span class="comment">// 3. update subscribed status</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;some error in there: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="服务端注意事项"><a href="#服务端注意事项" class="headerlink" title="服务端注意事项"></a>服务端注意事项</h4><p>Server-to-Server Notifications</p><p><strong>original_transaction_id 是订阅的唯一标识符</strong></p><ul><li><p>当服务端收到苹果通知后，需要向苹果服务器响应200状态码，如果没有返回200 苹果最多重试3次</p></li><li><p>使用的 originalTransactionId 和 user 做的关联 添加 lastReceiptData 数据</p></li></ul><h4 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h4><p><a href="https://developer.apple.com/videos/play/wwdc2022/110404/">实施主动应用内购买恢复</a><br><a href="https://developer.apple.com/videos/play/wwdc2020/10671">为订阅构建架构</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/302">App 内购买和使用服务器到服务器通知</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/305">订阅优惠最佳实践</a><br><a href="https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/705_hd_engineering_subscriptions.mp4?dl=1">工程订阅</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/305">订阅优惠最佳实践</a></p><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><a href="https://developer.apple.com/documentation/storekit/in-app_purchase/implementing_a_store_in_your_app_using_the_storekit_api">使用 StoreKit API 在 App 中实现商店</a><br><a href="https://wwdcnotes.com/documentation/wwdcnotes/wwdc18-705-engineering-subscriptions">工程订阅</a><br><a href="https://nonstrict.eu/wwdcindex/wwdc2018/705/">工程订阅pdf</a><br><a href="https://nilotic.github.io/2018/09/16/Engineering-Subscriptions.html">Engineering-Subscriptions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;客户端注意事项&quot;&gt;&lt;a href=&quot;#客户端注意事项&quot; class=&quot;headerlink&quot; title=&quot;客户端注意事项&quot;&gt;&lt;/a&gt;客户端注意事项&lt;/h4&gt;&lt;p&gt;每次启动都需要校验数据&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;t</summary>
      
    
    
    
    
    <category term="apple" scheme="http://effort.fun/tags/apple/"/>
    
    <category term="storkit" scheme="http://effort.fun/tags/storkit/"/>
    
    <category term="subscribe" scheme="http://effort.fun/tags/subscribe/"/>
    
  </entry>
  
  <entry>
    <title>RxSwif中的self引用问题.md</title>
    <link href="http://effort.fun/post/2024-09-21-RxSwift-md.html"/>
    <id>http://effort.fun/post/2024-09-21-RxSwift-md.html</id>
    <published>2024-09-21T19:49:15.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理-closure-中的-self"><a href="#处理-closure-中的-self" class="headerlink" title="处理 closure 中的 self"></a>处理 closure 中的 self</h2><p>首先，如果 App 的 View Controller 会常驻在内存里，我们就根本无需担心这个问题，直接在 closure 中使用 self 就好，不用指定 unowned 或 weak。因为 Observables 的回收，是通过 DisposeBag 完成的，如果 View Controller 常驻在内存里，Observables 始终都不会回收，即便真的存在引用循环，也不会带来任何问题。</p><p>其次，在 Closure 和 View Controller 生命周期同步的时候，使用 unowned 捕获 self。也就是说 closure 代码执行完了，View Controller 也结束了。我们假设某个 UI 上有一个上传配置的按钮，点击同步完成后，自动退出这个界面。这种情况，按钮的事件处理 closure 中，我们就可以使用[unowned self]，因为我们可以确信，当这段 closure 执行的时候，self 不可能是 nil；</p><p>最后，不属于之前两种情况的，都使用[weak self]；</p><p>这样，我们就从另外一个角度，理解了捕获 self 问题。遵从这些原则，就可以有效地避免 RxSwift 相关的代码引起的内存泄漏或者意外崩溃问题。而解决了这个问题，我们才可以更安心地在项目中应用 RxSwift。</p><p><a href="https://boxueio.com/series/rxswift-101/episodes/243">理解重复订阅 Observable 的行为</a></p><p><a href="https://boxueio.com/series/rxswift-101/episode-documents/223">循环引用问题注意</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;处理-closure-中的-self&quot;&gt;&lt;a href=&quot;#处理-closure-中的-self&quot; class=&quot;headerlink&quot; title=&quot;处理 closure 中的 self&quot;&gt;&lt;/a&gt;处理 closure 中的 self&lt;/h2&gt;&lt;p&gt;首先，如果 </summary>
      
    
    
    
    
    <category term="RxSwift" scheme="http://effort.fun/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>运维</title>
    <link href="http://effort.fun/post/ops.html"/>
    <id>http://effort.fun/post/ops.html</id>
    <published>2024-08-26T15:33:51.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 卸载之前安装的组件</span></span><br><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 docker 依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 切换镜像</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 安装docker</span></span><br><span class="line">yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启动服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;docker-安装&quot;&gt;&lt;a href=&quot;#docker-安装&quot; class=&quot;headerlink&quot; title=&quot;docker 安装&quot;&gt;&lt;/a&gt;docker 安装&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
    <category term="docker" scheme="http://effort.fun/tags/docker/"/>
    
    <category term="nginx" scheme="http://effort.fun/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>learning-expo</title>
    <link href="http://effort.fun/post/learning-expo.html"/>
    <id>http://effort.fun/post/learning-expo.html</id>
    <published>2024-05-18T13:15:27.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习-Expo-开发"><a href="#学习-Expo-开发" class="headerlink" title="学习 Expo 开发"></a>学习 Expo 开发</h2><h4 id="使用-Expo-开发"><a href="#使用-Expo-开发" class="headerlink" title="使用 Expo 开发"></a>使用 Expo 开发</h4><p>项目根目录下没有 ios 和 android 文件夹</p><ul><li>不支持需要原生配置的第三方库（不在 Expo SDK 内的）</li><li>不支持集成原生代码</li></ul><p><strong><a href="https://github.com/expo/expo/issues/28898">router路由问题</a></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-expo-app@latest --template</span><br><span class="line"></span><br><span class="line"><span class="comment">## 要在网络上运行该项目，我们需要安装以下依赖，这将有助于在网络上运行该项目：</span></span><br><span class="line">npx expo install react-dom react-native-web @expo/metro-runtime</span><br></pre></td></tr></table></figure><h4 id="使用-development-builds"><a href="#使用-development-builds" class="headerlink" title="使用 development builds"></a><a href="https://expo.nodejs.cn/guides/local-app-development/">使用 development builds</a></h4><ul><li>支持安装任何第三方库</li><li>支持原生代码集成</li><li>支持修改任何项目配置</li></ul><h4 id="使用Reac-Native-开发，集成-Expo-SDK-库"><a href="#使用Reac-Native-开发，集成-Expo-SDK-库" class="headerlink" title="使用Reac Native 开发，集成 Expo SDK 库"></a>使用Reac Native 开发，集成 Expo SDK 库</h4><h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><p><a href="https://gluestack.io/">gluestack</a></p><h2 id="expo-router"><a href="#expo-router" class="headerlink" title="expo-router"></a>expo-router</h2><p>可以使用默认的文件系统路由方式</p><p><a href="https://github.com/craftzdog/react-native-animated-todo">也可以是用旧的版本</a></p><h2 id="初始化项目流程"><a href="#初始化项目流程" class="headerlink" title="初始化项目流程"></a>初始化项目流程</h2><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写在最前面 请最好使用 npm</span></span><br><span class="line">npm create expo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要 原生包</span></span><br><span class="line"><span class="comment"># https://docs.expo.dev/workflow/continuous-native-generation/</span></span><br><span class="line">npm expo prebuild --platform ios/android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 eas build 生成 eas.json 文件</span></span><br><span class="line"><span class="comment"># https://docs.expo.dev/build/setup/</span></span><br><span class="line">eas build:configure</span><br></pre></td></tr></table></figure><ul><li>​​Expo Go 的限制​​<ul><li>Expo Go 是一个通用客户端，仅支持纯 JavaScript 项目（即未添加原生模块或自定义配置的 Expo 项目）。</li><li>如果你通过 eas build 生成了本地原生二进制文件（如 .apk 或 .ipa），或使用了 expo prebuild 生成了原生代码（如 android&#x2F; 和 ios&#x2F; 目录），项目就脱离了 Expo Go 的兼容范围。</li></ul></li></ul><p>本地 build</p><ul><li>使用开发客户端（Development Build）​​<ul><li>通过 expo run:android 或 expo run:ios 在设备上安装一个​​自定义的开发客户端​​（包含你的原生代码）。</li><li>调试方式：<ul><li>运行 expo start 启动开发服务器。</li><li>在开发客户端中手动输入开发服务器 URL（如 exp:&#x2F;&#x2F;192.168.x.x:8081），或通过 QR 码（需配合 expo start –dev-client）。</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 Gradle 和 JDK 版本兼容</span></span><br><span class="line"><span class="comment"># expo 53  gradle 8.13  jdk 17.0</span></span><br><span class="line"><span class="comment"># npx expo run:android 此命令会报错 https://github.com/expo/expo/issues/28703</span></span><br><span class="line">npx expo run:android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成环境 打包流程 https://docs.expo.dev/guides/local-app-production/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> android</span><br><span class="line"><span class="comment">## 打包 aab</span></span><br><span class="line">./gradlew app:bundleRelease</span><br><span class="line"><span class="comment">## 打包 apk</span></span><br><span class="line">./gradlew app:assembleRelease</span><br></pre></td></tr></table></figure><p>减小包体积 在 android&#x2F;app&#x2F;build.gradle 文件中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  splits &#123;</span><br><span class="line">    abi &#123;</span><br><span class="line">      reset()</span><br><span class="line">      enable <span class="literal">true</span></span><br><span class="line">      universalApk <span class="literal">false</span>  <span class="comment">// 不生成通用APK</span></span><br><span class="line">      include <span class="string">&quot;arm64-v8a&quot;</span>  <span class="comment">// 只打包这两种架构</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于热更"><a href="#关于热更" class="headerlink" title="关于热更"></a><a href="https://docs.expo.dev/eas-update/getting-started/#publish-an-update">关于热更</a></h3><p><a href="https://github.com/expo/custom-expo-updates-server">自建热更平台</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- EXPO_UPDATE_URL 值应包含项目的 ID --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.EXPO_UPDATE_URL&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;https://u.expo.dev/your-project-id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.EXPO_RUNTIME_VERSION&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;@string/expo_runtime_version&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;&#123;&#x27;expo-channel-name&#x27;:&#x27;your-channel-name&#x27;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改 app.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;expo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;updates&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">&quot;requestHeaders&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;expo-channel-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-channel-name&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热更</span></span><br><span class="line">eas update --channel [channel-name] --message <span class="string">&quot;[message]&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习-Expo-开发&quot;&gt;&lt;a href=&quot;#学习-Expo-开发&quot; class=&quot;headerlink&quot; title=&quot;学习 Expo 开发&quot;&gt;&lt;/a&gt;学习 Expo 开发&lt;/h2&gt;&lt;h4 id=&quot;使用-Expo-开发&quot;&gt;&lt;a href=&quot;#使用-Expo-开发&quot;</summary>
      
    
    
    
    
    <category term="React Naive" scheme="http://effort.fun/tags/React-Naive/"/>
    
    <category term="expo" scheme="http://effort.fun/tags/expo/"/>
    
  </entry>
  
  <entry>
    <title>oc视频抽取</title>
    <link href="http://effort.fun/post/2024-04-30-oc%E8%A7%86%E9%A2%91%E6%8A%BD%E5%8F%96.html"/>
    <id>http://effort.fun/post/2024-04-30-oc%E8%A7%86%E9%A2%91%E6%8A%BD%E5%8F%96.html</id>
    <published>2024-04-30T18:08:12.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="视频抽取"><a href="#视频抽取" class="headerlink" title="视频抽取"></a>视频抽取</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">void</span>)drawFramesFromVideoAtPath:(<span class="built_in">NSString</span> *)videoPath toDirectory:(<span class="built_in">NSString</span> *)outPath withTargetFrame:(<span class="built_in">NSUInteger</span>)targetFrame &#123;</span><br><span class="line">    DLog(<span class="string">@&quot;-------------------------视频抽帧-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (![fileManager fileExistsAtPath:outPath]) &#123;</span><br><span class="line">        <span class="comment">// 判断文件夹是否存在</span></span><br><span class="line">        [fileManager createDirectoryAtPath:outPath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:&amp;error];</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            DLog(<span class="string">@&quot;创建输出目录失败：%@&quot;</span>, error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURL</span> *videoURL = [<span class="built_in">NSURL</span> fileURLWithPath:videoPath];</span><br><span class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:videoURL];</span><br><span class="line">    <span class="built_in">AVAssetTrack</span> *videoTrack = [[asset tracksWithMediaType:<span class="built_in">AVMediaTypeVideo</span>] firstObject];</span><br><span class="line">    <span class="built_in">NSUInteger</span> frames = <span class="built_in">CMTimeGetSeconds</span>(asset.duration) * videoTrack.nominalFrameRate;</span><br><span class="line">    DLog(<span class="string">@&quot;视频共%lu帧，抽取%lu帧......&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)frames, (<span class="type">unsigned</span> <span class="type">long</span>)(frames / targetFrame) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AVAssetReader</span> *assetReader = [<span class="built_in">AVAssetReader</span> assetReaderWithAsset:asset error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;创建AVAssetReader失败：%@&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AVAssetReaderTrackOutput</span> *output = [<span class="built_in">AVAssetReaderTrackOutput</span> assetReaderTrackOutputWithTrack:videoTrack outputSettings:@&#123;</span><br><span class="line">        (<span class="built_in">NSString</span> *)kCVPixelBufferPixelFormatTypeKey : @(kCVPixelFormatType_32BGRA)</span><br><span class="line">    &#125;];</span><br><span class="line">    [assetReader addOutput:output];</span><br><span class="line">    [assetReader startReading];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSUInteger</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> imageIndex = <span class="number">1000001</span>;</span><br><span class="line">    <span class="keyword">while</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusReading</span>) &#123;</span><br><span class="line">        <span class="built_in">CMSampleBufferRef</span> sampleBuffer = [output copyNextSampleBuffer];</span><br><span class="line">        <span class="keyword">if</span> (sampleBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count % targetFrame == <span class="number">0</span> || count == frames - <span class="number">1</span>) &#123;</span><br><span class="line">            DLog(<span class="string">@&quot;已提取 %d&quot;</span>, (imageIndex - <span class="number">1000000</span>));</span><br><span class="line">            <span class="keyword">@autoreleasepool</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">UIImage</span> *uiImage = [<span class="keyword">self</span> convertSampleBufferRefToUIImage:sampleBuffer];</span><br><span class="line">                <span class="built_in">NSString</span> *savePath = [outPath stringByAppendingPathComponent:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%lu.png&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)imageIndex]];</span><br><span class="line">                <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">                    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>(uiImage);</span><br><span class="line">                    [imageData writeToFile:savePath atomically:<span class="literal">YES</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            imageIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">CFRelease</span>(sampleBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusCompleted</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;视频已全部抽帧完成......&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusFailed</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;抽帧失败：%@&quot;</span>, assetReader.error);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusCancelled</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;抽帧被取消&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DLog(<span class="string">@&quot;-------------------------抽帧完成-------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)convertSampleBufferRefToUIImage:(<span class="built_in">CMSampleBufferRef</span>)sampleBufferRef</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGImageRef</span> cgImage = [<span class="keyword">self</span> convertSamepleBufferRefToCGImage:sampleBufferRef];</span><br><span class="line">        <span class="built_in">UIImage</span> *image;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGFloat</span> height = <span class="built_in">CGImageGetHeight</span>(cgImage);</span><br><span class="line">        <span class="built_in">CGFloat</span> width = <span class="built_in">CGImageGetWidth</span>(cgImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        height = height / 5;</span></span><br><span class="line"><span class="comment">//        width = width / 5;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="built_in">CGSizeMake</span>(width, height), <span class="literal">NO</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UseUIImage 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UseUIImage</span></span><br><span class="line"></span><br><span class="line">        [image drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height)];</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">        <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, height);</span><br><span class="line">        <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line">        <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height), cgImage);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGImageRelease</span>(cgImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        UIGraphicsEndImageContext();</span></span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a UIImage from sample buffer data</span></span><br><span class="line"><span class="comment">// 官方回答 https://developer.apple.com/library/ios/qa/qa1702/_index.html</span></span><br><span class="line">+ (<span class="built_in">CGImageRef</span>)convertSamepleBufferRefToCGImage:(<span class="built_in">CMSampleBufferRef</span>)sampleBufferRef &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get a CMSampleBuffer&#x27;s Core Video image buffer for the media data</span></span><br><span class="line">        CVImageBufferRef imageBuffer = <span class="built_in">CMSampleBufferGetImageBuffer</span>(sampleBufferRef);</span><br><span class="line">        <span class="comment">// Lock the base address of the pixel buffer</span></span><br><span class="line">        CVPixelBufferLockBaseAddress(imageBuffer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the number of bytes per row for the pixel buffer</span></span><br><span class="line">        <span class="type">void</span> *baseAddress = CVPixelBufferGetBaseAddress(imageBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the number of bytes per row for the pixel buffer</span></span><br><span class="line">        size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer);</span><br><span class="line">        <span class="comment">// Get the pixel buffer width and height</span></span><br><span class="line">        size_t width = CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">        size_t height = CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a device-dependent RGB color space</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a bitmap graphics context with the sample buffer data</span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(baseAddress, width, height, <span class="number">8</span>,</span><br><span class="line">                                                     bytesPerRow, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst);</span><br><span class="line">        <span class="comment">// Create a Quartz image from the pixel data in the bitmap graphics context</span></span><br><span class="line">        <span class="built_in">CGImageRef</span> quartzImage = <span class="built_in">CGBitmapContextCreateImage</span>(context);</span><br><span class="line">        <span class="comment">// Unlock the pixel buffer</span></span><br><span class="line">        CVPixelBufferUnlockBaseAddress(imageBuffer,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Free up the context and color space</span></span><br><span class="line">        <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">        <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quartzImage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;视频抽取&quot;&gt;&lt;a href=&quot;#视频抽取&quot; class=&quot;headerlink&quot; title=&quot;视频抽取&quot;&gt;&lt;/a&gt;视频抽取&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://effort.fun/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>fastlane</title>
    <link href="http://effort.fun/post/fastlane.html"/>
    <id>http://effort.fun/post/fastlane.html</id>
    <published>2023-07-25T13:19:08.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gym-action-example"><a href="#gym-action-example" class="headerlink" title="gym action example"></a>gym action example</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">&quot;ci 发包&quot;</span></span><br><span class="line">  lane <span class="symbol">:ci</span> <span class="keyword">do</span></span><br><span class="line">    build_app(</span><br><span class="line">      <span class="symbol">workspace:</span> <span class="string">&quot;yourapp.xcworkspace&quot;</span>,</span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">&quot;CI&quot;</span>,</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">&quot;yourscheme&quot;</span>,</span><br><span class="line">      <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> <span class="string">&quot;path&quot;</span>,</span><br><span class="line">      <span class="symbol">output_name:</span> <span class="string">&quot;youapp.ipa&quot;</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">method:</span> <span class="string">&#x27;ad-hoc&#x27;</span>,</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123;</span><br><span class="line">          <span class="comment"># just file name not path !!!</span></span><br><span class="line">          <span class="string">&quot;bundle id&quot;</span> =&gt; <span class="string">&quot;file name&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&quot;release 发包&quot;</span></span><br><span class="line">  lane <span class="symbol">:release</span>  <span class="keyword">do</span></span><br><span class="line">    increment_build_number</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gym-action-example&quot;&gt;&lt;a href=&quot;#gym-action-example&quot; class=&quot;headerlink&quot; title=&quot;gym action example&quot;&gt;&lt;/a&gt;gym action example&lt;/h2&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="iOS" scheme="http://effort.fun/tags/iOS/"/>
    
    <category term="fastlane" scheme="http://effort.fun/tags/fastlane/"/>
    
  </entry>
  
  <entry>
    <title>css-grid</title>
    <link href="http://effort.fun/post/css-grid.html"/>
    <id>http://effort.fun/post/css-grid.html</id>
    <published>2023-04-27T14:25:10.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><h4 id="grid-基本使用"><a href="#grid-基本使用" class="headerlink" title="grid 基本使用"></a>grid 基本使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  // 对角坐标 (x1, y1)  (x2, y2)</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">4</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / span <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;header header header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;. footer footer footer .&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: nav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;grid-布局&quot;&gt;&lt;a href=&quot;#grid-布局&quot; class=&quot;headerlink&quot; title=&quot;grid 布局&quot;&gt;&lt;/a&gt;grid 布局&lt;/h2&gt;&lt;h4 id=&quot;grid-基本使用&quot;&gt;&lt;a href=&quot;#grid-基本使用&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="css" scheme="http://effort.fun/tags/css/"/>
    
    <category term="grid" scheme="http://effort.fun/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>实现 Fiber Tree</title>
    <link href="http://effort.fun/post/micro-react-04-fibers.html"/>
    <id>http://effort.fun/post/micro-react-04-fibers.html</id>
    <published>2023-02-28T15:29:00.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 fiber 创建一个 dom 并返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDom</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = fiber.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(fiber.<span class="property">props</span>.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(fiber.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(fiber.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = fiber.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">  nextUnitOfWork = &#123;</span><br><span class="line">    <span class="attr">dom</span>: container,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">children</span>: [element]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">child</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">sibling</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">return</span>: <span class="literal">null</span>, <span class="comment">// 表示父节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params">deadLine</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 应该终止</span></span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span></span><br><span class="line">  <span class="title function_">where</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// 做工作</span></span><br><span class="line">    nextUnitOfWork = <span class="title function_">preformUnitOfWork</span>(</span><br><span class="line">      nextUnitOfWork</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 判断后续是否还有空闲时间</span></span><br><span class="line">    shouldYield = deadLine.<span class="title function_">timeRemaining</span>() &lt; <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 空闲时间不足  会在浏览器下一次空闲时候执行</span></span><br><span class="line">  <span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用</span></span><br><span class="line"><span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preformUnitOfWork</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber.<span class="property">dom</span>) &#123;</span><br><span class="line">    fiber.<span class="property">dom</span> = <span class="title function_">createDom</span>(fiber)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fiber.<span class="property">return</span>) &#123;</span><br><span class="line">    fiber.<span class="property">return</span>.<span class="property">dom</span>.<span class="title function_">append</span>(fiber.<span class="property">dom</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> elements = fiber.<span class="property">props</span>.<span class="property">children</span></span><br><span class="line">  <span class="keyword">let</span> prevSibling = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = elements[i]</span><br><span class="line">    <span class="keyword">const</span> newFiber = &#123;</span><br><span class="line">      <span class="attr">type</span>: element.<span class="property">type</span>,</span><br><span class="line">      <span class="attr">props</span>: element.<span class="property">props</span></span><br><span class="line">      <span class="attr">return</span>: fiber,</span><br><span class="line">      <span class="attr">dom</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">sibling</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是第一个</span></span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// newFiber 就是 当前 fiber 的一个 child 节点</span></span><br><span class="line">      filber.<span class="property">child</span> = newFiber</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则就是 sibling 节点</span></span><br><span class="line">      prevSibling.<span class="property">sibling</span> = newFiber</span><br><span class="line">    &#125;</span><br><span class="line">    prevSibling = newFiber</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回下一个</span></span><br><span class="line">  <span class="comment">// 优先返回 child</span></span><br><span class="line">  <span class="keyword">if</span> (fiber.<span class="property">child</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fiber.<span class="property">child</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nextFiber = fiber</span><br><span class="line">  <span class="title function_">where</span> (nextFiber) &#123;</span><br><span class="line">    <span class="comment">// 其次返回 sibling</span></span><br><span class="line">    <span class="keyword">if</span> (nextFiber.<span class="property">sibling</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nextFiber.<span class="property">sibling</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都没有 就需要向上查找</span></span><br><span class="line">    nextFiber = nextFiber.<span class="property">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="React" scheme="http://effort.fun/tags/React/"/>
    
    <category term="fiber tree" scheme="http://effort.fun/tags/fiber-tree/"/>
    
  </entry>
  
  <entry>
    <title>实现并行渲染调度函数</title>
    <link href="http://effort.fun/post/micro-react-03-concurrentMode.html"/>
    <id>http://effort.fun/post/micro-react-03-concurrentMode.html</id>
    <published>2023-02-28T15:28:00.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = element.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(element.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = element.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历创建子元素</span></span><br><span class="line">  element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(child, dom)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加 dom 元素 到 父节点</span></span><br><span class="line">  container.<span class="title function_">append</span>(dom)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params">deadLine</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 应该终止</span></span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span></span><br><span class="line">  <span class="title function_">where</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// 做工作</span></span><br><span class="line">    nextUnitOfWork = <span class="title function_">preformUnitOfWork</span>(</span><br><span class="line">      nextUnitOfWork</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 判断后续是否还有空闲时间</span></span><br><span class="line">    shouldYield = deadLine.<span class="title function_">timeRemaining</span>() &lt; <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 空闲时间不足  会在浏览器下一次空闲时候执行</span></span><br><span class="line">  <span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用</span></span><br><span class="line"><span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preformUnitOfWork</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="React" scheme="http://effort.fun/tags/React/"/>
    
    <category term="Concurrent Mode" scheme="http://effort.fun/tags/Concurrent-Mode/"/>
    
  </entry>
  
  <entry>
    <title>实现render函数</title>
    <link href="http://effort.fun/post/micro-react-02-renderAPI.html"/>
    <id>http://effort.fun/post/micro-react-02-renderAPI.html</id>
    <published>2023-02-28T15:26:00.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = element.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(element.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = element.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历创建子元素</span></span><br><span class="line">  element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(child, dom)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加 dom 元素 到 父节点</span></span><br><span class="line">  container.<span class="title function_">append</span>(dom)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="React" scheme="http://effort.fun/tags/React/"/>
    
    <category term="render" scheme="http://effort.fun/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>实现createElement函数</title>
    <link href="http://effort.fun/post/micro-react-01-createElementAPI.html"/>
    <id>http://effort.fun/post/micro-react-01-createElementAPI.html</id>
    <published>2023-02-28T15:25:00.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CreateElement"><a href="#CreateElement" class="headerlink" title="CreateElement"></a>CreateElement</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createElement.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, props, ...children</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      <span class="attr">children</span>: children.<span class="title function_">map</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">typeof</span> child === <span class="string">&#x27;object&#x27;</span>) ? child : <span class="title function_">createTextElement</span>(child)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// text 文本节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTextElement</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;TEXT_ELEMENT&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">nodeValue</span>: text,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createElement</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createElement, render &#125; <span class="keyword">from</span> <span class="string">&#x27;micro-react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 dom  节点</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">createElement</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">class</span>: <span class="string">&#x27;custom&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">style</span>: <span class="string">&#x27;background: yellow&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello Word&#x27;</span>,</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;h2&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Effort&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 dom</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line"><span class="title function_">render</span>(element, container)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CreateElement&quot;&gt;&lt;a href=&quot;#CreateElement&quot; class=&quot;headerlink&quot; title=&quot;CreateElement&quot;&gt;&lt;/a&gt;CreateElement&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    
    <category term="React" scheme="http://effort.fun/tags/React/"/>
    
    <category term="createElement" scheme="http://effort.fun/tags/createElement/"/>
    
  </entry>
  
  <entry>
    <title>实现一个迷你的 React</title>
    <link href="http://effort.fun/post/micro-react-00-micro-react.html"/>
    <id>http://effort.fun/post/micro-react-00-micro-react.html</id>
    <published>2023-02-27T15:25:00.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据 <a href="https://pomb.us/build-your-own-react/">build-your-own-react</a> 和 <a href="https://www.bilibili.com/video/BV1HP411j7yk/">Dragonfly_Y</a> 学习了关于 react 底层的一些东西</p><p>实现了下 micro-react</p><p>分为一下几个模块</p><ul><li>Step I: <a href="https://effort.fun/post/micro-react-01-createElementAPI.html">实现 createElement 函数</a></li><li>Step II: <a href="https://effort.fun/post/micro-react-02-renderAPI.html">实现 render 函数</a></li><li>Step III: <a href="https://effort.fun/post/micro-react-03-concurrentMode.html">并发模式</a></li><li>Step IV: <a href="https://effort.fun/post/micro-react-04-fibers.html">Fibers 结构</a></li><li>Step V: Render and Commit Phases</li><li>Step VI: Reconciliation</li><li>Step VII: Function Components</li><li>Step VIII: Hooks</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;根据 &lt;a href=&quot;https://pomb.us/build-your-own-react/&quot;&gt;build-your-own-react&lt;/a&gt; 和 &lt;a href=&quot;https://www.bilibili.com/video/BV1HP411j7yk/&quot;&gt;Drag</summary>
      
    
    
    
    
    <category term="React" scheme="http://effort.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://effort.fun/post/miniprogram.html"/>
    <id>http://effort.fun/post/miniprogram.html</id>
    <published>2023-02-23T21:49:22.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信小程序的双线程模型"><a href="#微信小程序的双线程模型" class="headerlink" title="微信小程序的双线程模型"></a>微信小程序的双线程模型</h2><p>小程序的双线程指的就是渲染线程和逻辑线程，这两个线程分别承担UI的渲染和执行 JavaScript 代码的工作。</p><p>渲染层的界面使用了WebView 进行渲染；逻辑层采用 JsCore 线程运行 JS 脚本。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程，这两个线程的通信会经由微信客户端做中转，逻辑层发送网络请求也经由 Native 转发</p><p>为什么不采用 Web Worker 的方式 主要是性能问题  Web Worker 通信方式 要比 Native 转发更加 耗费性能</p><p>另一个 shadow Dom 兼容性很差</p><p>小程序 事件驱动的通信方式</p><p>渲染成与逻辑层并不是直接传递数据和事件的，而是由 Native 作为中间媒介进行转发</p><p>UI -&gt; event -&gt; jscore -&gt; tranform data(逻辑、接口调用、数据请求) -&gt; setData(render) -&gt; UI</p><p>setData 主要做了两件事</p><ul><li><p>改变逻辑层中目标属性的值</p></li><li><p>通过微信客户端(Native)通知到渲染层将 目标属性的值 更新到视图</p></li></ul><p>往下延伸</p><p>也就是 不在 UI 层展示的数据 完全可以不用 setData 方法去更新值</p><p>减少多次 setData 调用</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html">具体查看</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/framework.html#%E6%B8%B2%E6%9F%93%E5%B1%82%E5%92%8C%E9%80%BB%E8%BE%91%E5%B1%82">具体查看</a></p><h2 id="小程序用户认证体系-OAuth2-0"><a href="#小程序用户认证体系-OAuth2-0" class="headerlink" title="小程序用户认证体系 OAuth2.0"></a>小程序用户认证体系 OAuth2.0</h2><p><a href="https://zhuanlan.zhihu.com/p/509212673">OAuth2.0</a></p><h2 id="小程序优化"><a href="#小程序优化" class="headerlink" title="小程序优化"></a>小程序优化</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p>大图资源可放在云服务上优化</p><p>对于小图可采用 svg 格式 矢量图 保证图片质量的同时，减少资源大小</p><h3 id="setData"><a href="#setData" class="headerlink" title="setData"></a>setData</h3><p>减少 setData 的调用</p><p>setData 在这里主要做了两件事情：</p><ul><li><p>改变了逻辑层中这个目标属性的值</p></li><li><p>通过微信客户端发起通信，通知到渲染层</p></li></ul><p>在 setData 使用时 需要注意两件事情：</p><ul><li><p>不要把页面渲染无用的数据也放置在里面，夹带无用的内容是浪费资源的表现；</p></li><li><p>不要应用在一些过大数据中，几个大数据叠加在一起可能超过了一次通信的上限，导致失败</p></li></ul><h2 id="小程序的冷启动、热启动概念"><a href="#小程序的冷启动、热启动概念" class="headerlink" title="小程序的冷启动、热启动概念"></a>小程序的冷启动、热启动概念</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">具体查看</a></p><h2 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h2><h3 id="APP-整个小程序"><a href="#APP-整个小程序" class="headerlink" title="APP 整个小程序"></a>APP 整个小程序</h3><p>每个小程序都需要在 app.js 中调用 App 方法注册小程序实例</p><p>App 接受一个 Object 参数，其指定小程序的生命周期回调等</p><ul><li><p>onLaunch(Object object)<br>小程序初始化完成时触发，全局只触发一次</p></li><li><p>onShow(Object object)<br>小程序启动，或从后台进入前台显示时触发</p></li><li><p>onHide()<br>小程序从前台进入后台时触发</p></li></ul><h3 id="Page-小程序每个页面"><a href="#Page-小程序每个页面" class="headerlink" title="Page 小程序每个页面"></a>Page 小程序每个页面</h3><p>对于小程序中的每个页面，都需要在页面对应的 js 文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等</p><p>简单的页面可以使用 Page() 进行构造</p><ul><li><p>onLoad(Object query)<br>页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数</p></li><li><p>onShow()<br>页面显示&#x2F;切入前台时触发</p></li><li><p>onReady()<br>页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互</p></li><li><p>onHide()<br>页面隐藏&#x2F;切入后台时触发</p></li><li><p>onUnload()<br>页面卸载时触发</p></li></ul><h2 id="全局-App-对象"><a href="#全局-App-对象" class="headerlink" title="全局 App 对象"></a>全局 App 对象</h2><p>getAPP 函数用来获取到小程序全局唯一的 App 实例</p><p>可以用于页面传递参数</p><p>不要在定义于 App() 内的函数中，或调用 App 前调用 getApp() ，使用 this 就可以拿到 app 实例。</p><p><img src="/image/miniprogram.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;微信小程序的双线程模型&quot;&gt;&lt;a href=&quot;#微信小程序的双线程模型&quot; class=&quot;headerlink&quot; title=&quot;微信小程序的双线程模型&quot;&gt;&lt;/a&gt;微信小程序的双线程模型&lt;/h2&gt;&lt;p&gt;小程序的双线程指的就是渲染线程和逻辑线程，这两个线程分别承担UI的渲</summary>
      
    
    
    
    
    <category term="小程序" scheme="http://effort.fun/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    <category term="前端" scheme="http://effort.fun/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浏览器上的优化</title>
    <link href="http://effort.fun/post/chrome-performance.html"/>
    <id>http://effort.fun/post/chrome-performance.html</id>
    <published>2023-02-23T21:32:58.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>浏览器在渲染页面前需要先构建出 DOM 树 与 CSSOM 树</p><p>DOM 数据即文档对象模型，是由一个节点和对象组成的集合</p><p>CSSOM 树即层叠样式对象模型，里面是 CSS 的对象集合</p><p>想要选渲染出页面，就需要将 DOM 树 与 CSSOM 树结在一起，组个成渲染树</p><h3 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h3><p>HTML、CSS、JavaScript都是会对渲染产生阻塞的资源，HTML是必需的（没有DOM还谈何渲染），但可以从CSS与JavaScript着手优化，尽可能地减少阻塞的产生。</p><h4 id="优化-CSS"><a href="#优化-CSS" class="headerlink" title="优化 CSS"></a>优化 CSS</h4><p>如果可以让CSS资源只在特定条件下使用，这样这些资源就可以在首次加载时先不进行构建CSSOM树，只有在符合特定条件时，才会让浏览器进行阻塞渲染然后构建CSSOM树。<br>CSS的媒体查询正是用来实现这个功能的，它由媒体类型以及零个或多个检查特定媒体特征状况的表达式组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有使用媒体查询，这个css资源会阻塞渲染  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- all是默认类型，它和不设置媒体查询的效果是一样的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态媒体查询， 将在网页加载时计算。</span></span><br><span class="line"><span class="comment">根据网页加载时设备的方向，portrait.css 可能阻塞渲染，也可能不阻塞渲染。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;portrait.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;orientation:portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只在打印网页时应用，因此网页首次在浏览器中加载时，它不会阻塞渲染。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;print.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用媒体查询可以让CSS资源不在首次加载中阻塞渲染，但不管是哪种CSS资源它们的下载请求都不会被忽略，浏览器仍然会先下载CSS文件</p><h4 id="优化-JS"><a href="#优化-JS" class="headerlink" title="优化 JS"></a>优化 JS</h4><p>当浏览器的 HTML 解析器遇到一个 script 标签时候会暂停构建 DOM</p><p>chrome 引擎会开始执行 JavaScript 脚本，直到执行结束后，浏览器才会从之前中断的地方恢复，继续构建 DOM</p><p>使用async可以通知浏览器该脚本不需要在引用位置执行，这样浏览器就可以继续构建DOM，JavaScript脚本会在就绪后开始执行，这样将显著提升页面首次加载的性能（async只可以在src标签中使用也就是外部引用的JavaScript文件）</p><h2 id="使用浏览器-Performance-进行分析"><a href="#使用浏览器-Performance-进行分析" class="headerlink" title="使用浏览器 Performance 进行分析"></a>使用浏览器 Performance 进行分析</h2><p><a href="https://juejin.cn/post/6844904148085768200#heading-19">具体使用点击查看</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;浏览器渲染原理&quot;&gt;&lt;a href=&quot;#浏览器渲染原理&quot; class=&quot;headerlink&quot; title=&quot;浏览器渲染原理&quot;&gt;&lt;/a&gt;浏览器渲染原理&lt;/h2&gt;&lt;p&gt;浏览器在渲染页面前需要先构建出 DOM 树 与 CSSOM 树&lt;/p&gt;
&lt;p&gt;DOM 数据即文档对象</summary>
      
    
    
    
    
    <category term="chrome" scheme="http://effort.fun/tags/chrome/"/>
    
    <category term="performance" scheme="http://effort.fun/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://effort.fun/post/webpack.html"/>
    <id>http://effort.fun/post/webpack.html</id>
    <published>2023-02-23T20:55:35.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-性能优化"><a href="#webpack-性能优化" class="headerlink" title="webpack 性能优化"></a>webpack 性能优化</h2><p>webpack 的优化瓶颈，主要是两个方面</p><ul><li>webpack 的构建过程太长</li><li>webpack 打包的结果体积太大</li></ul><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>对于构建时间，可以采用 speed-measuer-webpack-plugin 插件进行分析</p><h4 id="多线程打包"><a href="#多线程打包" class="headerlink" title="多线程打包"></a>多线程打包</h4><p>可以使用 happypack 进行多线程打包，设置 js 或者 css 打包过程，使用 happypack 的 loader 进行打包</p><p>如果项目比较小不建议使用，反而会降低打包速度</p><p>happypack 的基本原理是将打包任务分配到多个子进程中去并行处理，子进程处理完成后会把结果发送到主进程中，从而减少构建时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="attr">use</span>: <span class="string">&#x27;Happypack/loader?id=js&#x27;</span>  <span class="comment">// 使用 happypack 的 loader 进行打包</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// css</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;css&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">preset</span>: [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用 tread-load webpack4 之后 官方推出的</p><p>thread-loader 会将您的 loader 放置在一个 worker 池里面运行，以达到多线程构建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      <span class="string">&quot;thread-loader&quot;</span>,</span><br><span class="line">      <span class="comment">// 你的高开销的loader放置在此 (e.g babel-loader)</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>并行压缩主要有三个方案：</p><ul><li>parallel-uglify-plugi</li><li>uglifyjs-webpack-plugin 开启 parallel 参数</li><li>terser-webpack-plugin 开启 parallel 参数 （推荐使用这个，支持 ES6 语法压缩）</li></ul><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>可以使用预编译将提前引入的三方库进新打包处理，而不是每次都进行打包。</p><p>DllPlugin 结合 DllRefrencePlugin 插件的运用，对将要产出的 bundle 文件进行拆解打包，可以很彻底地加快 webpack 的打包速度</p><p>DllPlugin：负责抽离第三方库，形成第三方动态库dll<br>DllReferencePlugin：负责引用第三方库</p><p><a href="https://www.cnblogs.com/master-yi/p/12592424.html">具体可点击查看</a></p><h3 id="打包体积"><a href="#打包体积" class="headerlink" title="打包体积"></a>打包体积</h3><ul><li><p>Tree-Shaking 删除冗余代码</p></li><li><p>压缩 HTML&#x2F;JS&#x2F;CSS</p><ul><li>HTML压缩： html-webpack-plugin —— 删除双引号和折叠为一行。</li><li>CSS<ul><li>压缩： mini-css-extract-plugin</li><li>去除无用的 css: purgecss-webpack-plugin</li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack-性能优化&quot;&gt;&lt;a href=&quot;#webpack-性能优化&quot; class=&quot;headerlink&quot; title=&quot;webpack 性能优化&quot;&gt;&lt;/a&gt;webpack 性能优化&lt;/h2&gt;&lt;p&gt;webpack 的优化瓶颈，主要是两个方面&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
    <category term="webpack" scheme="http://effort.fun/tags/webpack/"/>
    
    <category term="build tool" scheme="http://effort.fun/tags/build-tool/"/>
    
  </entry>
  
  <entry>
    <title>tcp</title>
    <link href="http://effort.fun/post/tcp.html"/>
    <id>http://effort.fun/post/tcp.html</id>
    <published>2023-02-11T13:03:13.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-可靠性"><a href="#TCP-可靠性" class="headerlink" title="TCP 可靠性"></a>TCP 可靠性</h2><ul><li>重传机制<ul><li>超时重传</li><li>快速重传</li><li>SACK</li><li>D-SACK</li></ul></li><li>滑动窗口<ul><li>发送窗口</li><li>接收窗口</li></ul></li><li>流量控制<ul><li>控制窗口大小</li></ul></li><li>拥塞控制<ul><li>慢启动</li><li>拥塞避免</li><li>拥塞发生</li><li>快恢复</li></ul></li></ul><h2 id="为什么TCP是三次握手-不是两次、四次"><a href="#为什么TCP是三次握手-不是两次、四次" class="headerlink" title="为什么TCP是三次握手?不是两次、四次?"></a>为什么TCP是三次握手?不是两次、四次?</h2><p>TCP 使用三次握手建立连接的最主要原因是<strong>防止历史连接初始化了连接</strong></p><ul><li><p>三次握手才可以阻止重复历史连接的初始化(主要原因)</p></li><li><p>三次握手才可以同步双方的初始序列号</p></li><li><p>三次握手才可以避免资源浪费</p></li><li><p>不使用「两次握手」和「四次握手」的原因:</p><ul><li>「两次握手」:无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列<br>号;</li><li>「四次握手」:三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul></li></ul><h2 id="为什么TCP挥手需要四次"><a href="#为什么TCP挥手需要四次" class="headerlink" title="为什么TCP挥手需要四次?"></a>为什么TCP挥手需要四次?</h2><ul><li>双方发 FIN 包</li><li>关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务器收到客户端的FIN报文时，先回一个ACK应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。</li></ul><p> 从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都 会分开发送，从而比三次握手导致多了一次</p><p> TIME_WAIT 需要确保 服务器 收到 最后一次 ACK 的响应</p><p> 在 Linux 系统里 2MSL 默认是 60 秒</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TCP-可靠性&quot;&gt;&lt;a href=&quot;#TCP-可靠性&quot; class=&quot;headerlink&quot; title=&quot;TCP 可靠性&quot;&gt;&lt;/a&gt;TCP 可靠性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;重传机制&lt;ul&gt;
&lt;li&gt;超时重传&lt;/li&gt;
&lt;li&gt;快速重传&lt;/li&gt;
&lt;li&gt;SAC</summary>
      
    
    
    
    
    <category term="tcp" scheme="http://effort.fun/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>浏览器回流和重绘</title>
    <link href="http://effort.fun/post/html-reflow-repaint.html"/>
    <id>http://effort.fun/post/html-reflow-repaint.html</id>
    <published>2023-02-11T12:57:16.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回流-Reflow"><a href="#回流-Reflow" class="headerlink" title="回流(Reflow)"></a>回流(Reflow)</h2><p>当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p>会导致回流的操作：</p><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除可见的DOM元素</li><li>激活CSS伪类（例如：:hover）</li><li>查询某些属性或调用某些方法</li></ul><p>一些常用且会导致回流的属性和方法：</p><ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>scrollIntoView()、scrollIntoViewIfNeeded()</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li><li>scrollTo()</li></ul><h2 id="重绘-Repaint"><a href="#重绘-Repaint" class="headerlink" title="重绘(Repaint)"></a>重绘(Repaint)</h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><h2 id="当输入网址后，到网页显示，其间发生了什么"><a href="#当输入网址后，到网页显示，其间发生了什么" class="headerlink" title="当输入网址后，到网页显示，其间发生了什么"></a>当输入网址后，到网页显示，其间发生了什么</h2><ul><li><p>浏览器解析 URL<br><a href="http://web服务器/%E6%96%87%E4%BB%B6">http://web服务器/目录/../文件</a></p><ul><li>http 访问数据的协议</li><li>&#x2F;&#x2F; 后面 服务器名称</li><li>资源路径</li></ul></li><li><p>对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，根据这些信息来生成 HTTP 请求消息了</p></li><li><p>通过 DNS 服务器获取 真实 IP 地址</p></li><li><p>通过 DNS 获取到 IP 后，就可以把 HTTP 的传输工作交给操作系统中的协议栈，应用程序(浏览器)通过调用 Socket 库</p></li><li><p>建立链接  TCP 三次握手</p></li><li><p>服务器 层层解析 把相应数据装在 HTTP 响应报 文里</p></li><li><p>客户端收到后 交给浏览器去渲染页面</p></li><li><p>最后，客户端要离开了，向服务器发起了 TCP 四次挥手，至此双方的连接就断开了</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;回流-Reflow&quot;&gt;&lt;a href=&quot;#回流-Reflow&quot; class=&quot;headerlink&quot; title=&quot;回流(Reflow)&quot;&gt;&lt;/a&gt;回流(Reflow)&lt;/h2&gt;&lt;p&gt;当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览</summary>
      
    
    
    
    
    <category term="html" scheme="http://effort.fun/tags/html/"/>
    
    <category term="回流" scheme="http://effort.fun/tags/%E5%9B%9E%E6%B5%81/"/>
    
    <category term="重绘" scheme="http://effort.fun/tags/%E9%87%8D%E7%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>宏队列，微队列</title>
    <link href="http://effort.fun/post/javascript-task-queue.html"/>
    <id>http://effort.fun/post/javascript-task-queue.html</id>
    <published>2023-02-11T12:53:51.000Z</published>
    <updated>2025-08-03T14:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="宏队列"><a href="#宏队列" class="headerlink" title="宏队列"></a>宏队列</h2><ul><li>dom事件回调</li><li>ajax请求回调</li><li>定时器回调</li><li>close时间</li><li>IO时间</li></ul><h2 id="微队列"><a href="#微队列" class="headerlink" title="微队列"></a>微队列</h2><ul><li>Promise 回调</li><li>proccess.nextTick</li><li>queueMicrotask</li><li>mutation 回调</li></ul><h2 id="任务执行顺序"><a href="#任务执行顺序" class="headerlink" title="任务执行顺序"></a>任务执行顺序</h2><p>同步任务 &gt; 微队列 &gt; 宏队列</p><ul><li>js 引擎首先必须执行所有的初始化同步任务代码</li><li>每次准备取出第一个<code>宏任务</code>执行前，都要将所有的<code>微任务</code>一个一个取出来执行</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;宏队列&quot;&gt;&lt;a href=&quot;#宏队列&quot; class=&quot;headerlink&quot; title=&quot;宏队列&quot;&gt;&lt;/a&gt;宏队列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;dom事件回调&lt;/li&gt;
&lt;li&gt;ajax请求回调&lt;/li&gt;
&lt;li&gt;定时器回调&lt;/li&gt;
&lt;li&gt;close时间&lt;/l</summary>
      
    
    
    
    
    <category term="js" scheme="http://effort.fun/tags/js/"/>
    
    <category term="宏任务" scheme="http://effort.fun/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="微任务" scheme="http://effort.fun/tags/%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
