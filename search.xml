<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>neovim-config</title>
      <link href="/post/neovim-config.html"/>
      <url>/post/neovim-config.html</url>
      
        <content type="html"><![CDATA[<p>(仓库)[<a href="https://github.com/patricorgi/dotfiles]">https://github.com/patricorgi/dotfiles]</a></p><h2 id="快捷键表格"><a href="#快捷键表格" class="headerlink" title="快捷键表格"></a>快捷键表格</h2><h3 id="核心编辑快捷键"><a href="#核心编辑快捷键" class="headerlink" title="核心编辑快捷键"></a>核心编辑快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>jk</code></td><td>退出插入模式</td><td>在插入模式下快速退出</td></tr><tr><td><code>j</code>&#x2F;<code>k</code></td><td>智能移动</td><td>无计数时按显示行移动，有计数时按实际行移动</td></tr><tr><td><code>&lt;Esc&gt;</code></td><td>清除搜索高亮</td><td>取消搜索结果高亮显示</td></tr><tr><td><code>\</code></td><td>水平分割窗口</td><td>创建水平分割</td></tr><tr><td><code>|</code></td><td>垂直分割窗口</td><td>创建垂直分割</td></tr><tr><td><code>L</code>&#x2F;<code>H</code></td><td>切换缓冲区</td><td>在最近使用的缓冲区间切换</td></tr><tr><td><code>+</code></td><td>最大化窗格</td><td>最大化当前 Neovim 窗格</td></tr><tr><td><code>=</code></td><td>恢复窗格</td><td>恢复所有窗格大小</td></tr></tbody></table><h3 id="文件查找和导航-Snacks"><a href="#文件查找和导航-Snacks" class="headerlink" title="文件查找和导航 (Snacks)"></a>文件查找和导航 (Snacks)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;ff</code></td><td>智能文件查找</td><td>上下文感知的文件查找器</td></tr><tr><td><code>&lt;leader&gt;fo</code></td><td>最近文件</td><td>查找最近打开的文件</td></tr><tr><td><code>&lt;leader&gt;fw</code></td><td>内容搜索</td><td>在文件中搜索内容</td></tr><tr><td><code>&lt;leader&gt;&lt;leader&gt;</code></td><td>缓冲区切换</td><td>在打开的缓冲区间切换</td></tr><tr><td><code>&lt;leader&gt;ls</code></td><td>符号查找</td><td>查找当前缓冲区中的符号</td></tr><tr><td><code>&lt;leader&gt;fd</code></td><td>诊断信息</td><td>查找 LSP 诊断信息</td></tr><tr><td><code>&lt;leader&gt;fc</code></td><td>配置文件</td><td>查找 Neovim 配置文件</td></tr><tr><td><code>&lt;leader&gt;fg</code></td><td>仓库选择</td><td>自定义仓库选择器</td></tr><tr><td><code>&lt;leader&gt;fh</code></td><td>帮助查找</td><td>在帮助文档中查找</td></tr><tr><td><code>&lt;leader&gt;fk</code></td><td>快捷键查找</td><td>查找已定义的快捷键</td></tr><tr><td><code>&lt;leader&gt;fm</code></td><td>标记查找</td><td>查找 Vim 标记</td></tr><tr><td><code>&lt;leader&gt;fn</code></td><td>通知查找</td><td>查找通知历史</td></tr><tr><td><code>&lt;leader&gt;fs</code></td><td>工作区符号</td><td>查找工作区中的符号</td></tr><tr><td><code>&lt;leader&gt;fi</code></td><td>图标查找</td><td>查找可用图标</td></tr><tr><td><code>&lt;leader&gt;fb</code></td><td>行内容查找</td><td>在当前缓冲区中查找行</td></tr><tr><td><code>&lt;leader&gt;fH</code></td><td>高亮查找</td><td>查找高亮组</td></tr><tr><td><code>&lt;leader&gt;f/</code></td><td>搜索历史</td><td>查找搜索历史</td></tr><tr><td><code>&lt;leader&gt;fj</code></td><td>跳转列表</td><td>查找跳转历史</td></tr><tr><td><code>&lt;leader&gt;ft</code></td><td>TODO 查找</td><td>查找 TODO 注释或 Markdown 任务</td></tr><tr><td><code>&lt;leader&gt;bc</code></td><td>删除缓冲区</td><td>删除当前缓冲区</td></tr><tr><td><code>&lt;leader&gt;bC</code></td><td>删除其他缓冲区</td><td>删除除当前外的所有缓冲区</td></tr><tr><td><code>&lt;leader&gt;n</code></td><td>通知历史</td><td>显示通知历史记录</td></tr></tbody></table><h3 id="LSP-相关快捷键"><a href="#LSP-相关快捷键" class="headerlink" title="LSP 相关快捷键"></a>LSP 相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>gd</code></td><td>跳转定义</td><td>使用 Snacks picker 跳转到定义</td></tr><tr><td><code>gD</code></td><td>分割跳转定义</td><td>在新分割窗口中跳转到定义</td></tr><tr><td><code>gr</code></td><td>查找引用</td><td>查找符号的所有引用</td></tr><tr><td><code>&lt;leader&gt;la</code></td><td>代码操作</td><td>显示可用的代码操作</td></tr><tr><td><code>&lt;leader&gt;rn</code></td><td>重命名符号</td><td>重命名当前符号</td></tr><tr><td><code>&lt;leader&gt;ld</code></td><td>显示诊断</td><td>显示当前行的诊断信息</td></tr><tr><td><code>&lt;leader&gt;td</code></td><td>切换诊断</td><td>开关诊断信息显示</td></tr><tr><td><code>&lt;leader&gt;th</code></td><td>切换内联提示</td><td>开关 LSP 内联提示</td></tr></tbody></table><h3 id="Git-操作快捷键"><a href="#Git-操作快捷键" class="headerlink" title="Git 操作快捷键"></a>Git 操作快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>]c</code>&#x2F;<code>[c</code></td><td>Git 块导航</td><td>跳转到下一个&#x2F;上一个 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gs</code></td><td>暂存块</td><td>暂存当前 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gr</code></td><td>重置块</td><td>重置当前 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gp</code></td><td>预览块</td><td>预览 Git 更改块</td></tr><tr><td><code>&lt;leader&gt;gd</code></td><td>Git 差异</td><td>显示与索引的差异</td></tr><tr><td><code>&lt;leader&gt;gb</code></td><td>Git blame</td><td>显示当前行的 Git blame 信息</td></tr><tr><td><code>&lt;leader&gt;gg</code></td><td>打开 Lazygit</td><td>在当前仓库根目录打开 Lazygit</td></tr><tr><td><code>&lt;leader&gt;gS</code></td><td>暂存整个缓冲区</td><td>暂存当前文件的所有更改</td></tr><tr><td><code>&lt;leader&gt;gR</code></td><td>重置整个缓冲区</td><td>重置当前文件的所有更改</td></tr><tr><td><code>&lt;leader&gt;gD</code></td><td>与上次提交对比</td><td>显示与最后一次提交的差异</td></tr><tr><td><code>&lt;leader&gt;tb</code></td><td>切换 blame 显示</td><td>开关当前行的 Git blame 信息</td></tr><tr><td><code>&lt;leader&gt;tD</code></td><td>切换删除预览</td><td>开关删除内容的内联预览</td></tr><tr><td><code>&lt;leader&gt;tg</code></td><td>切换 Git 标记</td><td>开关 Git 状态标记显示</td></tr></tbody></table><h3 id="调试相关快捷键"><a href="#调试相关快捷键" class="headerlink" title="调试相关快捷键"></a>调试相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;du</code></td><td>切换调试 UI</td><td>开关调试界面</td></tr><tr><td><code>&lt;F1&gt;</code></td><td>切换调试 UI</td><td>同上，功能键版本</td></tr><tr><td><code>&lt;leader&gt;ds</code></td><td>开始&#x2F;继续调试</td><td>启动或继续调试会话</td></tr></tbody></table><h3 id="任务管理快捷键-Overseer"><a href="#任务管理快捷键-Overseer" class="headerlink" title="任务管理快捷键 (Overseer)"></a>任务管理快捷键 (Overseer)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;rr</code></td><td>运行模板</td><td>运行 Overseer 任务模板</td></tr><tr><td><code>&lt;leader&gt;rt</code></td><td>切换任务列表</td><td>开关任务列表显示</td></tr><tr><td><code>&lt;leader&gt;ra</code></td><td>快速操作</td><td>显示快速操作列表</td></tr></tbody></table><h3 id="多光标操作快捷键"><a href="#多光标操作快捷键" class="headerlink" title="多光标操作快捷键"></a>多光标操作快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>添加光标</td><td>匹配并添加新光标</td></tr><tr><td><code>&lt;leader&gt;s</code></td><td>跳过光标</td><td>跳过当前匹配</td></tr><tr><td><code>&lt;leader&gt;A</code></td><td>添加所有匹配</td><td>为所有匹配项添加光标</td></tr><tr><td><code>&lt;C-q&gt;</code></td><td>切换光标</td><td>在当前位置添加&#x2F;移除光标</td></tr></tbody></table><h2 id="主要插件功能"><a href="#主要插件功能" class="headerlink" title="主要插件功能"></a>主要插件功能</h2><h3 id="核心插件"><a href="#核心插件" class="headerlink" title="核心插件"></a>核心插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>snacks.nvim</strong></td><td>多功能工具集</td><td>文件查找、缓冲区管理、通知系统、仪表板</td></tr><tr><td><strong>blink.cmp</strong></td><td>补全引擎</td><td>提供智能代码补全和文档显示</td></tr><tr><td><strong>gitsigns.nvim</strong></td><td>Git 集成</td><td>Git 状态显示、块操作、blame 信息</td></tr><tr><td><strong>flash.nvim</strong></td><td>快速跳转</td><td>使用 <code>ss</code> 进行快速文本跳转</td></tr><tr><td><strong>multicursor.nvim</strong></td><td>多光标编辑</td><td>支持多光标同时编辑</td></tr></tbody></table><h3 id="开发工具插件"><a href="#开发工具插件" class="headerlink" title="开发工具插件"></a>开发工具插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>nvim-dap</strong></td><td>调试适配器</td><td>提供调试功能支持</td></tr><tr><td><strong>overseer.nvim</strong></td><td>任务运行器</td><td>管理和运行各种开发任务</td></tr><tr><td><strong>oil.nvim</strong></td><td>文件管理器</td><td>类似缓冲区的文件浏览器</td></tr><tr><td><strong>mini.nvim</strong></td><td>轻量工具集</td><td>包含文件操作、图标、环绕编辑等功能</td></tr></tbody></table><h3 id="UI-和主题插件"><a href="#UI-和主题插件" class="headerlink" title="UI 和主题插件"></a>UI 和主题插件</h3><table><thead><tr><th>插件</th><th>功能</th><th>用途</th></tr></thead><tbody><tr><td><strong>catppuccin</strong></td><td>主题配色</td><td>提供 Mocha 配色方案，支持透明背景</td></tr><tr><td><strong>ultimate-autopair</strong></td><td>自动配对</td><td>智能括号、引号配对，支持多种文件类型</td></tr><tr><td><strong>render-markdown</strong></td><td>Markdown 渲染</td><td>增强 Markdown 文件的显示效果</td></tr></tbody></table><h3 id="调试相关快捷键-1"><a href="#调试相关快捷键-1" class="headerlink" title="调试相关快捷键"></a>调试相关快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;du</code></td><td>切换调试 UI</td><td>开关调试界面</td></tr><tr><td><code>&lt;F1&gt;</code></td><td>切换调试 UI</td><td>同上，功能键版本</td></tr><tr><td><code>&lt;leader&gt;ds</code></td><td>开始&#x2F;继续调试</td><td>启动或继续调试会话</td></tr></tbody></table><h3 id="任务管理快捷键-Overseer-1"><a href="#任务管理快捷键-Overseer-1" class="headerlink" title="任务管理快捷键 (Overseer)"></a>任务管理快捷键 (Overseer)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;rr</code></td><td>运行模板</td><td>运行 Overseer 任务模板</td></tr><tr><td><code>&lt;leader&gt;rt</code></td><td>切换任务列表</td><td>开关任务列表显示</td></tr><tr><td><code>&lt;leader&gt;ra</code></td><td>快速操作</td><td>显示快速操作列表</td></tr></tbody></table><h3 id="快速跳转快捷键-Flash"><a href="#快速跳转快捷键-Flash" class="headerlink" title="快速跳转快捷键 (Flash)"></a>快速跳转快捷键 (Flash)</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>ss</code></td><td>Flash 跳转</td><td>快速跳转到指定位置</td></tr><tr><td><code>SS</code></td><td>Treesitter 搜索</td><td>基于语法树的搜索跳转</td></tr></tbody></table><h3 id="缓冲区管理快捷键"><a href="#缓冲区管理快捷键" class="headerlink" title="缓冲区管理快捷键"></a>缓冲区管理快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;bc</code></td><td>删除缓冲区</td><td>删除当前缓冲区</td></tr><tr><td><code>&lt;leader&gt;bC</code></td><td>删除其他缓冲区</td><td>删除除当前外的所有缓冲区</td></tr><tr><td><code>&lt;leader&gt;n</code></td><td>通知历史</td><td>显示通知历史记录</td></tr></tbody></table><h3 id="补全系统快捷键"><a href="#补全系统快捷键" class="headerlink" title="补全系统快捷键"></a>补全系统快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-u&gt;</code></td><td>文档向上滚动</td><td>在补全文档中向上滚动</td></tr><tr><td><code>&lt;C-d&gt;</code></td><td>文档向下滚动</td><td>在补全文档中向下滚动</td></tr></tbody></table><h3 id="特殊功能快捷键"><a href="#特殊功能快捷键" class="headerlink" title="特殊功能快捷键"></a>特殊功能快捷键</h3><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;tz</code></td><td>无干扰模式</td><td>连续切换多个显示选项</td></tr><tr><td><code>&lt;space&gt;X</code></td><td>执行 Lua 文件</td><td>运行当前 Lua 文件</td></tr><tr><td><code>&lt;space&gt;x</code></td><td>执行当前行</td><td>运行当前行的 Lua 代码</td></tr><tr><td><code>&lt;CR&gt;</code></td><td>切换折叠</td><td>在折叠行上切换折叠状态</td></tr></tbody></table><h2 id="Oil-nvim-配置概述"><a href="#Oil-nvim-配置概述" class="headerlink" title="Oil.nvim 配置概述"></a>Oil.nvim 配置概述</h2><p>Oil.nvim 是一个文件管理器插件，它将文件浏览器作为一个可编辑的缓冲区来使用。 <a href="#8-0">1</a></p><h2 id="主要配置内容"><a href="#主要配置内容" class="headerlink" title="主要配置内容"></a>主要配置内容</h2><h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><ul><li><code>default_file_explorer = true</code> - 将 Oil 设置为默认文件浏览器，替代 netrw <a href="#8-1">2</a></li></ul><h3 id="自定义快捷键映射"><a href="#自定义快捷键映射" class="headerlink" title="自定义快捷键映射"></a>自定义快捷键映射</h3><p>Oil 重新定义了许多快捷键以提供更直观的文件操作体验：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-r&gt;</code></td><td>刷新</td><td>刷新当前目录内容</td></tr><tr><td><code>&lt;leader&gt;y</code></td><td>复制路径</td><td>复制当前文件&#x2F;目录路径</td></tr><tr><td><code>zh</code></td><td>切换隐藏文件</td><td>显示&#x2F;隐藏以点开头的文件</td></tr><tr><td><code>\</code></td><td>水平分割打开</td><td>在水平分割窗口中打开文件</td></tr><tr><td><code>|</code></td><td>垂直分割打开</td><td>在垂直分割窗口中打开文件</td></tr><tr><td><code>-</code></td><td>关闭 Oil</td><td>关闭文件浏览器</td></tr><tr><td><code>&lt;leader&gt;e</code></td><td>关闭 Oil</td><td>另一个关闭快捷键</td></tr><tr><td><code>&lt;BS&gt;</code></td><td>返回上级目录</td><td>导航到父目录</td></tr></tbody></table><h3 id="详细视图切换功能"><a href="#详细视图切换功能" class="headerlink" title="详细视图切换功能"></a>详细视图切换功能</h3><p>Oil 包含一个智能的详细视图切换功能，通过 <code>gd</code> 快捷键控制： <a href="#8-3">4</a></p><ul><li><strong>简单视图</strong>：只显示文件图标</li><li><strong>详细视图</strong>：显示图标、权限、大小和修改时间</li></ul><h3 id="窗口栏配置"><a href="#窗口栏配置" class="headerlink" title="窗口栏配置"></a>窗口栏配置</h3><p>Oil 配置了自定义的窗口栏显示当前目录路径： <a href="#8-4">5</a></p><p>这个函数会显示当前目录的相对路径（相对于家目录），如果无法获取目录则显示缓冲区名称。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><ol><li><p><strong>打开 Oil</strong>：由于设置为默认文件浏览器，您可以使用 <code>:e .</code> 或 <code>:Oil</code> 命令打开当前目录</p></li><li><p><strong>导航</strong>：</p><ul><li>使用 <code>j/k</code> 上下移动</li><li>按 <code>&lt;CR&gt;</code> 进入目录或打开文件</li><li>使用 <code>&lt;BS&gt;</code> 返回上级目录</li></ul></li><li><p><strong>文件操作</strong>：</p><ul><li>Oil 将目录内容显示为可编辑的缓冲区</li><li>您可以直接编辑文件名来重命名</li><li>删除行来删除文件</li><li>添加新行来创建新文件</li></ul></li><li><p><strong>视图切换</strong>：</p><ul><li>按 <code>gd</code> 在简单视图和详细视图间切换</li><li>按 <code>zh</code> 显示&#x2F;隐藏隐藏文件</li></ul></li></ol><h2 id="lua-custom-plugins-目录下插件的自定义快捷键"><a href="#lua-custom-plugins-目录下插件的自定义快捷键" class="headerlink" title="lua&#x2F;custom&#x2F;plugins 目录下插件的自定义快捷键"></a>lua&#x2F;custom&#x2F;plugins 目录下插件的自定义快捷键</h2><h3 id="Mini-nvim-插件快捷键-mini-lua"><a href="#Mini-nvim-插件快捷键-mini-lua" class="headerlink" title="Mini.nvim 插件快捷键 (mini.lua)"></a>Mini.nvim 插件快捷键 (mini.lua)</h3><p>Mini.nvim 提供了环绕编辑功能的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>sa</code></td><td>添加环绕</td><td>在普通和可视模式下添加环绕字符</td></tr><tr><td><code>sd</code></td><td>删除环绕</td><td>删除环绕字符</td></tr><tr><td><code>sf</code></td><td>查找环绕（右）</td><td>向右查找环绕字符</td></tr><tr><td><code>sF</code></td><td>查找环绕（左）</td><td>向左查找环绕字符</td></tr><tr><td><code>sh</code></td><td>高亮环绕</td><td>高亮显示环绕字符</td></tr><tr><td><code>sr</code></td><td>替换环绕</td><td>替换环绕字符</td></tr><tr><td><code>sn</code></td><td>更新行数</td><td>更新 <code>n_lines</code> 设置</td></tr></tbody></table><h3 id="Multicursor-nvim-插件快捷键-multicursor-lua"><a href="#Multicursor-nvim-插件快捷键-multicursor-lua" class="headerlink" title="Multicursor.nvim 插件快捷键 (multicursor.lua)"></a>Multicursor.nvim 插件快捷键 (multicursor.lua)</h3><p>多光标编辑插件提供了丰富的光标操作快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>添加匹配光标</td><td>匹配当前词并添加光标</td></tr><tr><td><code>&lt;leader&gt;s</code></td><td>跳过匹配</td><td>跳过当前匹配项</td></tr><tr><td><code>&lt;leader&gt;N</code></td><td>向上添加光标</td><td>向上方向添加匹配光标</td></tr><tr><td><code>&lt;leader&gt;S</code></td><td>向上跳过</td><td>向上方向跳过匹配</td></tr><tr><td><code>&lt;leader&gt;A</code></td><td>添加所有匹配</td><td>为文档中所有匹配项添加光标</td></tr><tr><td><code>&lt;left&gt;</code>&#x2F;<code>&lt;right&gt;</code></td><td>光标导航</td><td>在多个光标间切换</td></tr><tr><td><code>&lt;c-leftmouse&gt;</code></td><td>鼠标添加光标</td><td>用 Ctrl+左键添加&#x2F;移除光标</td></tr><tr><td><code>&lt;c-q&gt;</code></td><td>切换光标</td><td>在当前位置添加&#x2F;移除光标</td></tr><tr><td><code>&lt;leader&gt;gv</code></td><td>恢复光标</td><td>恢复意外清除的光标</td></tr><tr><td><code>&lt;c-i&gt;</code>&#x2F;<code>&lt;c-o&gt;</code></td><td>跳转列表</td><td>在跳转历史中前进&#x2F;后退</td></tr></tbody></table><h3 id="Ultimate-autopair-插件快捷键-autopairs-lua"><a href="#Ultimate-autopair-插件快捷键-autopairs-lua" class="headerlink" title="Ultimate-autopair 插件快捷键 (autopairs.lua)"></a>Ultimate-autopair 插件快捷键 (autopairs.lua)</h3><p>自动配对插件的快捷键：</p><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;C-q&gt;</code></td><td>Tab 跳出</td><td>跳出当前配对字符</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> nvim config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftDate</title>
      <link href="/post/SwiftDate.html"/>
      <url>/post/SwiftDate.html</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftDate-使用"><a href="#SwiftDate-使用" class="headerlink" title="SwiftDate 使用"></a>SwiftDate 使用</h1><p>Apple 中的<strong>Date</strong>完全独立于任何特定的地理位置，日历或区域设置，一个普通的<strong>Date</strong>对象只表示一个绝对值：实际上，它计算自 2001 年 1 月 1 日以来经过的秒数。</p><p>在开发过程中，通常需要在更具体的上下文中表示日期：世界上的特定位置，使用指定<code>Local</code>的规则输出他们</p><p>为了实现它，swiftDate 需要引入几个其他对象：<code>Calendar</code>, <code>TimeZone</code>, <code>Locale</code></p><h2 id="Region-DateInRegion"><a href="#Region-DateInRegion" class="headerlink" title="Region &amp; DateInRegion"></a>Region &amp; DateInRegion</h2><p>为了简化特定上下文中的日期管理，SwiftDate 引入了两个简单的结构：</p><ul><li>Region 是一个结构体，它定义了世界上的区域 （TimeZone）、语言 （Locale） 和参考日历 （Calendar）。</li><li>DateInRegion 表示特定区域中的绝对日期。使用此对象时，所有组件都将在创建对象的区域的上下文中进行评估。在 DateInRegion 中，您将具有 absoluteDate 和 region 属性。</li></ul><h3 id="The-Default-Region"><a href="#The-Default-Region" class="headerlink" title="The Default Region"></a>The Default Region</h3><p>在 SwiftDate 中，您可以同时使用 DateInRegion 和 Date 实例。当您需要提取时间单位、比较日期或评估特定操作时，即使是普通的 Date 对象也会使用 Region。</p><p>但是，一个 Default Region 的特殊区域，默认情况下，它具有以下属性：</p><ul><li><p>时区 &#x3D; GMT - 这允许与默认的日期管理保持一致，除非您更改它。</p></li><li><p>日历 &#x3D; 当前设备日历（自动更新）</p></li><li><p>Locale &#x3D; 当前设备的区域设置（自动更新）</p></li></ul><p>虽然始终使用 DateInRegion 是一个不错的选择，但您也可以通过更改默认区域来使用 Date，如下所示：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rome <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.italian)</span><br><span class="line"><span class="type">SwiftDate</span>.defaultRegion <span class="operator">=</span> rome</span><br></pre></td></tr></table></figure><p>从现在开始，所有 Date 实例都使用 rome 作为默认区域来解析和评估日期组件：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateInRome <span class="operator">=</span> <span class="string">&quot;2018-01-01 00:00:00&quot;</span>.toDate()<span class="operator">!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Current year is <span class="subst">\(dateInRome.year)</span> and hour is <span class="subst">\(dateInRome.hour)</span>&quot;</span>) <span class="comment">// &quot;Current year is 2018 and hour is 0\n&quot;</span></span><br></pre></td></tr></table></figure><p>我们仍然可以使用 convertTo（region：） 函数将此日期转换为以 UTC 为单位的默认绝对表示形式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateInUTC <span class="operator">=</span> dateInRome.convertTo(region: <span class="type">Region</span>.<span class="type">UTC</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Current year is <span class="subst">\(dateInUTC.year)</span> and hour is <span class="subst">\(dateInUTC.hour)</span>&quot;</span>) <span class="comment">// &quot;Current year is 2017 and hour is 23\n&quot;</span></span><br></pre></td></tr></table></figure><p>设置默认区域时要小心。我们仍然建议使用 DateInRegion 实例，这样您就可以显式读取区域。</p><h3 id="Create-Region"><a href="#Create-Region" class="headerlink" title="Create Region"></a>Create Region</h3><p>现在，您可以创建新的 DateInRegion。创建新日期的方法有很多种：解析字符串、设置时间组件、从另一个日期或给定的时间间隔派生它。</p><p>每个初始化方法都需要一个 region 参数，该参数定义表示日期的区域（默认值可能因 init 而异，如下所示）。</p><h4 id="From-String"><a href="#From-String" class="headerlink" title="From String"></a>From String</h4><p>最常见的情况是解析字符串并将其转换为日期。如您所知，DateFormatter 的创建成本很高，如果您需要解析多个字符串，则应避免在循环中创建新实例。别担心：使用 SwiftDate，该库通过重用自己的解析器（沿调用方线程共享）来帮助您。</p><p><code>DateInRegion 的 init(_：format：region)</code>可用于从字符串初始化新日期（在 String extensions 的 toXXX 前缀下可以使用各种快捷方式）。</p><p>此对象采用三个参数：</p><ul><li>要解析的字符串 （String）</li><li>字符串的格式 （String）：这表示表示字符串的格式。它是 unicode 格式（请参阅字段表）。如果跳过此参数，SwiftDate 将尝试使用 SwiftDate.autoFormats 数组中定义的内置格式之一来解析日期。如果您知道日期的格式，则应明确设置它以获得更好的性能。</li><li>表示日期的区域 （Region）。默认情况下设置为 SwiftDate.defaultRegion。<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date1 <span class="operator">=</span> <span class="type">DateInRegion</span>(<span class="string">&quot;2016-01-05&quot;</span>, format: <span class="string">&quot;yyyy-MM-dd&quot;</span>, region: regionNY)</span><br><span class="line"><span class="keyword">let</span> date2 <span class="operator">=</span> <span class="type">DateInRegion</span>(<span class="string">&quot;2015-09-24T13:20:55&quot;</span>, region: regionNY)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Parse-Custom-Format"><a href="#Parse-Custom-Format" class="headerlink" title="Parse Custom Format"></a>Parse Custom Format</h2><p>将输入字符串转换为有效日期的最简单方法是使用可用作 String 实例扩展的 .toDate（） 函数之一。这些方法的目的是获得可以表示输入字符串的最佳格式，并使用它来生成有效的 DateInRegion。</p><p>与 moment.js 等其他库一样，SwiftDate 有一个内置格式列表，它可以用来获得有效的结果。您可以通过调用 SwiftDate.autoFormats 来获取这些格式的列表。此数组的顺序很重要，因为 SwiftDate 会循环访问此列表，直到返回有效日期 （顺序本身允许库减少误报列表） 。</p><p>您可以通过添加&#x2F;删除或替换此数组的内容来更改此列表。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.toDate(<span class="keyword">_</span> format: <span class="type">String</span>?, region: <span class="type">Region</span>?)</span><br><span class="line">.toDate(<span class="keyword">_</span> formats: [<span class="type">String</span>]<span class="operator">?</span>, region: <span class="type">Region</span>?)</span><br></pre></td></tr></table></figure><p>functions takes as input two arguments:<br>functions 将两个参数作为输入：</p><ul><li>format （String|Array）：它是可选的，允许您显式设置 SwiftDate 必须用于解析日期的格式（或格式的有序列表）。允许的值列在 Unicode DateTime Table 中，您可以在此处找到。如果省略，则 SwiftDates 尝试解析遍历 SwiftDate.autoFormats 中列出的 auto 模式列表的字符串。</li><li>region （Region）：描述表示日期的区域 （locale&#x2F;calendar&#x2F;timezone）。如果省略，则使用 iinstead 的默认区域 （SwiftDate.defaultRegion）。<br>这些函数的结果是一个可选的 DateInRegion 实例（如果解析失败，则返回 nil）。</li></ul><p>Some examples: 一些例子：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;2018-01-01 15:00&quot;</span>.toDate()</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;15:40:50&quot;</span>.toDate(<span class="string">&quot;HH:mm:ss&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> <span class="string">&quot;2015-01-01 at 14&quot;</span>.toDate(<span class="string">&quot;yyyy-MM-dd &#x27;at&#x27; HH&quot;</span>, region: rome)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support for locale</span></span><br><span class="line"><span class="keyword">let</span> itRegion <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.italian)</span><br><span class="line"><span class="keyword">let</span> enRegion <span class="operator">=</span> <span class="type">Region</span>(calendar: <span class="type">Calendars</span>.gregorian, zone: <span class="type">Zones</span>.europeRome, locale: <span class="type">Locales</span>.english)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> srcString <span class="operator">=</span> <span class="string">&quot;July 15 - 15:30&quot;</span></span><br><span class="line"><span class="comment">// it returns nil because itRegion has Locales.italian</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> srcString.toDate([<span class="string">&quot;yyyy-MM-dd&quot;</span>,<span class="string">&quot;MMM dd &#x27;-&#x27; HH:mm&quot;</span>], region: itRegion)</span><br><span class="line"><span class="comment">// it&#x27;s okay because enRegion has locale set to english</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> srcString.toDate([<span class="string">&quot;yyyy-MM-dd&quot;</span>,<span class="string">&quot;MMM dd &#x27;-&#x27; HH:mm&quot;</span>], region: enRegion)</span><br></pre></td></tr></table></figure><blockquote><p>性能为了保持性能，如果您知道 input 格式，则应传递 format 参数。<br>LOCALE 参数如果您使用可读的单位名称（例如表示月份的 MMM），请确保在 region 参数中选择正确的区域设置，以获得有效的结果。</p></blockquote><h2 id="Date-Formatting"><a href="#Date-Formatting" class="headerlink" title="Date Formatting"></a>Date Formatting</h2><p>日期格式设置非常简单，您可以指定自己的格式、区域设置或使用提供的任何格式、区域设置。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date Formatting</span></span><br><span class="line"><span class="keyword">let</span> london <span class="operator">=</span> <span class="type">Region</span>(calendar: .gregorian, zone: .europeLondon, locale: .english)</span><br><span class="line"><span class="keyword">let</span> date <span class="operator">=</span> <span class="operator">...</span> <span class="comment">// 2017-07-22T18:27:02+02:00 in london region</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toDotNET() <span class="comment">// /Date(1500740822000+0200)/</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toISODate() <span class="comment">// 2017-07-22T18:27:02+02:00</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toFormat(<span class="string">&quot;dd MMM yyyy &#x27;at&#x27; HH:mm&quot;</span>) <span class="comment">// &quot;22 July 2017 at 18:27&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can also easily change locale when formatting a region</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> date.toFormat(<span class="string">&quot;dd MMM&quot;</span>, locale: .italian) <span class="comment">// &quot;22 Luglio&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Interval Formatting as Countdown</span></span><br><span class="line"><span class="keyword">let</span> interval: <span class="type">TimeInterval</span> <span class="operator">=</span> (<span class="number">2</span>.hours.timeInterval) <span class="operator">+</span> (<span class="number">34</span>.minutes.timeInterval) <span class="operator">+</span> (<span class="number">5</span>.seconds.timeInterval)</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> interval.toClock() <span class="comment">// &quot;2:34:05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Time Interval Formatting by Components</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> interval.toString &#123;</span><br><span class="line"><span class="variable">$0</span>.maximumUnitCount <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="variable">$0</span>.allowedUnits <span class="operator">=</span> [.day, .hour, .minute]</span><br><span class="line"><span class="variable">$0</span>.collapsesLargestUnit <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="variable">$0</span>.unitsStyle <span class="operator">=</span> .abbreviated</span><br><span class="line">&#125; <span class="comment">// &quot;2h 34m&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> swift </tag>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>storekit</title>
      <link href="/post/storekit.html"/>
      <url>/post/storekit.html</url>
      
        <content type="html"><![CDATA[<h4 id="客户端注意事项"><a href="#客户端注意事项" class="headerlink" title="客户端注意事项"></a>客户端注意事项</h4><p>每次启动都需要校验数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> appStoreReceiptURL <span class="operator">=</span> <span class="type">Bundle</span>.main.appStoreReceiptURL,</span><br><span class="line">    <span class="type">FileManager</span>.default.fileExists(atPath: appStoreReceiptURL.path) &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> receiptData <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: appStoreReceiptURL, options: .alwaysMapped)</span><br><span class="line">        <span class="keyword">let</span> receiptString <span class="operator">=</span> receiptData.base64EncodeString(options: [])</span><br><span class="line">        <span class="comment">// 1. update the receiptString to server</span></span><br><span class="line">        <span class="comment">// 2. server should checkout to apple server call http method verifReceipt</span></span><br><span class="line">        <span class="comment">// 3. update subscribed status</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;some error in there: <span class="subst">\(error)</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="服务端注意事项"><a href="#服务端注意事项" class="headerlink" title="服务端注意事项"></a>服务端注意事项</h4><p>Server-to-Server Notifications</p><p><strong>original_transaction_id 是订阅的唯一标识符</strong></p><ul><li><p>当服务端收到苹果通知后，需要向苹果服务器响应200状态码，如果没有返回200 苹果最多重试3次</p></li><li><p>使用的 originalTransactionId 和 user 做的关联 添加 lastReceiptData 数据</p></li></ul><h4 id="视频链接"><a href="#视频链接" class="headerlink" title="视频链接"></a>视频链接</h4><p><a href="https://developer.apple.com/videos/play/wwdc2022/110404/">实施主动应用内购买恢复</a><br><a href="https://developer.apple.com/videos/play/wwdc2020/10671">为订阅构建架构</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/302">App 内购买和使用服务器到服务器通知</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/305">订阅优惠最佳实践</a><br><a href="https://devstreaming-cdn.apple.com/videos/wwdc/2018/705u9699a9lzqsghf2c/705/705_hd_engineering_subscriptions.mp4?dl=1">工程订阅</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/305">订阅优惠最佳实践</a></p><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p><a href="https://developer.apple.com/documentation/storekit/in-app_purchase/implementing_a_store_in_your_app_using_the_storekit_api">使用 StoreKit API 在 App 中实现商店</a><br><a href="https://wwdcnotes.com/documentation/wwdcnotes/wwdc18-705-engineering-subscriptions">工程订阅</a><br><a href="https://nonstrict.eu/wwdcindex/wwdc2018/705/">工程订阅pdf</a><br><a href="https://nilotic.github.io/2018/09/16/Engineering-Subscriptions.html">Engineering-Subscriptions</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> apple </tag>
            
            <tag> storkit </tag>
            
            <tag> subscribe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxSwif中的self引用问题.md</title>
      <link href="/post/2024-09-21-RxSwift-md.html"/>
      <url>/post/2024-09-21-RxSwift-md.html</url>
      
        <content type="html"><![CDATA[<h2 id="处理-closure-中的-self"><a href="#处理-closure-中的-self" class="headerlink" title="处理 closure 中的 self"></a>处理 closure 中的 self</h2><p>首先，如果 App 的 View Controller 会常驻在内存里，我们就根本无需担心这个问题，直接在 closure 中使用 self 就好，不用指定 unowned 或 weak。因为 Observables 的回收，是通过 DisposeBag 完成的，如果 View Controller 常驻在内存里，Observables 始终都不会回收，即便真的存在引用循环，也不会带来任何问题。</p><p>其次，在 Closure 和 View Controller 生命周期同步的时候，使用 unowned 捕获 self。也就是说 closure 代码执行完了，View Controller 也结束了。我们假设某个 UI 上有一个上传配置的按钮，点击同步完成后，自动退出这个界面。这种情况，按钮的事件处理 closure 中，我们就可以使用[unowned self]，因为我们可以确信，当这段 closure 执行的时候，self 不可能是 nil；</p><p>最后，不属于之前两种情况的，都使用[weak self]；</p><p>这样，我们就从另外一个角度，理解了捕获 self 问题。遵从这些原则，就可以有效地避免 RxSwift 相关的代码引起的内存泄漏或者意外崩溃问题。而解决了这个问题，我们才可以更安心地在项目中应用 RxSwift。</p><p><a href="https://boxueio.com/series/rxswift-101/episodes/243">理解重复订阅 Observable 的行为</a></p><p><a href="https://boxueio.com/series/rxswift-101/episode-documents/223">循环引用问题注意</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RxSwift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运维</title>
      <link href="/post/ops.html"/>
      <url>/post/ops.html</url>
      
        <content type="html"><![CDATA[<h4 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 卸载之前安装的组件</span></span><br><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装 docker 依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 切换镜像</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 安装docker</span></span><br><span class="line">yum install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 启动服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>learning-expo</title>
      <link href="/post/learning-expo.html"/>
      <url>/post/learning-expo.html</url>
      
        <content type="html"><![CDATA[<h2 id="学习-Expo-开发"><a href="#学习-Expo-开发" class="headerlink" title="学习 Expo 开发"></a>学习 Expo 开发</h2><h4 id="使用-Expo-开发"><a href="#使用-Expo-开发" class="headerlink" title="使用 Expo 开发"></a>使用 Expo 开发</h4><p>项目根目录下没有 ios 和 android 文件夹</p><ul><li>不支持需要原生配置的第三方库（不在 Expo SDK 内的）</li><li>不支持集成原生代码</li></ul><p><strong><a href="https://github.com/expo/expo/issues/28898">router路由问题</a></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npx create-expo-app@latest --template</span><br><span class="line"></span><br><span class="line"><span class="comment">## 要在网络上运行该项目，我们需要安装以下依赖，这将有助于在网络上运行该项目：</span></span><br><span class="line">npx expo install react-dom react-native-web @expo/metro-runtime</span><br></pre></td></tr></table></figure><h4 id="使用-development-builds"><a href="#使用-development-builds" class="headerlink" title="使用 development builds"></a><a href="https://expo.nodejs.cn/guides/local-app-development/">使用 development builds</a></h4><ul><li>支持安装任何第三方库</li><li>支持原生代码集成</li><li>支持修改任何项目配置</li></ul><h4 id="使用Reac-Native-开发，集成-Expo-SDK-库"><a href="#使用Reac-Native-开发，集成-Expo-SDK-库" class="headerlink" title="使用Reac Native 开发，集成 Expo SDK 库"></a>使用Reac Native 开发，集成 Expo SDK 库</h4><h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><p><a href="https://gluestack.io/">gluestack</a></p><h2 id="expo-router"><a href="#expo-router" class="headerlink" title="expo-router"></a>expo-router</h2><p>可以使用默认的文件系统路由方式</p><p><a href="https://github.com/craftzdog/react-native-animated-todo">也可以是用旧的版本</a></p><h2 id="初始化项目流程"><a href="#初始化项目流程" class="headerlink" title="初始化项目流程"></a>初始化项目流程</h2><p>创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写在最前面 请最好使用 npm</span></span><br><span class="line">npm create expo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要 原生包</span></span><br><span class="line"><span class="comment"># https://docs.expo.dev/workflow/continuous-native-generation/</span></span><br><span class="line">npm expo prebuild --platform ios/android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 eas build 生成 eas.json 文件</span></span><br><span class="line"><span class="comment"># https://docs.expo.dev/build/setup/</span></span><br><span class="line">eas build:configure</span><br></pre></td></tr></table></figure><ul><li>​​Expo Go 的限制​​<ul><li>Expo Go 是一个通用客户端，仅支持纯 JavaScript 项目（即未添加原生模块或自定义配置的 Expo 项目）。</li><li>如果你通过 eas build 生成了本地原生二进制文件（如 .apk 或 .ipa），或使用了 expo prebuild 生成了原生代码（如 android&#x2F; 和 ios&#x2F; 目录），项目就脱离了 Expo Go 的兼容范围。</li></ul></li></ul><p>本地 build</p><ul><li>使用开发客户端（Development Build）​​<ul><li>通过 expo run:android 或 expo run:ios 在设备上安装一个​​自定义的开发客户端​​（包含你的原生代码）。</li><li>调试方式：<ul><li>运行 expo start 启动开发服务器。</li><li>在开发客户端中手动输入开发服务器 URL（如 exp:&#x2F;&#x2F;192.168.x.x:8081），或通过 QR 码（需配合 expo start –dev-client）。</li></ul></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意 Gradle 和 JDK 版本兼容</span></span><br><span class="line"><span class="comment"># expo 53  gradle 8.13  jdk 17.0</span></span><br><span class="line"><span class="comment"># npx expo run:android 此命令会报错 https://github.com/expo/expo/issues/28703</span></span><br><span class="line">npx expo run:android</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成环境 打包流程 https://docs.expo.dev/guides/local-app-production/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> android</span><br><span class="line"><span class="comment">## 打包 aab</span></span><br><span class="line">./gradlew app:bundleRelease</span><br><span class="line"><span class="comment">## 打包 apk</span></span><br><span class="line">./gradlew app:assembleRelease</span><br></pre></td></tr></table></figure><p>减小包体积 在 android&#x2F;app&#x2F;build.gradle 文件中</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  splits &#123;</span><br><span class="line">    abi &#123;</span><br><span class="line">      reset()</span><br><span class="line">      enable <span class="literal">true</span></span><br><span class="line">      universalApk <span class="literal">false</span>  <span class="comment">// 不生成通用APK</span></span><br><span class="line">      include <span class="string">&quot;arm64-v8a&quot;</span>  <span class="comment">// 只打包这两种架构</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于热更"><a href="#关于热更" class="headerlink" title="关于热更"></a><a href="https://docs.expo.dev/eas-update/getting-started/#publish-an-update">关于热更</a></h3><p><a href="https://github.com/expo/custom-expo-updates-server">自建热更平台</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- EXPO_UPDATE_URL 值应包含项目的 ID --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.EXPO_UPDATE_URL&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;https://u.expo.dev/your-project-id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.EXPO_RUNTIME_VERSION&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;@string/expo_runtime_version&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">&quot;expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY&quot;</span> <span class="attr">android:value</span>=<span class="string">&quot;&#123;&#x27;expo-channel-name&#x27;:&#x27;your-channel-name&#x27;&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改 app.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;expo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;updates&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="attr">&quot;requestHeaders&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;expo-channel-name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;your-channel-name&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 热更</span></span><br><span class="line">eas update --channel [channel-name] --message <span class="string">&quot;[message]&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React Naive </tag>
            
            <tag> expo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oc视频抽取</title>
      <link href="/post/2024-04-30-oc%E8%A7%86%E9%A2%91%E6%8A%BD%E5%8F%96.html"/>
      <url>/post/2024-04-30-oc%E8%A7%86%E9%A2%91%E6%8A%BD%E5%8F%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频抽取"><a href="#视频抽取" class="headerlink" title="视频抽取"></a>视频抽取</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">void</span>)drawFramesFromVideoAtPath:(<span class="built_in">NSString</span> *)videoPath toDirectory:(<span class="built_in">NSString</span> *)outPath withTargetFrame:(<span class="built_in">NSUInteger</span>)targetFrame &#123;</span><br><span class="line">    DLog(<span class="string">@&quot;-------------------------视频抽帧-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSFileManager</span> *fileManager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (![fileManager fileExistsAtPath:outPath]) &#123;</span><br><span class="line">        <span class="comment">// 判断文件夹是否存在</span></span><br><span class="line">        [fileManager createDirectoryAtPath:outPath withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:&amp;error];</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            DLog(<span class="string">@&quot;创建输出目录失败：%@&quot;</span>, error);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURL</span> *videoURL = [<span class="built_in">NSURL</span> fileURLWithPath:videoPath];</span><br><span class="line">    <span class="built_in">AVAsset</span> *asset = [<span class="built_in">AVAsset</span> assetWithURL:videoURL];</span><br><span class="line">    <span class="built_in">AVAssetTrack</span> *videoTrack = [[asset tracksWithMediaType:<span class="built_in">AVMediaTypeVideo</span>] firstObject];</span><br><span class="line">    <span class="built_in">NSUInteger</span> frames = <span class="built_in">CMTimeGetSeconds</span>(asset.duration) * videoTrack.nominalFrameRate;</span><br><span class="line">    DLog(<span class="string">@&quot;视频共%lu帧，抽取%lu帧......&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)frames, (<span class="type">unsigned</span> <span class="type">long</span>)(frames / targetFrame) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AVAssetReader</span> *assetReader = [<span class="built_in">AVAssetReader</span> assetReaderWithAsset:asset error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;创建AVAssetReader失败：%@&quot;</span>, error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">AVAssetReaderTrackOutput</span> *output = [<span class="built_in">AVAssetReaderTrackOutput</span> assetReaderTrackOutputWithTrack:videoTrack outputSettings:@&#123;</span><br><span class="line">        (<span class="built_in">NSString</span> *)kCVPixelBufferPixelFormatTypeKey : @(kCVPixelFormatType_32BGRA)</span><br><span class="line">    &#125;];</span><br><span class="line">    [assetReader addOutput:output];</span><br><span class="line">    [assetReader startReading];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSUInteger</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> imageIndex = <span class="number">1000001</span>;</span><br><span class="line">    <span class="keyword">while</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusReading</span>) &#123;</span><br><span class="line">        <span class="built_in">CMSampleBufferRef</span> sampleBuffer = [output copyNextSampleBuffer];</span><br><span class="line">        <span class="keyword">if</span> (sampleBuffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count % targetFrame == <span class="number">0</span> || count == frames - <span class="number">1</span>) &#123;</span><br><span class="line">            DLog(<span class="string">@&quot;已提取 %d&quot;</span>, (imageIndex - <span class="number">1000000</span>));</span><br><span class="line">            <span class="keyword">@autoreleasepool</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">UIImage</span> *uiImage = [<span class="keyword">self</span> convertSampleBufferRefToUIImage:sampleBuffer];</span><br><span class="line">                <span class="built_in">NSString</span> *savePath = [outPath stringByAppendingPathComponent:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%lu.png&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)imageIndex]];</span><br><span class="line">                <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">                    <span class="built_in">NSData</span> *imageData = <span class="built_in">UIImagePNGRepresentation</span>(uiImage);</span><br><span class="line">                    [imageData writeToFile:savePath atomically:<span class="literal">YES</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            imageIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">CFRelease</span>(sampleBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusCompleted</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;视频已全部抽帧完成......&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusFailed</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;抽帧失败：%@&quot;</span>, assetReader.error);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (assetReader.status == <span class="built_in">AVAssetReaderStatusCancelled</span>) &#123;</span><br><span class="line">        DLog(<span class="string">@&quot;抽帧被取消&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DLog(<span class="string">@&quot;-------------------------抽帧完成-------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)convertSampleBufferRefToUIImage:(<span class="built_in">CMSampleBufferRef</span>)sampleBufferRef</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CGImageRef</span> cgImage = [<span class="keyword">self</span> convertSamepleBufferRefToCGImage:sampleBufferRef];</span><br><span class="line">        <span class="built_in">UIImage</span> *image;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGFloat</span> height = <span class="built_in">CGImageGetHeight</span>(cgImage);</span><br><span class="line">        <span class="built_in">CGFloat</span> width = <span class="built_in">CGImageGetWidth</span>(cgImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        height = height / 5;</span></span><br><span class="line"><span class="comment">//        width = width / 5;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="built_in">CGSizeMake</span>(width, height), <span class="literal">NO</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UseUIImage 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UseUIImage</span></span><br><span class="line"></span><br><span class="line">        [image drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height)];</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">        <span class="built_in">CGContextTranslateCTM</span>(context, <span class="number">0</span>, height);</span><br><span class="line">        <span class="built_in">CGContextScaleCTM</span>(context, <span class="number">1.0</span>, <span class="number">-1.0</span>);</span><br><span class="line">        <span class="built_in">CGContextDrawImage</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, width, height), cgImage);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CGImageRelease</span>(cgImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        UIGraphicsEndImageContext();</span></span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a UIImage from sample buffer data</span></span><br><span class="line"><span class="comment">// 官方回答 https://developer.apple.com/library/ios/qa/qa1702/_index.html</span></span><br><span class="line">+ (<span class="built_in">CGImageRef</span>)convertSamepleBufferRefToCGImage:(<span class="built_in">CMSampleBufferRef</span>)sampleBufferRef &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get a CMSampleBuffer&#x27;s Core Video image buffer for the media data</span></span><br><span class="line">        CVImageBufferRef imageBuffer = <span class="built_in">CMSampleBufferGetImageBuffer</span>(sampleBufferRef);</span><br><span class="line">        <span class="comment">// Lock the base address of the pixel buffer</span></span><br><span class="line">        CVPixelBufferLockBaseAddress(imageBuffer, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the number of bytes per row for the pixel buffer</span></span><br><span class="line">        <span class="type">void</span> *baseAddress = CVPixelBufferGetBaseAddress(imageBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the number of bytes per row for the pixel buffer</span></span><br><span class="line">        size_t bytesPerRow = CVPixelBufferGetBytesPerRow(imageBuffer);</span><br><span class="line">        <span class="comment">// Get the pixel buffer width and height</span></span><br><span class="line">        size_t width = CVPixelBufferGetWidth(imageBuffer);</span><br><span class="line">        size_t height = CVPixelBufferGetHeight(imageBuffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a device-dependent RGB color space</span></span><br><span class="line">        <span class="built_in">CGColorSpaceRef</span> colorSpace = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a bitmap graphics context with the sample buffer data</span></span><br><span class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">CGBitmapContextCreate</span>(baseAddress, width, height, <span class="number">8</span>,</span><br><span class="line">                                                     bytesPerRow, colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst);</span><br><span class="line">        <span class="comment">// Create a Quartz image from the pixel data in the bitmap graphics context</span></span><br><span class="line">        <span class="built_in">CGImageRef</span> quartzImage = <span class="built_in">CGBitmapContextCreateImage</span>(context);</span><br><span class="line">        <span class="comment">// Unlock the pixel buffer</span></span><br><span class="line">        CVPixelBufferUnlockBaseAddress(imageBuffer,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Free up the context and color space</span></span><br><span class="line">        <span class="built_in">CGContextRelease</span>(context);</span><br><span class="line">        <span class="built_in">CGColorSpaceRelease</span>(colorSpace);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> quartzImage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastlane</title>
      <link href="/post/fastlane.html"/>
      <url>/post/fastlane.html</url>
      
        <content type="html"><![CDATA[<h2 id="gym-action-example"><a href="#gym-action-example" class="headerlink" title="gym action example"></a>gym action example</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">default_platform(<span class="symbol">:ios</span>)</span><br><span class="line"></span><br><span class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">&quot;ci 发包&quot;</span></span><br><span class="line">  lane <span class="symbol">:ci</span> <span class="keyword">do</span></span><br><span class="line">    build_app(</span><br><span class="line">      <span class="symbol">workspace:</span> <span class="string">&quot;yourapp.xcworkspace&quot;</span>,</span><br><span class="line">      <span class="symbol">configuration:</span> <span class="string">&quot;CI&quot;</span>,</span><br><span class="line">      <span class="symbol">scheme:</span> <span class="string">&quot;yourscheme&quot;</span>,</span><br><span class="line">      <span class="symbol">silent:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">clean:</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="symbol">output_directory:</span> <span class="string">&quot;path&quot;</span>,</span><br><span class="line">      <span class="symbol">output_name:</span> <span class="string">&quot;youapp.ipa&quot;</span>,</span><br><span class="line">      <span class="symbol">export_options:</span> &#123;</span><br><span class="line">        <span class="symbol">method:</span> <span class="string">&#x27;ad-hoc&#x27;</span>,</span><br><span class="line">        <span class="symbol">provisioningProfiles:</span> &#123;</span><br><span class="line">          <span class="comment"># just file name not path !!!</span></span><br><span class="line">          <span class="string">&quot;bundle id&quot;</span> =&gt; <span class="string">&quot;file name&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">&quot;release 发包&quot;</span></span><br><span class="line">  lane <span class="symbol">:release</span>  <span class="keyword">do</span></span><br><span class="line">    increment_build_number</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> fastlane </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-grid</title>
      <link href="/post/css-grid.html"/>
      <url>/post/css-grid.html</url>
      
        <content type="html"><![CDATA[<h2 id="grid-布局"><a href="#grid-布局" class="headerlink" title="grid 布局"></a>grid 布局</h2><h4 id="grid-基本使用"><a href="#grid-基本使用" class="headerlink" title="grid 基本使用"></a>grid 基本使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  // 对角坐标 (x1, y1)  (x2, y2)</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">4</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / span <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="grid-area"><a href="#grid-area" class="headerlink" title="grid-area"></a>grid-area</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell-4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">5</span>, <span class="number">1</span>fr);</span><br><span class="line"></span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;header header header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main main main main&quot;</span></span><br><span class="line">    <span class="string">&quot;. footer footer footer .&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">grid-area</span>: nav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-3</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell-4</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> grid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现 Fiber Tree</title>
      <link href="/post/micro-react-04-fibers.html"/>
      <url>/post/micro-react-04-fibers.html</url>
      
        <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 fiber 创建一个 dom 并返回</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDom</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = fiber.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(fiber.<span class="property">props</span>.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(fiber.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(fiber.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = fiber.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">  nextUnitOfWork = &#123;</span><br><span class="line">    <span class="attr">dom</span>: container,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">children</span>: [element]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">child</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">sibling</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">return</span>: <span class="literal">null</span>, <span class="comment">// 表示父节点</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params">deadLine</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 应该终止</span></span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span></span><br><span class="line">  <span class="title function_">where</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// 做工作</span></span><br><span class="line">    nextUnitOfWork = <span class="title function_">preformUnitOfWork</span>(</span><br><span class="line">      nextUnitOfWork</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 判断后续是否还有空闲时间</span></span><br><span class="line">    shouldYield = deadLine.<span class="title function_">timeRemaining</span>() &lt; <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 空闲时间不足  会在浏览器下一次空闲时候执行</span></span><br><span class="line">  <span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用</span></span><br><span class="line"><span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preformUnitOfWork</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fiber.<span class="property">dom</span>) &#123;</span><br><span class="line">    fiber.<span class="property">dom</span> = <span class="title function_">createDom</span>(fiber)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fiber.<span class="property">return</span>) &#123;</span><br><span class="line">    fiber.<span class="property">return</span>.<span class="property">dom</span>.<span class="title function_">append</span>(fiber.<span class="property">dom</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> elements = fiber.<span class="property">props</span>.<span class="property">children</span></span><br><span class="line">  <span class="keyword">let</span> prevSibling = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> element = elements[i]</span><br><span class="line">    <span class="keyword">const</span> newFiber = &#123;</span><br><span class="line">      <span class="attr">type</span>: element.<span class="property">type</span>,</span><br><span class="line">      <span class="attr">props</span>: element.<span class="property">props</span></span><br><span class="line">      <span class="attr">return</span>: fiber,</span><br><span class="line">      <span class="attr">dom</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">child</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">sibling</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是第一个</span></span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// newFiber 就是 当前 fiber 的一个 child 节点</span></span><br><span class="line">      filber.<span class="property">child</span> = newFiber</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则就是 sibling 节点</span></span><br><span class="line">      prevSibling.<span class="property">sibling</span> = newFiber</span><br><span class="line">    &#125;</span><br><span class="line">    prevSibling = newFiber</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回下一个</span></span><br><span class="line">  <span class="comment">// 优先返回 child</span></span><br><span class="line">  <span class="keyword">if</span> (fiber.<span class="property">child</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fiber.<span class="property">child</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> nextFiber = fiber</span><br><span class="line">  <span class="title function_">where</span> (nextFiber) &#123;</span><br><span class="line">    <span class="comment">// 其次返回 sibling</span></span><br><span class="line">    <span class="keyword">if</span> (nextFiber.<span class="property">sibling</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nextFiber.<span class="property">sibling</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都没有 就需要向上查找</span></span><br><span class="line">    nextFiber = nextFiber.<span class="property">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> fiber tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现并行渲染调度函数</title>
      <link href="/post/micro-react-03-concurrentMode.html"/>
      <url>/post/micro-react-03-concurrentMode.html</url>
      
        <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = element.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(element.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = element.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历创建子元素</span></span><br><span class="line">  element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(child, dom)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加 dom 元素 到 父节点</span></span><br><span class="line">  container.<span class="title function_">append</span>(dom)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nextUnitOfWork = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">workLoop</span>(<span class="params">deadLine</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 应该终止</span></span><br><span class="line">  <span class="keyword">let</span> shouldYield = <span class="literal">false</span></span><br><span class="line">  <span class="title function_">where</span> (nextUnitOfWork &amp;&amp; !shouldYield) &#123;</span><br><span class="line">    <span class="comment">// 做工作</span></span><br><span class="line">    nextUnitOfWork = <span class="title function_">preformUnitOfWork</span>(</span><br><span class="line">      nextUnitOfWork</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 判断后续是否还有空闲时间</span></span><br><span class="line">    shouldYield = deadLine.<span class="title function_">timeRemaining</span>() &lt; <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 空闲时间不足  会在浏览器下一次空闲时候执行</span></span><br><span class="line">  <span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用</span></span><br><span class="line"><span class="title function_">requestIdleCallback</span>(workLoop)</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">preformUnitOfWork</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Concurrent Mode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现render函数</title>
      <link href="/post/micro-react-02-renderAPI.html"/>
      <url>/post/micro-react-02-renderAPI.html</url>
      
        <content type="html"><![CDATA[<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// render.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建 dom</span></span><br><span class="line">  <span class="keyword">const</span> dom = element.<span class="property">type</span> === <span class="string">&#x27;TEXT_ELEMENT&#x27;</span></span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(element.<span class="property">nodeValue</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(element.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置 dom 属性</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">isProperty</span> = key =&gt; key !== <span class="string">&#x27;children&#x27;</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(element.<span class="property">props</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(isProperty)</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      dom[key] = element.<span class="property">props</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历创建子元素</span></span><br><span class="line">  element.<span class="property">props</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(child, dom)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加 dom 元素 到 父节点</span></span><br><span class="line">  container.<span class="title function_">append</span>(dom)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> render</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> render </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现createElement函数</title>
      <link href="/post/micro-react-01-createElementAPI.html"/>
      <url>/post/micro-react-01-createElementAPI.html</url>
      
        <content type="html"><![CDATA[<h2 id="CreateElement"><a href="#CreateElement" class="headerlink" title="CreateElement"></a>CreateElement</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createElement.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, props, ...children</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      <span class="attr">children</span>: children.<span class="title function_">map</span>(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">typeof</span> child === <span class="string">&#x27;object&#x27;</span>) ? child : <span class="title function_">createTextElement</span>(child)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// text 文本节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTextElement</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;TEXT_ELEMENT&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">nodeValue</span>: text,</span><br><span class="line">      <span class="attr">children</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createElement</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createElement, render &#125; <span class="keyword">from</span> <span class="string">&#x27;micro-react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 dom  节点</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title function_">createElement</span>(&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123; <span class="attr">class</span>: <span class="string">&#x27;custom&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">style</span>: <span class="string">&#x27;background: yellow&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello Word&#x27;</span>,</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;h2&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Effort&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染 dom</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>)</span><br><span class="line"><span class="title function_">render</span>(element, container)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> createElement </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现一个迷你的 React</title>
      <link href="/post/micro-react-00-micro-react.html"/>
      <url>/post/micro-react-00-micro-react.html</url>
      
        <content type="html"><![CDATA[<p>根据 <a href="https://pomb.us/build-your-own-react/">build-your-own-react</a> 和 <a href="https://www.bilibili.com/video/BV1HP411j7yk/">Dragonfly_Y</a> 学习了关于 react 底层的一些东西</p><p>实现了下 micro-react</p><p>分为一下几个模块</p><ul><li>Step I: <a href="https://effort.fun/post/micro-react-01-createElementAPI.html">实现 createElement 函数</a></li><li>Step II: <a href="https://effort.fun/post/micro-react-02-renderAPI.html">实现 render 函数</a></li><li>Step III: <a href="https://effort.fun/post/micro-react-03-concurrentMode.html">并发模式</a></li><li>Step IV: <a href="https://effort.fun/post/micro-react-04-fibers.html">Fibers 结构</a></li><li>Step V: Render and Commit Phases</li><li>Step VI: Reconciliation</li><li>Step VII: Function Components</li><li>Step VIII: Hooks</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序</title>
      <link href="/post/miniprogram.html"/>
      <url>/post/miniprogram.html</url>
      
        <content type="html"><![CDATA[<h2 id="微信小程序的双线程模型"><a href="#微信小程序的双线程模型" class="headerlink" title="微信小程序的双线程模型"></a>微信小程序的双线程模型</h2><p>小程序的双线程指的就是渲染线程和逻辑线程，这两个线程分别承担UI的渲染和执行 JavaScript 代码的工作。</p><p>渲染层的界面使用了WebView 进行渲染；逻辑层采用 JsCore 线程运行 JS 脚本。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程，这两个线程的通信会经由微信客户端做中转，逻辑层发送网络请求也经由 Native 转发</p><p>为什么不采用 Web Worker 的方式 主要是性能问题  Web Worker 通信方式 要比 Native 转发更加 耗费性能</p><p>另一个 shadow Dom 兼容性很差</p><p>小程序 事件驱动的通信方式</p><p>渲染成与逻辑层并不是直接传递数据和事件的，而是由 Native 作为中间媒介进行转发</p><p>UI -&gt; event -&gt; jscore -&gt; tranform data(逻辑、接口调用、数据请求) -&gt; setData(render) -&gt; UI</p><p>setData 主要做了两件事</p><ul><li><p>改变逻辑层中目标属性的值</p></li><li><p>通过微信客户端(Native)通知到渲染层将 目标属性的值 更新到视图</p></li></ul><p>往下延伸</p><p>也就是 不在 UI 层展示的数据 完全可以不用 setData 方法去更新值</p><p>减少多次 setData 调用</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/MINA.html">具体查看</a></p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/framework.html#%E6%B8%B2%E6%9F%93%E5%B1%82%E5%92%8C%E9%80%BB%E8%BE%91%E5%B1%82">具体查看</a></p><h2 id="小程序用户认证体系-OAuth2-0"><a href="#小程序用户认证体系-OAuth2-0" class="headerlink" title="小程序用户认证体系 OAuth2.0"></a>小程序用户认证体系 OAuth2.0</h2><p><a href="https://zhuanlan.zhihu.com/p/509212673">OAuth2.0</a></p><h2 id="小程序优化"><a href="#小程序优化" class="headerlink" title="小程序优化"></a>小程序优化</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p>大图资源可放在云服务上优化</p><p>对于小图可采用 svg 格式 矢量图 保证图片质量的同时，减少资源大小</p><h3 id="setData"><a href="#setData" class="headerlink" title="setData"></a>setData</h3><p>减少 setData 的调用</p><p>setData 在这里主要做了两件事情：</p><ul><li><p>改变了逻辑层中这个目标属性的值</p></li><li><p>通过微信客户端发起通信，通知到渲染层</p></li></ul><p>在 setData 使用时 需要注意两件事情：</p><ul><li><p>不要把页面渲染无用的数据也放置在里面，夹带无用的内容是浪费资源的表现；</p></li><li><p>不要应用在一些过大数据中，几个大数据叠加在一起可能超过了一次通信的上限，导致失败</p></li></ul><h2 id="小程序的冷启动、热启动概念"><a href="#小程序的冷启动、热启动概念" class="headerlink" title="小程序的冷启动、热启动概念"></a>小程序的冷启动、热启动概念</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/runtime/operating-mechanism.html">具体查看</a></p><h2 id="小程序生命周期"><a href="#小程序生命周期" class="headerlink" title="小程序生命周期"></a>小程序生命周期</h2><h3 id="APP-整个小程序"><a href="#APP-整个小程序" class="headerlink" title="APP 整个小程序"></a>APP 整个小程序</h3><p>每个小程序都需要在 app.js 中调用 App 方法注册小程序实例</p><p>App 接受一个 Object 参数，其指定小程序的生命周期回调等</p><ul><li><p>onLaunch(Object object)<br>小程序初始化完成时触发，全局只触发一次</p></li><li><p>onShow(Object object)<br>小程序启动，或从后台进入前台显示时触发</p></li><li><p>onHide()<br>小程序从前台进入后台时触发</p></li></ul><h3 id="Page-小程序每个页面"><a href="#Page-小程序每个页面" class="headerlink" title="Page 小程序每个页面"></a>Page 小程序每个页面</h3><p>对于小程序中的每个页面，都需要在页面对应的 js 文件中进行注册，指定页面的初始数据、生命周期回调、事件处理函数等</p><p>简单的页面可以使用 Page() 进行构造</p><ul><li><p>onLoad(Object query)<br>页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打开当前页面路径中的参数</p></li><li><p>onShow()<br>页面显示&#x2F;切入前台时触发</p></li><li><p>onReady()<br>页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互</p></li><li><p>onHide()<br>页面隐藏&#x2F;切入后台时触发</p></li><li><p>onUnload()<br>页面卸载时触发</p></li></ul><h2 id="全局-App-对象"><a href="#全局-App-对象" class="headerlink" title="全局 App 对象"></a>全局 App 对象</h2><p>getAPP 函数用来获取到小程序全局唯一的 App 实例</p><p>可以用于页面传递参数</p><p>不要在定义于 App() 内的函数中，或调用 App 前调用 getApp() ，使用 this 就可以拿到 app 实例。</p><p><img src="/image/miniprogram.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器上的优化</title>
      <link href="/post/chrome-performance.html"/>
      <url>/post/chrome-performance.html</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>浏览器在渲染页面前需要先构建出 DOM 树 与 CSSOM 树</p><p>DOM 数据即文档对象模型，是由一个节点和对象组成的集合</p><p>CSSOM 树即层叠样式对象模型，里面是 CSS 的对象集合</p><p>想要选渲染出页面，就需要将 DOM 树 与 CSSOM 树结在一起，组个成渲染树</p><h3 id="渲染阻塞"><a href="#渲染阻塞" class="headerlink" title="渲染阻塞"></a>渲染阻塞</h3><p>HTML、CSS、JavaScript都是会对渲染产生阻塞的资源，HTML是必需的（没有DOM还谈何渲染），但可以从CSS与JavaScript着手优化，尽可能地减少阻塞的产生。</p><h4 id="优化-CSS"><a href="#优化-CSS" class="headerlink" title="优化 CSS"></a>优化 CSS</h4><p>如果可以让CSS资源只在特定条件下使用，这样这些资源就可以在首次加载时先不进行构建CSSOM树，只有在符合特定条件时，才会让浏览器进行阻塞渲染然后构建CSSOM树。<br>CSS的媒体查询正是用来实现这个功能的，它由媒体类型以及零个或多个检查特定媒体特征状况的表达式组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有使用媒体查询，这个css资源会阻塞渲染  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- all是默认类型，它和不设置媒体查询的效果是一样的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态媒体查询， 将在网页加载时计算。</span></span><br><span class="line"><span class="comment">根据网页加载时设备的方向，portrait.css 可能阻塞渲染，也可能不阻塞渲染。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;portrait.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;orientation:portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只在打印网页时应用，因此网页首次在浏览器中加载时，它不会阻塞渲染。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;print.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">media</span>=<span class="string">&quot;print&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用媒体查询可以让CSS资源不在首次加载中阻塞渲染，但不管是哪种CSS资源它们的下载请求都不会被忽略，浏览器仍然会先下载CSS文件</p><h4 id="优化-JS"><a href="#优化-JS" class="headerlink" title="优化 JS"></a>优化 JS</h4><p>当浏览器的 HTML 解析器遇到一个 script 标签时候会暂停构建 DOM</p><p>chrome 引擎会开始执行 JavaScript 脚本，直到执行结束后，浏览器才会从之前中断的地方恢复，继续构建 DOM</p><p>使用async可以通知浏览器该脚本不需要在引用位置执行，这样浏览器就可以继续构建DOM，JavaScript脚本会在就绪后开始执行，这样将显著提升页面首次加载的性能（async只可以在src标签中使用也就是外部引用的JavaScript文件）</p><h2 id="使用浏览器-Performance-进行分析"><a href="#使用浏览器-Performance-进行分析" class="headerlink" title="使用浏览器 Performance 进行分析"></a>使用浏览器 Performance 进行分析</h2><p><a href="https://juejin.cn/post/6844904148085768200#heading-19">具体使用点击查看</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> performance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/post/webpack.html"/>
      <url>/post/webpack.html</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-性能优化"><a href="#webpack-性能优化" class="headerlink" title="webpack 性能优化"></a>webpack 性能优化</h2><p>webpack 的优化瓶颈，主要是两个方面</p><ul><li>webpack 的构建过程太长</li><li>webpack 打包的结果体积太大</li></ul><h3 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h3><p>对于构建时间，可以采用 speed-measuer-webpack-plugin 插件进行分析</p><h4 id="多线程打包"><a href="#多线程打包" class="headerlink" title="多线程打包"></a>多线程打包</h4><p>可以使用 happypack 进行多线程打包，设置 js 或者 css 打包过程，使用 happypack 的 loader 进行打包</p><p>如果项目比较小不建议使用，反而会降低打包速度</p><p>happypack 的基本原理是将打包任务分配到多个子进程中去并行处理，子进程处理完成后会把结果发送到主进程中，从而减少构建时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="attr">use</span>: <span class="string">&#x27;Happypack/loader?id=js&#x27;</span>  <span class="comment">// 使用 happypack 的 loader 进行打包</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// css</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;css&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">preset</span>: [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用 tread-load webpack4 之后 官方推出的</p><p>thread-loader 会将您的 loader 放置在一个 worker 池里面运行，以达到多线程构建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&quot;src&quot;</span>),</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      <span class="string">&quot;thread-loader&quot;</span>,</span><br><span class="line">      <span class="comment">// 你的高开销的loader放置在此 (e.g babel-loader)</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h4><p>并行压缩主要有三个方案：</p><ul><li>parallel-uglify-plugi</li><li>uglifyjs-webpack-plugin 开启 parallel 参数</li><li>terser-webpack-plugin 开启 parallel 参数 （推荐使用这个，支持 ES6 语法压缩）</li></ul><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>可以使用预编译将提前引入的三方库进新打包处理，而不是每次都进行打包。</p><p>DllPlugin 结合 DllRefrencePlugin 插件的运用，对将要产出的 bundle 文件进行拆解打包，可以很彻底地加快 webpack 的打包速度</p><p>DllPlugin：负责抽离第三方库，形成第三方动态库dll<br>DllReferencePlugin：负责引用第三方库</p><p><a href="https://www.cnblogs.com/master-yi/p/12592424.html">具体可点击查看</a></p><h3 id="打包体积"><a href="#打包体积" class="headerlink" title="打包体积"></a>打包体积</h3><ul><li><p>Tree-Shaking 删除冗余代码</p></li><li><p>压缩 HTML&#x2F;JS&#x2F;CSS</p><ul><li>HTML压缩： html-webpack-plugin —— 删除双引号和折叠为一行。</li><li>CSS<ul><li>压缩： mini-css-extract-plugin</li><li>去除无用的 css: purgecss-webpack-plugin</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> build tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp</title>
      <link href="/post/tcp.html"/>
      <url>/post/tcp.html</url>
      
        <content type="html"><![CDATA[<h2 id="TCP-可靠性"><a href="#TCP-可靠性" class="headerlink" title="TCP 可靠性"></a>TCP 可靠性</h2><ul><li>重传机制<ul><li>超时重传</li><li>快速重传</li><li>SACK</li><li>D-SACK</li></ul></li><li>滑动窗口<ul><li>发送窗口</li><li>接收窗口</li></ul></li><li>流量控制<ul><li>控制窗口大小</li></ul></li><li>拥塞控制<ul><li>慢启动</li><li>拥塞避免</li><li>拥塞发生</li><li>快恢复</li></ul></li></ul><h2 id="为什么TCP是三次握手-不是两次、四次"><a href="#为什么TCP是三次握手-不是两次、四次" class="headerlink" title="为什么TCP是三次握手?不是两次、四次?"></a>为什么TCP是三次握手?不是两次、四次?</h2><p>TCP 使用三次握手建立连接的最主要原因是<strong>防止历史连接初始化了连接</strong></p><ul><li><p>三次握手才可以阻止重复历史连接的初始化(主要原因)</p></li><li><p>三次握手才可以同步双方的初始序列号</p></li><li><p>三次握手才可以避免资源浪费</p></li><li><p>不使用「两次握手」和「四次握手」的原因:</p><ul><li>「两次握手」:无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列<br>号;</li><li>「四次握手」:三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。</li></ul></li></ul><h2 id="为什么TCP挥手需要四次"><a href="#为什么TCP挥手需要四次" class="headerlink" title="为什么TCP挥手需要四次?"></a>为什么TCP挥手需要四次?</h2><ul><li>双方发 FIN 包</li><li>关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。</li><li>服务器收到客户端的FIN报文时，先回一个ACK应答报文，而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。</li></ul><p> 从上面过程可知，服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都 会分开发送，从而比三次握手导致多了一次</p><p> TIME_WAIT 需要确保 服务器 收到 最后一次 ACK 的响应</p><p> 在 Linux 系统里 2MSL 默认是 60 秒</p>]]></content>
      
      
      
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器回流和重绘</title>
      <link href="/post/html-reflow-repaint.html"/>
      <url>/post/html-reflow-repaint.html</url>
      
        <content type="html"><![CDATA[<h2 id="回流-Reflow"><a href="#回流-Reflow" class="headerlink" title="回流(Reflow)"></a>回流(Reflow)</h2><p>当Render Tree中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</p><p>会导致回流的操作：</p><ul><li>页面首次渲染</li><li>浏览器窗口大小发生改变</li><li>元素尺寸或位置发生改变</li><li>元素内容变化（文字数量或图片大小等等）</li><li>元素字体大小变化</li><li>添加或者删除可见的DOM元素</li><li>激活CSS伪类（例如：:hover）</li><li>查询某些属性或调用某些方法</li></ul><p>一些常用且会导致回流的属性和方法：</p><ul><li>clientWidth、clientHeight、clientTop、clientLeft</li><li>offsetWidth、offsetHeight、offsetTop、offsetLeft</li><li>scrollWidth、scrollHeight、scrollTop、scrollLeft</li><li>scrollIntoView()、scrollIntoViewIfNeeded()</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li><li>scrollTo()</li></ul><h2 id="重绘-Repaint"><a href="#重绘-Repaint" class="headerlink" title="重绘(Repaint)"></a>重绘(Repaint)</h2><p>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。</p><h2 id="当输入网址后，到网页显示，其间发生了什么"><a href="#当输入网址后，到网页显示，其间发生了什么" class="headerlink" title="当输入网址后，到网页显示，其间发生了什么"></a>当输入网址后，到网页显示，其间发生了什么</h2><ul><li><p>浏览器解析 URL<br><a href="http://web服务器/%E6%96%87%E4%BB%B6">http://web服务器/目录/../文件</a></p><ul><li>http 访问数据的协议</li><li>&#x2F;&#x2F; 后面 服务器名称</li><li>资源路径</li></ul></li><li><p>对 URL 进行解析之后，浏览器确定了 Web 服务器和文件名，根据这些信息来生成 HTTP 请求消息了</p></li><li><p>通过 DNS 服务器获取 真实 IP 地址</p></li><li><p>通过 DNS 获取到 IP 后，就可以把 HTTP 的传输工作交给操作系统中的协议栈，应用程序(浏览器)通过调用 Socket 库</p></li><li><p>建立链接  TCP 三次握手</p></li><li><p>服务器 层层解析 把相应数据装在 HTTP 响应报 文里</p></li><li><p>客户端收到后 交给浏览器去渲染页面</p></li><li><p>最后，客户端要离开了，向服务器发起了 TCP 四次挥手，至此双方的连接就断开了</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 回流 </tag>
            
            <tag> 重绘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宏队列，微队列</title>
      <link href="/post/javascript-task-queue.html"/>
      <url>/post/javascript-task-queue.html</url>
      
        <content type="html"><![CDATA[<h2 id="宏队列"><a href="#宏队列" class="headerlink" title="宏队列"></a>宏队列</h2><ul><li>dom事件回调</li><li>ajax请求回调</li><li>定时器回调</li><li>close时间</li><li>IO时间</li></ul><h2 id="微队列"><a href="#微队列" class="headerlink" title="微队列"></a>微队列</h2><ul><li>Promise 回调</li><li>proccess.nextTick</li><li>queueMicrotask</li><li>mutation 回调</li></ul><h2 id="任务执行顺序"><a href="#任务执行顺序" class="headerlink" title="任务执行顺序"></a>任务执行顺序</h2><p>同步任务 &gt; 微队列 &gt; 宏队列</p><ul><li>js 引擎首先必须执行所有的初始化同步任务代码</li><li>每次准备取出第一个<code>宏任务</code>执行前，都要将所有的<code>微任务</code>一个一个取出来执行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 宏任务 </tag>
            
            <tag> 微任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux</title>
      <link href="/post/tmux.html"/>
      <url>/post/tmux.html</url>
      
        <content type="html"><![CDATA[<h2 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h2><p>新建一个<strong>tmux session</strong>非常简单，语法为<strong>tmux new -s session-name</strong>，也可以简写为<strong>tmux</strong>，为了方便管理，建议指定会话名称，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux # 新建一个无名称的会话</span><br><span class="line">tmux new -s demo # 新建一个名称为demo的会话</span><br></pre></td></tr></table></figure><h2 id="断开当前会话"><a href="#断开当前会话" class="headerlink" title="断开当前会话"></a>断开当前会话</h2><p>会话中操作了一段时间，我希望断开会话同时下次还能接着用，怎么做？此时可以使用detach命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux detach # 断开当前会话，会话在后台运行</span><br></pre></td></tr></table></figure><p>也许你觉得这个太麻烦了，是的，tmux的会话中，我们已经可以使用tmux快捷键了。使用快捷键组合<strong>Ctrl+b + d</strong>，三次按键就可以断开当前会话。</p><h2 id="进入之前的会话"><a href="#进入之前的会话" class="headerlink" title="进入之前的会话"></a>进入之前的会话</h2><p>断开会话后，想要接着上次留下的现场继续工作，就要使用到tmux的attach命令了，语法为<strong>tmux attach-session -t session-name</strong>，可简写为<strong>tmux a -t session-name</strong> 或 <strong>tmux a</strong>。通常我们使用如下两种方式之一即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux a # 默认进入第一个会话</span><br><span class="line">tmux a -t demo # 进入到名称为demo的会话</span><br></pre></td></tr></table></figure><h2 id="关闭会话"><a href="#关闭会话" class="headerlink" title="关闭会话"></a>关闭会话</h2><p>会话的使命完成后，一定是要关闭的。我们可以使用tmux的kill命令，kill命令有<strong>kill-pane</strong>、<strong>kill-server</strong>、<strong>kill-session</strong> 和 <strong>kill-window</strong>共四种，其中<strong>kill-session</strong>的语法为<strong>tmux kill-session -t session-name</strong>。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t demo # 关闭demo会话</span><br><span class="line">tmux kill-server # 关闭服务器，所有的会话都将关闭</span><br></pre></td></tr></table></figure><h2 id="查看所有的会话"><a href="#查看所有的会话" class="headerlink" title="查看所有的会话"></a>查看所有的会话</h2><p>管理会话的第一步就是要查看所有的会话，我们可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux list-session # 查看所有会话</span><br><span class="line">tmux ls # 查看所有会话，提倡使用简写形式</span><br></pre></td></tr></table></figure><h2 id="Tmux快捷指令"><a href="#Tmux快捷指令" class="headerlink" title="Tmux快捷指令"></a>Tmux快捷指令</h2><p>关于快捷指令，首先要认识到的是：tmux的所有指令，都包含同一个前缀，默认为<strong>Ctrl+b</strong>，输入完前缀过后，控制台激活，命令按键才能生效。前面tmux会话相关的操作中，我们共用到了两个快捷键<strong>Ctrl+b + d</strong>、<strong>Ctrl+b + s</strong>，但这仅仅是冰山一角，欲窥tmux庞大的快捷键体系，请看下表。</p><p>表一：系统指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>?</code></td><td align="center">显示快捷键帮助文档</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>d</code></td><td align="center">断开当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>D</code></td><td align="center">选择要断开的会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+z</code></td><td align="center">挂起当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>r</code></td><td align="center">强制重载当前会话</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>s</code></td><td align="center">显示会话列表用于选择并切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>:</code></td><td align="center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>[</code></td><td align="center">进入复制模式，按<code>q</code>退出，或者翻屏   <code>Ctrl + f</code> <code>Ctrl + b</code></td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>]</code></td><td align="center">粘贴复制模式中复制的文本</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>~</code></td><td align="center">列出提示信息缓存</td></tr></tbody></table><p>表二：窗口（window）指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>c</code></td><td align="center">新建窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&amp;</code></td><td align="center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>0~9</code></td><td align="center">切换到指定窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>p</code></td><td align="center">切换到上一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>n</code></td><td align="center">切换到下一窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>w</code></td><td align="center">打开窗口列表，用于且切换窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>,</code></td><td align="center">重命名当前窗口</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>.</code></td><td align="center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>f</code></td><td align="center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><p>表三：面板（pane）指令。</p><table><thead><tr><th align="center">前缀</th><th align="center">指令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&quot;</code></td><td align="center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>%</code></td><td align="center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>x</code></td><td align="center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>z</code></td><td align="center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>!</code></td><td align="center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>;</code></td><td align="center">切换到最后一次使用的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>q</code></td><td align="center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&#123;</code></td><td align="center">向前置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>&#125;</code></td><td align="center">向后置换当前面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+o</code></td><td align="center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>方向键</code></td><td align="center">移动光标切换面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>o</code></td><td align="center">选择下一面板</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>空格键</code></td><td align="center">在自带的面板布局中循环切换</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Alt+方向键</code></td><td align="center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>Ctrl+方向键</code></td><td align="center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td align="center"><code>Ctrl+b</code></td><td align="center"><code>t</code></td><td align="center">显示时钟</td></tr></tbody></table><p>tmux的丝滑分屏功能正是得益于以上系统、窗口、面板的快捷指令，只要你愿意，你就可以解除任意的快捷指令，然后绑上你喜欢的指令</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/post/nginx.html"/>
      <url>/post/nginx.html</url>
      
        <content type="html"><![CDATA[<h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证配置</span></span><br><span class="line">nginx -t</span><br><span class="line"><span class="comment"># 配置目录 /etc/nginx/</span></span><br><span class="line"><span class="comment"># 默认html目录  /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;   <span class="comment"># 控制并发数   根据 CPU 核数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line">events &#123;  <span class="comment"># 影响 nginx 服务器与用户网络连接</span></span><br><span class="line">    worker_connections  1024;   <span class="comment"># 支持最大连接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;    <span class="comment"># 对应文件处理类型</span></span><br><span class="line">    default_type  application/octet-stream;     <span class="comment"># 找不到 的话 默认用 二进制流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;      日志记录的格式</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;    日志位置</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># include   /usr/local/nginx/conf/conf.d/*.conf;   # 其余配置;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;     <span class="comment"># 监听端口号</span></span><br><span class="line">        server_name  localhost;    <span class="comment"># 服务器主机名/ip</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;     <span class="comment"># 主目录</span></span><br><span class="line">      proxy_pass   http://127.0.0.1:8080;   <span class="comment"># 80端口 转发到 8080</span></span><br><span class="line">            index  index.html index.htm;   <span class="comment"># 默认打开的页面</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location = /a &#123;   // 优先级最高  等于 /a    /a/b 不行</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /a &#123;  // 优先级次高  以 /a 开头</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ /\w &#123;  // 正则表达式  ~ 标识符</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">同优先级的，匹配程度较高的先匹配</span><br><span class="line"></span><br><span class="line">匹配程度一样的， 写在前面的先匹配</span><br></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">​proxy_pass http://ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location  /b/ &#123;    会导致  /b/x --&gt; http://ip/x;</span><br><span class="line">​proxy_pass http://ip/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream group1 &#123;</span><br><span class="line">​server ip:80 weight=1; // weight  权重</span><br><span class="line">​server ip:81;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream group1 &#123;</span><br><span class="line">​ip_hash   <span class="comment"># 解决 session 问题</span></span><br><span class="line">​server ip:80 weight=1; // weight  权重</span><br><span class="line">​server ip:81;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream group1 &#123;</span><br><span class="line">​server ip:80 weight=1; // weight  权重</span><br><span class="line">​server ip:81;</span><br><span class="line">​fair <span class="comment"># 根据请求响应时间 分配</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /a/ &#123;</span><br><span class="line">​proxy_pass http://group1/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CURL"><a href="#CURL" class="headerlink" title="CURL"></a>CURL</h2><p>curl <a href="http://xxx/xx/xx">http://xxx/xx/xx</a> -H “A:B”  -X POST -d “age&#x3D;22”</p><p>cron 计时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分   时   日   月   星期</span><br><span class="line">*    *    *   *    *             *  每一     , 并列   -连续   / 整除</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">20</span>,<span class="number">40</span>   *   *   *   *</span><br><span class="line"><span class="number">20</span>-<span class="number">40</span>   *   *   *   *</span><br><span class="line">[<span class="number">20</span>,<span class="number">40</span>] *   *   *   *</span><br><span class="line">*<span class="regexp">/2(0=/</span><span class="number">2</span>)  *   *   *   *</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">    proxy_pass http://localhost:81/;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">    proxy_pass http://localhost:81/;</span><br><span class="line">    root   html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            proxy_pass  http://node:8080/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>防火墙</title>
      <link href="/post/linux-firewalld.html"/>
      <url>/post/linux-firewalld.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不是显示active状态，需要打开防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有已开放的临时端口（默认为空）</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有永久开放的端口（默认为空）</span></span><br><span class="line">firewall-cmd --list-ports --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加临时开放端口（例如：比如我修改ssh远程连接端口是223，则需要开放这个端口）</span></span><br><span class="line">firewall-cmd --add-port=223/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加永久开放的端口（例如：223端口）</span></span><br><span class="line">firewall-cmd --add-port=223/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭临时端口</span></span><br><span class="line">firewall-cmd --remove-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭永久端口</span></span><br><span class="line">firewll-cmd --remove-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置结束后需要输入重载命令并重启防火墙以生效配置</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> firewalld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型链</title>
      <link href="/post/prototype-chain.html"/>
      <url>/post/prototype-chain.html</url>
      
        <content type="html"><![CDATA[<h2 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h2><p>每一个函数都有一个 prototype 属性，指向了实例的原型（__proto__）</p><h2 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h2><p>每一个 js 对象（除了 null ）都有一个属性 __proto__，指向对象的原型，即函数的 prototype</p><p>每个原型都有一个 constructor 属性指向关联的构造函数</p><h2 id="如何模拟-new-的创建"><a href="#如何模拟-new-的创建" class="headerlink" title="如何模拟 new 的创建"></a>如何模拟 new 的创建</h2><ol><li><p>创建一个新的、空的实例对象 obj</p></li><li><p>将 obj.__proto__ 指向构造函数的 prototype</p></li><li><p>将构造函数内部的 this，修改为实例</p></li><li><p>返回实例 obj</p></li></ol><p>如果使用 PPrototype 指代原型对象，那么构造函数 Person、原型 PPrototype、实例 p1，p2 之间的关系如下</p><p>&#x2F;&#x2F; -&gt; 表示指向<br>Person.prototype -&gt; PPrototype<br>p1.__proto__ -&gt; PPrototype<br>p2.__proto__ -&gt; PPrototype<br>PPrototype.constructor -&gt; Person</p><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li><p>Function 是最顶层的构造器</p></li><li><p>Function 是 JavaScript 里最顶层的构造器，它构造了系统中的所有对象，包括用户自定义对象，系统内置对象，甚至包括它自己</p></li><li><p>Function.__proto__ &#x3D;&#x3D;&#x3D; Function.prototype</p></li></ul><h2 id="Object-是最顶层的对象"><a href="#Object-是最顶层的对象" class="headerlink" title="Object 是最顶层的对象"></a>Object 是最顶层的对象</h2><ul><li><p>所有对象都继承 Object 的原型</p></li><li><p>Object 是 Function 构造出来</p></li><li><p>Object.__proto__ &#x3D;&#x3D;&#x3D; Function.prototype</p></li><li><p>Object.prototype.__proto__ &#x3D;&#x3D;&#x3D; null</p></li></ul><h2 id="函数的-proto"><a href="#函数的-proto" class="headerlink" title="函数的 __proto__"></a>函数的 __proto__</h2><p>函数也是对象，也有 __proto__ 指向 Function.prototype</p><h2 id="函数的-prototype-proto"><a href="#函数的-prototype-proto" class="headerlink" title="函数的 prototype.__proto__"></a>函数的 prototype.__proto__</h2><p>函数.prototype，本质上是和 var obj &#x3D; {} 是一样的，都是对象，是由 new Object 创建的</p><p>即 函数.prototype.__proto__ &#x3D;&#x3D;&#x3D; Object.prototype</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/post/javascript-this.html"/>
      <url>/post/javascript-this.html</url>
      
        <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>当函数被调用执行时，变量对象会生成，这个时候，this 的指向会确定。一个非常重要的结论，当前函数的 this 是在函数被调用执行的时候才确定的。如果当前的执行上下文处于函数调用栈的栈顶，那么这个时候变量对象会变成活动对象，同时this的指向确认。</p><p>在全局对象中，this 指向它本身。</p><p>在一个函数的执行上下文中，this 由该函数的调用者提供，由调用函数的方式来决定其指向。</p><p>如果调用者被某个对象所持有，那么在调用该函数时，内部的 this 指向该对象。<br>如果调用者函数独立调用，那么该函数内部的 this 指向 undefined，在非严格模式下，当 this 为 undefined 是，他会自动指向全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">40</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn this: &#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">call</span>(obj)</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn this: Object &#123; a: 40 &#125;</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn this: Window &#123; &#125;</span></span><br><span class="line"><span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>这个例子中 fn 最终的调用方式不同，因此在 fn 的环境中，this 会有所变化。<br>但是无论 fn 如何调用，在 fn 执行时，foo 始终都是独立调用。<br>因此 foo 内部的 this 都是指向 undefined 的，但是由于这是非严格模式，因此自动转向 window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">getA</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">getA</span>()) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = foo.<span class="title function_">getA</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>()) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>foo.getA() 中，getA 为调用者，被 foo 所拥有，当 getA 执行时，this 指向 foo<br>test()执行是，test 为调用者，它是独立调用，当 getA 执行时候，this 指向 undefined ，自动转向 window</p><h2 id="call-apply-bind-显示修改-this"><a href="#call-apply-bind-显示修改-this" class="headerlink" title="call&#x2F;apply&#x2F;bind 显示修改 this"></a>call&#x2F;apply&#x2F;bind 显示修改 this</h2><ul><li><p>当函数调用 call&#x2F;apply 时，则表示会执行该函数，并且内部函数内部 this 指向 call&#x2F;apply 的第一个参数</p></li><li><p>call&#x2F;apply 的不同之处在于</p><ul><li>call 的第一个参数是为函数内部指定 this 指向，后续的参数则是函数执行时所需要的参数，一个个传递</li><li>apply 的第一个参数是为函数内部指定 this 指向，而函数的参数，则以数组的形式传递，作为 apply 的第二个参数</li></ul></li><li><p>当函数调用 bind 是，函数不会立即执行，而是返回一个新的函数，这个新的函数与原函数有共同的函数体，但它并非原函数，并且新函数的参数与 this 指向都已经被绑定，参数为 bind 的后续参数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> object = &#123; <span class="attr">a</span>: <span class="number">40</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _fn = fn.<span class="title function_">bind</span>(object, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(_fn === fn) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>() <span class="comment">// 43</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">_fn</span>(<span class="number">1</span>, <span class="number">4</span>) <span class="comment">// 43  因为参数已经绑定，因此重新传入参数是无效的</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h2><p>箭头函数的 this 实际上是向外层一级一级的查找作用域中的 this</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/post/closures.html"/>
      <url>/post/closures.html</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>闭包是一种特殊的对象</p><p>它由两部分组成 - 执行上下文（代号A），以及在该执行上下文中创建的函数（代号B）</p><p>当 B 执行时，如果访问了 A 中变量对象的值，那么闭包就会产生。</p><p>在 Chrome 中，执行上下文 A 的函数名代指闭包。</p><h2 id="闭包与作用域链"><a href="#闭包与作用域链" class="headerlink" title="闭包与作用域链"></a>闭包与作用域链</h2><p>闭包的存在 并不会导致作用域链发生变化</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Closures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域和作用域链</title>
      <link href="/post/scope-scope-chain.html"/>
      <url>/post/scope-scope-chain.html</url>
      
        <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>常见的作用域有两种，全局作用域和函数作用域</p><p>ES6之后有块级作用域(‘{}’)</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域链是由当前环境与上层执行环境的一系列变量对象组成的，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> b = a + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> b + c</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">innerTest</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>上面这个例子中，innerTest 的作用域链包含了三个变量对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// innerTest 的执行上下文</span></span><br><span class="line"></span><br><span class="line">innerTestEC = &#123;</span><br><span class="line">  <span class="attr">VO</span>: &#123;...&#125;, <span class="comment">// 变量对象</span></span><br><span class="line">  <span class="attr">scopeChain</span>: [<span class="title function_">VO</span>(innerTest), <span class="title function_">VO</span>(test), <span class="title function_">VO</span>(<span class="variable language_">global</span>)],</span><br><span class="line">  <span class="attr">this</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用一个数组来表示作用域链的有序性。数组的第一项 scopeChain[0] 为作用域链的最前端，而数组的最后一项则为作用域链的最末端。所有作用域链的最末端都是全局变量对象。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量提升</title>
      <link href="/post/javascript-hoisting.html"/>
      <url>/post/javascript-hoisting.html</url>
      
        <content type="html"><![CDATA[<h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><blockquote><p>变量提升（Hoisting）被认为是，Javascript中执行上下文（特别是创建和执行阶段）工作方式的一种认识。</p></blockquote><p>变量提升是指在 JavaScript 代码执行过程中，JavaScript 引擎把变量的声明部分和函数的声明部分提升到代码开头的行为。变量被提升后，会给变量设置默认值为 undefined。</p><p>ES6 支持新的变量生命方式 let&#x2F;const, 规则与 var 完全不同，它们是在上下文的执行阶段开始执行的，避免了变量提升带来的一系列问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建阶段</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">a = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>在变量对象的创建过程中，函数声明的执行优先级会比变量声明的优先级更高一点，而且同名的函数会覆盖函数与变量，但是同名的变量并不会覆盖函数。</p><p>但是在执行上下文阶段，同名的函数会被变量重新赋值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cover fn&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cover a&#x27;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="string">&#x27;I want cover function named fn&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// cover fn</span></span><br><span class="line"><span class="comment">// I want cover function named fn</span></span><br></pre></td></tr></table></figure><p>上面例子的执行顺序其实为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建阶段</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fn&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cover fn&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;cover a&#x27;</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行阶段</span></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 20</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// cover fn</span></span><br><span class="line"></span><br><span class="line">fn = <span class="string">&#x27;I want cover function named fn&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn) <span class="comment">// I want cover function named fn</span></span><br></pre></td></tr></table></figure><p>在 ES6 之前，ECMAScript 没有块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">// i === 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文</title>
      <link href="/post/javascript-execution-context.html"/>
      <url>/post/javascript-execution-context.html</url>
      
        <content type="html"><![CDATA[<h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>JavaScript 在执行过程是，会进入一个执行上下文中。<br>执行上下文可以理解为当前代码的运行环境。</p><p>JavaScript 中的执行环境住还要包括一下三种情况：</p><ol><li>全局环境：代码运行起来后会首先进入全局环境</li><li>函数环境：当函数被调用执行时，会进入当前函数中执行代码</li><li>evel环境</li></ol><p>JavaScript 引擎会以栈的方式来处理它们，这个栈就是函数调用栈 函数调用栈规定了 JavaScript 代码的执行顺 栈底永远都是全局上下文，栈顶则是当前正在执行的上下文</p><h3 id="函数生命周期"><a href="#函数生命周期" class="headerlink" title="函数生命周期"></a>函数生命周期</h3><ul><li><p>创建阶段<br>生成变量对象、确认作用域链、确定 this 指向</p></li><li><p>执行阶段<br>变量赋值、函数引用、执行代码</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE中使用pros传递参数的一些细节</title>
      <link href="/post/about-vue-props-passing-detail.html"/>
      <url>/post/about-vue-props-passing-detail.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用一个对象绑定多个-prop"><a href="#使用一个对象绑定多个-prop" class="headerlink" title="使用一个对象绑定多个 prop"></a>使用一个对象绑定多个 prop</h2><p>如果你想要将一个对象的所有属性都当作 props 传入，你可以使用没有参数的 v-bind，即只使用 v-bind 而非 :prop-name。例如，这里有一个 post 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">post</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;My Journey with Vue&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及下面的模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BlogPost v-bind=&quot;post&quot; /&gt;</span><br></pre></td></tr></table></figure><p>而这实际上等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BlogPost :id=&quot;post.id&quot; :title=&quot;post.title&quot; /&gt;</span><br></pre></td></tr></table></figure><h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>所有的 props 都遵循着单向绑定原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。这避免了子组件意外修改父组件的状态的情况，不然应用的数据流将很容易变得混乱而难以理解。</p><p>另外，每次父组件更新后，所有的子组件中的 props 都会被更新到最新值，这意味着你不应该在子组件中去更改一个 prop。若你这么做了，Vue 会在控制台上向你抛出警告：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ❌ 警告！prop 是只读的！</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导致你想要更改一个 prop 的需求通常来源于以下两种场景：</p><ol><li>prop 被用于传入初始值；而子组件想在之后将其作为一个局部数据属性。在这种情况下，最好是新定义一个局部数据属性，从 props 上获取初始值即可：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 计数器只是将 this.initialCounter 作为初始值</span></span><br><span class="line">      <span class="comment">// 像下面这样做就使 prop 和后续更新无关了</span></span><br><span class="line">      <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">initialCounter</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>需要对传入的 prop 值做进一步的转换。在这种情况中，最好是基于该 prop 值定义一个计算属性：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 该 prop 变更时计算属性也会自动更新</span></span><br><span class="line">    <span class="title function_">normalizedSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更改对象-数组类型的-props"><a href="#更改对象-数组类型的-props" class="headerlink" title="更改对象 &#x2F; 数组类型的 props"></a>更改对象 &#x2F; 数组类型的 props</h2><p>当对象或数组作为 props 被传入时，虽然子组件无法更改 props 绑定，但仍然可以更改对象或数组内部的值。这是因为 JavaScript 的对象和数组是按引用传递，而对 Vue 来说，禁止这样的改动虽然可能，但有很大的性能损耗，比较得不偿失。</p><p>这种更改的主要缺陷是它允许了子组件以某种不明显的方式影响父组件的状态，可能会使数据流在将来变得更难以理解。在最佳实践中，你应该尽可能避免这样的更改，除非父子组件在设计上本来就需要紧密耦合。在大多数场景下，子组件应该抛出一个事件来通知父组件做出改变。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> props </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果在win11上获取wifi密码</title>
      <link href="/post/how-to-get-wifi-password-on-win11.html"/>
      <url>/post/how-to-get-wifi-password-on-win11.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示 WLAN 上的配置文件</span></span><br><span class="line">&gt; netsh wlan show profiles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示 配置 详细信息</span></span><br><span class="line">&gt; netsh wlan show profile name=<span class="string">&quot;<span class="variable">$&#123;name&#125;</span>&quot;</span> key=clear</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> wifi </tag>
            
            <tag> win11 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-多环境支持</title>
      <link href="/post/03-%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81.html"/>
      <url>/post/03-%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%94%AF%E6%8C%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="xcconfig-相关配置"><a href="#xcconfig-相关配置" class="headerlink" title="xcconfig 相关配置"></a>xcconfig 相关配置</h2><p>Build Configuration 和 Xcode Scheme 管理多环境</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-统一pod版本</title>
      <link href="/post/02-%E7%BB%9F%E4%B8%80pod%E7%89%88%E6%9C%AC.html"/>
      <url>/post/02-%E7%BB%9F%E4%B8%80pod%E7%89%88%E6%9C%AC.html</url>
      
        <content type="html"><![CDATA[<h2 id="Podfile"><a href="#Podfile" class="headerlink" title="Podfile"></a>Podfile</h2><p>source 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于指向 PodSpec（Pod 规范）文件的 Repo，从而使得 CocoaPods 能查询到相应的 PodSpec 文件</span></span><br><span class="line">source &#x27;https://cdn.cocoapods.org/&#x27;</span><br></pre></td></tr></table></figure><p>pod版本指定</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&#x27;RxSwift&#x27;</span>, <span class="string">&#x27;= 5.1.1&#x27;</span></span><br></pre></td></tr></table></figure><p>除了 &#x3D; 操作符以外，CocoaPods 还支持其他操作符来指定版本：</p><ul><li>&gt; 0.1表示大于 0.1 的任何版本，这样可以包含 0.2 或者 1.0；</li><li>&gt;&#x3D; 0.1表示大于或等于 0.1 的任何版本；</li><li>&lt; 0.1表示少于 0.1 的任何版本；</li><li>&lt;&#x3D; 0.1表示少于或等于 0.1 的任何版本；</li><li>~&gt; 0.1.2表示大于 0.1.2 而且最高支持 0.1.* 的版本，但不包含 0.2 版本。</li></ul><p>这几个操作符相里面，~&gt;（Squiggy arrow）操作符更为常用，它是以最后一个部分的版本号（例子中 0.1.2 的最后一个部分是补丁版本号 ..2）来计算可以支持的最高版本号。</p><p>例如~&gt; 0.1.2表示 &gt;&#x3D; 0.1.2 并且 &lt; 0.2.0，但不能等于 0.2.0， 因为 0.2.0 已经更新了副版本号而不仅仅是补丁版本号了。另外一个例子是~&gt; 0.1，表示  &gt;&#x3D; 0.1  并且 &lt; 1.0，举例来说，我们可以更新到 0.9 但不能更新到 1.0。</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-统一开发环境</title>
      <link href="/post/01-%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html"/>
      <url>/post/01-%E7%BB%9F%E4%B8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
      
        <content type="html"><![CDATA[<h2 id="rbenv-统一-ruby-环境"><a href="#rbenv-统一-ruby-环境" class="headerlink" title="rbenv 统一 ruby 环境"></a>rbenv 统一 ruby 环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install rbenv ruby-build rbenv-vars</span><br></pre></td></tr></table></figure><p>配置 rbenv 环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line">export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(rbenv init -)&quot;</span><br><span class="line">export RUBY_BUILD_MIRROR_URL=https://cache.ruby-china.com</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 设置 ruby 生效级别</span></span><br><span class="line">rbenv global 2.7.1      # 默认使用 1.9.3-p392</span><br><span class="line">rbenv shell 2.7.1       # 当前的 shell 使用 1.9.3-p392, 会设置一个 `RBENV_VERSION` 环境变量</span><br><span class="line">rbenv local 2.7.1      # 当前目录使用 jruby-1.7.3, 会生成一个 `.rbenv-version` 文件</span><br></pre></td></tr></table></figure><p>本地项目配置 ruby 环境<br>项目根目录下会创建一个 .ruby-version 内部保存一个 ruby 版本号字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd $(PROJECT_DIR)</span><br><span class="line">rbenv install 2.7.1</span><br><span class="line">rbenv local 2.7.1</span><br></pre></td></tr></table></figure><h2 id="RubyGems-和-Bundler"><a href="#RubyGems-和-Bundler" class="headerlink" title="RubyGems 和 Bundler"></a>RubyGems 和 Bundler</h2><p>RubyGems 和 Bundler 主要是用来安装和管理 CocoaPods 和 fastlane 等第三方工具。</p><p>具体来说，RubyGems 是 Ruby 依赖包管理工具。在 Ruby 的世界，包叫作 Gem，我们可以通过gem install命令来安装。但是 RubyGems 在管理 Gem 版本的时候有些缺陷，就有人开发了 Bundler，用它来检查和安装 Gem 的特定版本，以此为 Ruby 项目提供一致性的环境。</p><p>要安装 Bundler，我们可执行<code>gem install bundler</code>命令进行，之后，再执行<code>bundle init</code>就可以生成一个 Gemfile 文件，像 CocoaPods 和 fastlane 等依赖包，我们就可以添加到这个文件里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &quot;https://rubygems.org&quot;</span><br><span class="line">gem &quot;cocoapods&quot;, &quot;1.10.0&quot;</span><br><span class="line">gem &quot;fastlane&quot;, &quot;2.166.0&quot;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install ruby using rbenv</span></span><br><span class="line">ruby_version=`<span class="built_in">cat</span> .ruby-version`</span><br><span class="line"><span class="keyword">if</span> [[ ! -d <span class="string">&quot;<span class="variable">$HOME</span>/.rbenv/versions/<span class="variable">$ruby_version</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  rbenv install <span class="variable">$ruby_version</span>;</span><br><span class="line">  rbenv init</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Install bunlder</span></span><br><span class="line">gem install bundler</span><br><span class="line"><span class="comment"># Install all gems</span></span><br><span class="line">bundle install</span><br><span class="line"><span class="comment"># Install all pods</span></span><br><span class="line">bundle <span class="built_in">exec</span> pod install</span><br></pre></td></tr></table></figure><h2 id="卸载-rvm"><a href="#卸载-rvm" class="headerlink" title="卸载  rvm"></a>卸载  rvm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rvm implode</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">disable</span> this <span class="keyword">in</span> .bash_profile | .zshrc</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[[ -s<span class="string">&quot;<span class="variable">$HOME</span>/.rvm/scripts/rvm&quot;</span>]] &amp;&amp; .<span class="string">&quot;<span class="variable">$HOME</span>/.rvm/scripts/rvm&quot;</span># Load RVM <span class="keyword">function</span></span></span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Created by https://www.toptal.com/developers/gitignore/api/xcode,swift,swiftpackagemanager,cocoapods,appcode</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Edit at https://www.toptal.com/developers/gitignore?templates=xcode,swift,swiftpackagemanager,cocoapods,appcode</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## AppCode ###</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User-specific stuff</span></span><br><span class="line">.idea/**/workspace.xml</span><br><span class="line">.idea/**/tasks.xml</span><br><span class="line">.idea/**/usage.statistics.xml</span><br><span class="line">.idea/**/dictionaries</span><br><span class="line">.idea/**/shelf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Generated files</span></span><br><span class="line">.idea/**/contentModel.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sensitive or high-churn files</span></span><br><span class="line">.idea/**/dataSources/</span><br><span class="line">.idea/**/dataSources.ids</span><br><span class="line">.idea/**/dataSources.local.xml</span><br><span class="line">.idea/**/sqlDataSources.xml</span><br><span class="line">.idea/**/dynamic.xml</span><br><span class="line">.idea/**/uiDesigner.xml</span><br><span class="line">.idea/**/dbnavigator.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Gradle</span></span><br><span class="line">.idea/**/gradle.xml</span><br><span class="line">.idea/**/libraries</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Gradle and Maven with auto-import</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">When using Gradle or Maven with auto-import, you should exclude module files,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">since they will be recreated, and may cause churn.  Uncomment <span class="keyword">if</span> using</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">auto-import.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/artifacts</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/compiler.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/jarRepositories.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/modules.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/*.iml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/modules</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.iml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.ipr</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CMake</span></span><br><span class="line">cmake-build-*/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mongo Explorer plugin</span></span><br><span class="line">.idea/**/mongoSettings.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File-based project format</span></span><br><span class="line">*.iws</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IntelliJ</span></span><br><span class="line">out/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">mpeltonen/sbt-idea plugin</span></span><br><span class="line">.idea_modules/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JIRA plugin</span></span><br><span class="line">atlassian-ide-plugin.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cursive Clojure plugin</span></span><br><span class="line">.idea/replstate.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Crashlytics plugin (<span class="keyword">for</span> Android Studio and IntelliJ)</span></span><br><span class="line">com_crashlytics_export_strings.xml</span><br><span class="line">crashlytics.properties</span><br><span class="line">crashlytics-build.properties</span><br><span class="line">fabric.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Editor-based Rest Client</span></span><br><span class="line">.idea/httpRequests</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Android studio 3.1+ serialized cache file</span></span><br><span class="line">.idea/caches/build_file_checksums.ser</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## AppCode Patch ###</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.iml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">modules.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.idea/misc.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.ipr</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Sonarlint plugin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://plugins.jetbrains.com/plugin/7973-sonarlint</span></span><br><span class="line">.idea/**/sonarlint/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SonarQube Plugin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin</span></span><br><span class="line">.idea/**/sonarIssues.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Markdown Navigator plugin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://plugins.jetbrains.com/plugin/7896-markdown-navigator-enhanced</span></span><br><span class="line">.idea/**/markdown-navigator.xml</span><br><span class="line">.idea/**/markdown-navigator-enh.xml</span><br><span class="line">.idea/**/markdown-navigator/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cache file creation bug</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See https://youtrack.jetbrains.com/issue/JBR-2257</span></span><br><span class="line">.idea/$CACHE_FILE$</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CodeStream plugin</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://plugins.jetbrains.com/plugin/12206-codestream</span></span><br><span class="line">.idea/codestream.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## CocoaPods ###</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># CocoaPods GitIgnore Template</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CocoaPods - Only use to conserve bandwidth / Save <span class="keyword">time</span> on Pushing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          - Also handy <span class="keyword">if</span> you have a large number of dependant pods</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          - AS PER https://guides.cocoapods.org/using/using-cocoapods.html NEVER IGNORE THE LOCK FILE</span></span><br><span class="line">Pods/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## Swift ###</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Xcode</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># User settings</span></span></span><br><span class="line">xcuserdata/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)</span></span></span><br><span class="line">*.xcscmblueprint</span><br><span class="line">*.xccheckout</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)</span></span></span><br><span class="line">build/</span><br><span class="line">DerivedData/</span><br><span class="line">*.moved-aside</span><br><span class="line">*.pbxuser</span><br><span class="line">!default.pbxuser</span><br><span class="line">*.mode1v3</span><br><span class="line">!default.mode1v3</span><br><span class="line">*.mode2v3</span><br><span class="line">!default.mode2v3</span><br><span class="line">*.perspectivev3</span><br><span class="line">!default.perspectivev3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Obj-C/Swift specific</span></span></span><br><span class="line">*.hmap</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># App packaging</span></span></span><br><span class="line">*.ipa</span><br><span class="line">*.dSYM.zip</span><br><span class="line">*.dSYM</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Playgrounds</span></span></span><br><span class="line">timeline.xctimeline</span><br><span class="line">playground.xcworkspace</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Swift Package Manager</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add this line <span class="keyword">if</span> you want to avoid checking <span class="keyword">in</span> <span class="built_in">source</span> code from Swift Package Manager dependencies.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Packages/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Package.pins</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Package.resolved</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.xcodeproj</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">hence it is not needed unless you have added a package configuration file to your project</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.swiftpm</span></span><br><span class="line"></span><br><span class="line">.build/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CocoaPods</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">We recommend against adding the Pods directory to your .gitignore. However</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you should judge <span class="keyword">for</span> yourself, the pros and cons are mentioned at:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pods/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add this line <span class="keyword">if</span> you want to avoid checking <span class="keyword">in</span> <span class="built_in">source</span> code from the Xcode workspace</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.xcworkspace</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Carthage</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add this line <span class="keyword">if</span> you want to avoid checking <span class="keyword">in</span> <span class="built_in">source</span> code from Carthage dependencies.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Carthage/Checkouts</span></span><br><span class="line"></span><br><span class="line">Carthage/Build/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Accio dependency management</span></span><br><span class="line">Dependencies/</span><br><span class="line">.accio/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fastlane</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">It is recommended to not store the screenshots <span class="keyword">in</span> the git repo.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Instead, use fastlane to re-generate the screenshots whenever they are needed.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information about the recommended setup visit:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://docs.fastlane.tools/best-practices/source-control/#source-control</span></span><br><span class="line"></span><br><span class="line">fastlane/report.xml</span><br><span class="line">fastlane/Preview.html</span><br><span class="line">fastlane/screenshots/**/*.png</span><br><span class="line">fastlane/test_output</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Code Injection</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">After new code Injection tools there<span class="string">&#x27;s a generated folder /iOSInjectionProject</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">https://github.com/johnno1962/injectionforxcode</span></span></span><br><span class="line"></span><br><span class="line">iOSInjectionProject/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">## SwiftPackageManager ###</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Packages</span></span></span><br><span class="line">xcuserdata</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">*.xcodeproj</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">## Xcode ###</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Xcode</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore &amp; Swift.gitignore</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"># Gcc Patch</span></span></span><br><span class="line">/*.gcno</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">## Xcode Patch ###</span></span></span><br><span class="line">*.xcodeproj/*</span><br><span class="line">!*.xcodeproj/project.pbxproj</span><br><span class="line">!*.xcodeproj/xcshareddata/</span><br><span class="line">!*.xcworkspace/contents.xcworkspacedata</span><br><span class="line">**/xcshareddata/WorkspaceSettings.xcsettings</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">End of https://www.toptal.com/developers/gitignore/api/xcode,swift,swiftpackagemanager,cocoapods,appcode</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">fastlane specific</span></span></span><br><span class="line">fastlane/report.xml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">deliver temporary files</span></span></span><br><span class="line">fastlane/Preview.html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">snapshot generated screenshots</span></span></span><br><span class="line">fastlane/screenshots/**/*.png</span><br><span class="line">fastlane/screenshots/screenshots.html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">scan temporary files</span></span></span><br><span class="line">fastlane/test_output</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Fastlane.swift runner binary</span></span></span><br><span class="line">fastlane/FastlaneRunner</span><br><span class="line"></span><br><span class="line">fastlane/dist</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Keys</span></span></span><br><span class="line">local.keys</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 主从复制</title>
      <link href="/post/mysql-master-slave-replication.html"/>
      <url>/post/mysql-master-slave-replication.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql主从复制流程"><a href="#Mysql主从复制流程" class="headerlink" title="Mysql主从复制流程"></a>Mysql主从复制流程</h2><p>基本原理流程是3个线程以及之间的关联</p><p>主：binlog线程——记录下所有改变了数据库数据的语句，放进master上的binlog中；</p><p>从：io线程——在使用start slave 之后，负责从master上拉取 binlog 内容，放进自己的relay log中；</p><p>从：sql执行线程——执行relay log中的语句；</p><h2 id="Mysql主从复制原理"><a href="#Mysql主从复制原理" class="headerlink" title="Mysql主从复制原理"></a>Mysql主从复制原理</h2><p>第一步：master在每个事务更新数据完成之前，将该操作记录串行地写入到binlog文件中。</p><p>第二步：salve开启一个I&#x2F;O Thread，该线程在master打开一个普通连接，主要工作是binlog dump process。如果读取的进度已经跟上了master，就进入睡眠状态并等待master产生新的事件。I&#x2F;O线程最终的目的是将这些事件写入到中继日志中。</p><p>第三步：SQL Thread会读取中继日志，并顺序执行该日志中的SQL事件，从而与主数据库中的数据保持一致。</p><h2 id="Mysql主从复制问题"><a href="#Mysql主从复制问题" class="headerlink" title="Mysql主从复制问题"></a>Mysql主从复制问题</h2><p>如何解决延迟同步问题</p><ul><li><p>半同步复制，也叫 semi-sync 复制，指的就是主库写入 binlog 日志之后，就会将强制此时立即将数据同步到从库，从库将日志写入自己本地的 relay log 之后，接着会返回一个 ack 给主库，主库接收到至少一个从库的 ack 之后才会认为写操作完成了。</p></li><li><p>并行复制，是指在从服务器上开启多个线程，同时从主服务器上复制数据，以提高数据同步的速度。并行复制可以通过在从服务器上设置多个 IO 线程和 SQL 线程来实现。IO 线程负责从主服务器上读取 binlog，SQL 线程负责将读取到的 binlog 解析成 SQL 语句，并在从服务器上执行。并行复制可以提高数据同步的速度，但是也会增加从服务器的负担。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 分库分表</title>
      <link href="/post/mysql-sharding-and-partitioning.html"/>
      <url>/post/mysql-sharding-and-partitioning.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-分表分库"><a href="#Mysql-分表分库" class="headerlink" title="Mysql 分表分库"></a>Mysql 分表分库</h2><h4 id="分库"><a href="#分库" class="headerlink" title="分库"></a>分库</h4><p>单个数据处理能力有限，所在的服务上磁盘空间有限，单库存在 I&#x2F;O 操作瓶颈。</p><h4 id="分表"><a href="#分表" class="headerlink" title="分表"></a>分表</h4><p>单表数据超过一定量(几百万)会导致索引膨胀，查询缓慢，超时。</p><h2 id="拆分方案"><a href="#拆分方案" class="headerlink" title="拆分方案"></a>拆分方案</h2><h3 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h3><h4 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h4><ul><li>⼤表拆⼩表，基于列的字段进⾏</li><li>⼀般表中字段较多，将不常⽤的，数据较⼤的，长度较长的，拆分到扩展表</li></ul><h4 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h4><ul><li>⼀般情况下，针对⼀个系统中不同业务进⾏拆分</li><li>拆分之后，可放到多个服务器上</li></ul><h3 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h3><h4 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h4><p>针对数据量巨⼤的单张表（⽐如订单），按照某种规则（RANGE，HASH取模），切分到多张表中，这些表还在⼀个数据库中</p><h4 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h4><p>将单张表的数据切分到多个服务器上，每个服务器都有相应的库和表，只是表中的数据集合不同</p><p>⽔平分库能够有效的缓解单机和单库的性能瓶颈，I&#x2F;O，连接数和硬件资源等瓶颈</p><h3 id="水平分库分表切分规则"><a href="#水平分库分表切分规则" class="headerlink" title="水平分库分表切分规则"></a>水平分库分表切分规则</h3><p>range：根据范围，⽐如0-1000⼀个表，1001到2000⼀个表<br>hash取模：⽐如取ID，进⾏hash取模，根据模数分配到不同的数据库中<br>地理区域：按照地理范围进⾏划分<br>时间范围：按照时间进⾏切分</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 事务隔离</title>
      <link href="/post/mysql-transaction-isolation.html"/>
      <url>/post/mysql-transaction-isolation.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql事务隔离"><a href="#Mysql事务隔离" class="headerlink" title="Mysql事务隔离"></a>Mysql事务隔离</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 查询优化</title>
      <link href="/post/mysql-query-optimization.html"/>
      <url>/post/mysql-query-optimization.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL查询优化"><a href="#MySQL查询优化" class="headerlink" title="MySQL查询优化"></a>MySQL查询优化</h2><p>查询优化就是MySQl会将程序员编写的⼀些⽐较耗费性能的语句进⾏查询重写</p><ol><li>条件化简</li><li>移除不必要的括号</li><li>常量传递：<br>（1）某个表达式是某个列和某个常量的等值匹配，会直接⽤常量替换列名</li><li>移除没⽤的条件：<br>（1）⽐如永远为true或false：</li><li>表达式计算：<br>（1）表达式只包含常量的话，值会被计算出来<br>（2）如果某个列在函数中或者以运算形式出现，优化器不会进⾏化简</li><li>having和where⼦句的合并：<br>（1）查询语句中没有sum、max这样的聚集函数以及group⼦句的话，优化器会将having和where⼦句合并<br>（2）having⼦句⽤于分组后过滤，where⽤于分组前合并</li><li>常量表检测：<br>（1）使⽤主键等值匹配、使⽤唯⼀⼆级索引列等值匹配进⾏查询的表称为常量表<br>（2）优化器会优先执⾏常量表查询，因为速度⾮常快</li><li>外连接消除</li><li>优化器会将右连接转换为左连接查询</li><li>空值拒绝<br>（1）在外连接查询中，指定的where⼦句中包含被驱动表的列不为null值的条件（就是不允许查出来的记录中含有null值）<br>（2）被驱动表的where⼦句符合空值拒绝的条件后，外连接和内连接可以相互转换</li></ol><h4 id="⼦查询优化"><a href="#⼦查询优化" class="headerlink" title="⼦查询优化"></a>⼦查询优化</h4><ol start="11"><li>⼦查询简介<br>在⼀个查询语句中的某个位置可以出现另⼀个查询语句，这另⼀个查询就叫⼦查询<br>（1）按出现位置分类</li></ol><ul><li>在select⼦句中<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> m1 <span class="keyword">from</span> t1 limit <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>在from⼦句中  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> m, n <span class="keyword">from</span> (<span class="keyword">select</span> ...);</span><br></pre></td></tr></table></figure>将这种⼦查询的结果当做⼀个表，在from⼦句中的⼦查询称为派⽣表</li><li>在where或on⼦句中  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> m1 <span class="keyword">in</span> (<span class="keyword">select</span> ...);</span><br></pre></td></tr></table></figure></li></ul><p>（2）按返回的结果集分类</p><ul><li>标量⼦查询<br>  只返回⼀个单⼀值  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> (<span class="keyword">select</span> m1 <span class="keyword">from</span> t1 limit <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>⾏⼦查询<br>  返回⼀条记录，需要包含多个列  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> (m1, n1) <span class="operator">=</span> (<span class="keyword">select</span> m2, n2 <span class="keyword">from</span> t2 limit <span class="number">1</span>);</span><br></pre></td></tr></table></figure>  使⽤limit 1保证⼦查询的结果只有⼀条记录</li><li>列⼦查询<br>  返回⼀个列的数据，可能包含多条纪录  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> m1 <span class="keyword">in</span> (<span class="keyword">select</span> m2 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure></li><li>表⼦查询<br>  ⼦查询的结果既有多条纪录，又有多个列  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> (m1, n1) <span class="operator">=</span> (<span class="keyword">select</span> m2, n2 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure></li><li>按外层查询关系分类</li><li>不相关⼦查询<br>⼦查询可以单独运⾏出结果，不依赖于外层查询的值</li></ul><p>上⾯都是例⼦</p><ul><li>相关⼦查询<br>⼦查询的执⾏需要依赖于外层查询的值<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> m1 <span class="keyword">in</span> (<span class="keyword">select</span> m2 <span class="keyword">from</span> t2 <span class="keyword">where</span> n1 <span class="operator">=</span> n2);</span><br></pre></td></tr></table></figure></li></ul><p>⼦查询的注意事项：</p><ol><li>必须⽤⼩括号括起来</li><li>select⼦句中的⼦查询必须是标量⼦查询</li><li>要想得到标量⼦查询&#x2F;⾏⼦查询，应该使⽤limit 1</li><li>对于[not] in&#x2F;any&#x2F;som&#x2F;all⼦查询来说，⼦查询不允许出现limit</li><li>⼦查询中不必使⽤order by：⼦查询相当于⼀个集合，集合没必要排序</li><li>⼦查询中不必使⽤distinct，因为集合也不需要去重</li><li>⼦查询中没有聚集函数以及having⼦句时，不必使⽤group by⼦句</li></ol><h4 id="⼦查询的执⾏⽅式"><a href="#⼦查询的执⾏⽅式" class="headerlink" title="⼦查询的执⾏⽅式"></a>⼦查询的执⾏⽅式</h4><p>（1）不优化</p><ul><li>对于不相关⼦查询，先执⾏⼦查询，再将⼦查询的结果作为外层查询的参数</li><li>对于相关⼦查询，先从外层查询中取⼀条记录，取相关列进⾏⼦查询，如此循环</li></ul><p>（2）in⼦查询的优化<br>（3）物化</p><ul><li>将⼦查询的结果写⼊临时表中，该临时表就是物化表</li><li>基于内存的物化表建⽴哈希索引，基于磁盘的物化表建⽴B+树索引<br>（4）半连接</li><li>s1表和s2表半连接的意思是：对于s1表的某条肌理，只关⼼在s2表中是否存在与之匹配的记录，⽽不关⼼与多少条记录与之匹配</li><li>这只是MySQL内部执⾏⼦查询的⼀种⽅式，不⾯向⽤户<br>（5）实现⽅式<br>（6）table pullout（表上拉）</li><li>查询列表只有主键或唯⼀索引列是，将⼦查询中的表上拉到外层查询的from⼦句中</li></ul><p>（7）重复值消除</p><ul><li>⽤临时表消除半连接结果集的重复值</li><li>松散扫描</li><li>半连接物化</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 索引</title>
      <link href="/post/mysql-index.html"/>
      <url>/post/mysql-index.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql索引"><a href="#Mysql索引" class="headerlink" title="Mysql索引"></a>Mysql索引</h2><p>索引的出现其实就是为了提⾼数据查询的效率</p><p>MySQL 在查询⽅⾯主要就是两种⽅式：</p><ul><li>全表扫描（⼀个⼀个挨个找）</li><li>根据索引检索</li></ul><h3 id="建⽴索引注意事项"><a href="#建⽴索引注意事项" class="headerlink" title="建⽴索引注意事项"></a>建⽴索引注意事项</h3><ul><li>索引不是越多越好，虽然索引会提⾼ select 效率，但是也降低了insert以及update的效率</li><li>数据量⼩的表不需要建⽴索引，会增加额外的索引开销</li><li>不经常使⽤的列不要建⽴索引</li><li>频繁更新的列不要建⽴索引，会影响更新的效率</li></ul><h3 id="MySQL的索引有⼏种"><a href="#MySQL的索引有⼏种" class="headerlink" title="MySQL的索引有⼏种"></a>MySQL的索引有⼏种</h3><ul><li>普通索引：最基本的索引，没有任何限制</li><li>唯⼀索引：与普通索引类似，但索引列的值必须是唯⼀的，允许空值</li><li>主键索引：⼀种特殊的唯⼀索引，⼀个表只能有⼀个主键，不允许有空值</li><li>组合索引：在多个字段上创建的索引，只有在查询条件中使⽤了创建索引的第⼀个字段，索引才会被使⽤</li><li>全⽂索引：主要⽤来查找⽂本中的关键字，类似于搜索引擎</li></ul><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ul><li>尽量避免在where字句中对字段进⾏空值判断，这会导致引擎放弃使⽤索引，进⾏全表扫描</li><li>字段值分布很稀少的字段，不适合建⽴索引</li><li>不要⽤字符字段做主键</li><li>字符字段只建⽴前缀索引</li><li>不要⽤外键和UNIQUE</li><li>使⽤多列索引时，注意顺序和查询条件保持⼀致，同时删除不必要的单列索引</li></ul><h3 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h3><ul><li>模糊匹配当中以 % 开头时，索引失效</li><li>OR 有⼀边的条件字段没有索引时，索引失效</li><li>使⽤复合索引的时候，没有使⽤左侧的列查找，索引失效</li><li>在 where 当中索引列参加了运算，索引失效</li><li>在 where 当中索引列使⽤了函数，索引失效</li></ul><blockquote><p>Note:</p><ol><li>在任何数据库当中主键上都会⾃动添加索引对象</li><li>在mysql当中，⼀个字段上如果有unique约束的话，也会⾃动创建索引对象</li></ol></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 事务</title>
      <link href="/post/mysql-ransaction.html"/>
      <url>/post/mysql-ransaction.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>⼀个最⼩的不可再分的⼯作单元</li><li>通常情况下，⼀个事务对应⼀个完整的业务</li></ul><h2 id="Mysql-事务特性"><a href="#Mysql-事务特性" class="headerlink" title="Mysql 事务特性"></a>Mysql 事务特性</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul><li><p>A 原⼦性(Atomicity)<br>⼀个事务的所有操作，要么全部完成，要么都没完成，不能结束在中间环节。如果事务在执<br>⾏过程中发⽣错误，会被回滚到事务开始之前的状态</p></li><li><p>C ⼀致性(Consistency)<br>在事务开始之前以及事务结束之后，数据库的完整性不能被破坏</p></li><li><p>I 隔离性(Isolation)<br>允许多个并发事务同时对数据进⾏修改和读写的能⼒，它可以防⽌由于多个事务并发执⾏时<br>由于交叉执⾏⽽导致的数据不⼀致</p></li><li><p>D 持久性(Durability)<br>事务处理结束了以后，对数据的修改是永久的，即使是发⽣了系统故障，数据也不会丢失</p></li></ul><h2 id="MySQL四⼤隔离级别"><a href="#MySQL四⼤隔离级别" class="headerlink" title="MySQL四⼤隔离级别"></a>MySQL四⼤隔离级别</h2><p>术语说明：<br>脏读：⼀个事务读取另⼀个事务还没有提交的数据<br>不可重复读：同⼀个事务内，两个相同的查询返回了不同的结果</p><ul><li><p>RU 读不提交（Read Uncommited）<br>在该隔离级别下，事务之间完全不隔离，会产⽣脏读，⼀般情况不会使⽤</p></li><li><p>RC 读提交（Read Commited）<br>本事务读取到的是其它事务提交的最新数据，但有⼀个问题在同⼀个事务中，前后两相同的<br>select可能会读到不同的结果</p></li><li><p>RR 可重复读（Repeatable Read）<br>在同⼀个事务中，select的结果是事务开始时时间点的状态，因此，同⼀个事务同样的<br>select操作可以读到⼀致的结果</p></li><li><p>serializable串⾏化<br>读操作会隐式获取共享锁，保证不同事务之间的互斥</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 锁</title>
      <link href="/post/mysql-lock.html"/>
      <url>/post/mysql-lock.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-锁"><a href="#Mysql-锁" class="headerlink" title="Mysql 锁"></a>Mysql 锁</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 基础</title>
      <link href="/post/mysql.html"/>
      <url>/post/mysql.html</url>
      
        <content type="html"><![CDATA[<h2 id="Mysql-基础"><a href="#Mysql-基础" class="headerlink" title="Mysql 基础"></a>Mysql 基础</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Block</title>
      <link href="/post/Block.html"/>
      <url>/post/Block.html</url>
      
        <content type="html"><![CDATA[<h4 id="blcok-本质"><a href="#blcok-本质" class="headerlink" title="blcok 本质"></a>blcok 本质</h4><p>block 本质是一个 OC对象，他内部也有个<code>isa</code>指针<br>blcok 是封装了函数调用以及函数调用环境的OC对象</p><table><thead><tr><th align="center">变量类型</th><th align="center">捕获到block内部</th><th align="center">访问方式</th></tr></thead><tbody><tr><td align="center">局部变量  auto</td><td align="center">✅</td><td align="center">值传递</td></tr><tr><td align="center">局部变量 static</td><td align="center">✅</td><td align="center">指针传递</td></tr><tr><td align="center">全局变量</td><td align="center">❌</td><td align="center">直接访问</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS签名</title>
      <link href="/post/iOS%E7%AD%BE%E5%90%8D.html"/>
      <url>/post/iOS%E7%AD%BE%E5%90%8D.html</url>
      
        <content type="html"><![CDATA[<h2 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h2><p>对称密码中，加密用的密钥和解密用的密钥是相同的</p><ul><li>DES 是一种将64bit明文加密成64bit密文的对称密码算法，密钥长度是56bit<br>规格上来说，密钥长度是64bit，但每隔7bit回设置一个用于错误检查的bit，因此密钥长度实质上是56bit 由于DES每次只能加密64bit的数据，遇到比较大的数据，需要对DES加密进行迭代(反复加密) 目前已经可以在短时间内破解，不建议使用</li><li>3DES 将 DES重复3次所得的一种密码算法，也叫3重DES(三个不同的密钥依次 加密 -&gt; 解密 -&gt; 加密) 处理速度不高</li><li>AES</li></ul><h2 id="密钥配送问题"><a href="#密钥配送问题" class="headerlink" title="密钥配送问题"></a>密钥配送问题</h2><ul><li>事先共享密钥</li><li>密钥分配中心</li><li>Diffie-Hellman密钥交换</li><li>公钥密码</li></ul><h2 id="公钥密码-非对称密码"><a href="#公钥密码-非对称密码" class="headerlink" title="公钥密码(非对称密码)"></a>公钥密码(非对称密码)</h2><p>公钥密码中，加密用的密钥和解密用的密钥是不同的</p><p>公钥密码中，密钥分为<strong>加密密钥</strong>、<strong>解密密钥</strong>2种，它们并不是同一个密钥</p><p>加密密钥，一般是公开的，因此该密钥成为公钥(public key)</p><p>解密密钥，由消息接收这自己保管，不公开，因此也成为私钥(private key)</p><p>公钥和私钥是一一对应的，是不能单独生成的，一对公钥和私钥统称为密钥对(key pair)</p><p>由公钥加密的密文，必须使用与该公钥对应的私钥才能解密<br>由私钥加密的密文，必须使用与该私钥对应的公钥才能解密</p><p>目前使用最发广泛的公钥密码算法是<strong>RSA</strong></p><h2 id="解决密钥配送的问题"><a href="#解决密钥配送的问题" class="headerlink" title="解决密钥配送的问题"></a>解决密钥配送的问题</h2><ul><li>由消息的接受者，生成一对公钥、私钥</li><li>将公钥发送给消息的发送者</li><li>消息的发送者使用公钥加密消息</li></ul><h2 id="混合密码系统"><a href="#混合密码系统" class="headerlink" title="混合密码系统"></a>混合密码系统</h2><p>将对称加密和公钥密码的优势相结合的方法<br>解决了公钥密码速度慢的问题<br>通过公钥密码解决了对称密码的密钥配送问题</p><p>网络上的密码通信所使用的<strong>SSL</strong>&#x2F;<strong>TLS</strong>都是运用了混合密码系统</p><h3 id="混合密码-加密"><a href="#混合密码-加密" class="headerlink" title="混合密码-加密"></a>混合密码-加密</h3><p>会话密钥(session key)</p><ul><li>本次通信随机生成的临时密钥</li><li>作为对称密码的密钥，用于加密消息，提高速度</li></ul><p>加密步骤(发送消息)</p><ol><li>首先，消息发送者要拥有消息接收者的公钥</li><li>生成会话密钥，作为对称密码的密钥，加密消息</li><li>用消息接收者的公钥，加密会话密钥</li><li>将2，3步生成的加密结果，一并发给消息接收者</li></ol><p>发送出去的内容包括</p><ol><li>用会话密钥加密的消息 (加密方法：对称密码)</li><li>用公钥加密的会话密钥 (加密方法：公钥密码)</li></ol><h3 id="混合密码-解密"><a href="#混合密码-解密" class="headerlink" title="混合密码-解密"></a>混合密码-解密</h3><ol><li>接收者用私钥解密出会话密钥</li><li>用会话密钥解密出消息内容</li></ol><h2 id="单向散列函数-哈希函数，消息摘要函数"><a href="#单向散列函数-哈希函数，消息摘要函数" class="headerlink" title="单向散列函数(哈希函数，消息摘要函数)"></a>单向散列函数(哈希函数，消息摘要函数)</h2><p>单向散列哈函数，可以根据消息内容计算出散列值<br>散列值的长度和消息长度无关，单向散列函数都会计算出固定长度的散列值<br>计算速度快<br>消息不用，散列值不同<br>具备单向性<br>常见的几种单向散列函数<br>MD4、MD5<br>SHA-1<br>SHA-2</p><ul><li>SHA-256、SHA-384、SHA-512</li></ul><h3 id="单向散列函数的应用"><a href="#单向散列函数的应用" class="headerlink" title="单向散列函数的应用"></a>单向散列函数的应用</h3><p>防止数据被篡改<br>口令加密(密码加密)</p><h3 id="数组签名-识别篡改、伪装、否认"><a href="#数组签名-识别篡改、伪装、否认" class="headerlink" title="数组签名 识别篡改、伪装、否认"></a>数组签名 识别篡改、伪装、否认</h3><p>生成签名<br>由消息的发送者完成，通过 “签名密钥” 生成</p><p>验证签名<br>由消息的接收者完成，通过 “验证密钥” 验证</p><p>保证这个签名是消息发送者自己签的？<br>用消息发送者的私钥进行签名</p><p>在数组签名中，任何人都可以使用公钥验证签名</p><!-- ![](./_image/2020-09-07/截屏2020-09-07 下午4.02.12.png)![](./_image/2020-09-07/截屏2020-09-07 下午4.05.02.png) --><p>数字签名，其实就是酱公钥密码反过来使用</p><table><thead><tr><th align="center"></th><th align="center">私钥</th><th align="center">公钥</th></tr></thead><tbody><tr><td align="center">公钥密码</td><td align="center">接收者解密时使用</td><td align="center">发送者加密时使用</td></tr><tr><td align="center">数字签名</td><td align="center">签名者生成签名时使用</td><td align="center">验证这验证签名时候使用</td></tr><tr><td align="center">谁持有密钥？</td><td align="center">个人持有</td><td align="center">只要需要，任何人可以持有</td></tr></tbody></table><p>数字签名的作用不是为了保密性，仅仅是为了能够识别内容有没有被篡改<br>确保数据完整性<br>识别消息是否被篡改<br>防止消息发送人否认</p><h2 id="证书-Certificate-解决中间人攻击问题"><a href="#证书-Certificate-解决中间人攻击问题" class="headerlink" title="证书(Certificate) - 解决中间人攻击问题"></a>证书(Certificate) - 解决中间人攻击问题</h2><p>公钥证书(Public-key Certificate, PKC)<br>里面有个人信息，以及此人的公钥<br>认证机构(Certificate Authority, CA)施加数字签名</p><!-- ![](./_image/2020-09-07/截屏2020-09-07 下午5.09.51.png) --><h2 id="iOS签名机制"><a href="#iOS签名机制" class="headerlink" title="iOS签名机制"></a>iOS签名机制</h2><ol><li>对 <strong>APP</strong> 中的 代码，资源进行签名，<strong>Mac</strong>私钥签名</li><li>苹果私钥对Mac公钥签名(devices、app id、entitlements) 生成证书</li><li>苹果的私钥对证书进行签名 mobileprovision<!-- ![](./_image/2020-09-07/截屏2020-09-07 下午5.52.22.png) --></li></ol><p> .certSigningRequest文件  Mac 公钥</p><p>.cer文件 利用 Apple私钥(CA)，对 Mac 公钥生成的数字签名</p><p>.mobileprovise 利用 Apple私钥(CA)，对 [.cer证书 + devices + AppID + entitlements] 进行数字签名</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小技巧</title>
      <link href="/post/%E5%B0%8F%E6%8A%80%E5%B7%A7.html"/>
      <url>/post/%E5%B0%8F%E6%8A%80%E5%B7%A7.html</url>
      
        <content type="html"><![CDATA[<p>formatter.locale &#x3D; NSLocale.system<br>这样手机设置12小时制，也能转出24小时格式了，不用手动去掉am pm了</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Category</title>
      <link href="/post/Category.html"/>
      <url>/post/Category.html</url>
      
        <content type="html"><![CDATA[<h2 id="Category的实现原理"><a href="#Category的实现原理" class="headerlink" title="Category的实现原理"></a>Category的实现原理</h2><p>通过runtime动态将分类的方法合并到类对象，元类中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct _category_t &#123;</span><br><span class="line">    const char *name;</span><br><span class="line">    struct _class_t *cls;</span><br><span class="line">    const struct _method_list_t *instance_methods;</span><br><span class="line">    const struct _protocol_list_t *protocols;</span><br><span class="line">    const struct _prop_list_t *properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Category-和-Extension的却别是什么"><a href="#Category-和-Extension的却别是什么" class="headerlink" title="Category 和 Extension的却别是什么"></a>Category 和 Extension的却别是什么</h2><h2 id="Category中有load方法吗？-load方法是什么时候调用？-load方法能集成吗？"><a href="#Category中有load方法吗？-load方法是什么时候调用？-load方法能集成吗？" class="headerlink" title="Category中有load方法吗？ load方法是什么时候调用？ load方法能集成吗？"></a>Category中有load方法吗？ load方法是什么时候调用？ load方法能集成吗？</h2><h2 id="load、initialize方法的区别是什么？-他们再-category-中的调用顺序？以及出现继承是他们之间的调用过程？"><a href="#load、initialize方法的区别是什么？-他们再-category-中的调用顺序？以及出现继承是他们之间的调用过程？" class="headerlink" title="load、initialize方法的区别是什么？ 他们再 category 中的调用顺序？以及出现继承是他们之间的调用过程？"></a>load、initialize方法的区别是什么？ 他们再 category 中的调用顺序？以及出现继承是他们之间的调用过程？</h2><h2 id="Category-能否添加成员变量？-如果可以，如何给-Category添加成员变量"><a href="#Category-能否添加成员变量？-如果可以，如何给-Category添加成员变量" class="headerlink" title="Category 能否添加成员变量？ 如果可以，如何给 Category添加成员变量"></a>Category 能否添加成员变量？ 如果可以，如何给 Category添加成员变量</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KVO</title>
      <link href="/post/KVO.html"/>
      <url>/post/KVO.html</url>
      
        <content type="html"><![CDATA[<h2 id="KVO的本质"><a href="#KVO的本质" class="headerlink" title="KVO的本质"></a><strong>KVO</strong>的本质</h2><p><strong>KVO</strong>— key-value Observing 键值监听，可以用于监听某个对象属性的改变<br><strong>isa</strong> NSKVONotifying_Class  是  Class 的一个子类<br><strong>Runtime</strong>动态创建一个类<br>int key<br>xx &#x3D; int<br>double key<br>xx &#x3D; double<br>重写 set方法 内部调用 <strong>Foundation</strong> _NSSet<strong>xx</strong>ValueAndNotify()</p><p>还会重写<br>重写 -(CLass)class,  返回 的是 Class 而不是 NSKVONotifying_Class<br>-(void)dealloc,<br>-(BOOL)_isKOVA</p><p><strong>_NSSetIntValueAndNotify()</strong> 相当于<br>[self willChangeValueForKey:@”key”]</p><p>[super setKey:key];</p><p>[self didChangeValueForKey:@”key”]</p><p>didChangeValueForKey 方法内部会通知监听器<br>observe observeValueForKeyPath: ofObject: change: content:</p><p>利用<strong>RuntimeAPI</strong>动态生成一个子类， 并且让 实例对象的 isa 指向这个全新的子类</p><p>当修改 实例对象的属性时，会调用 Foundation 的 _NSSet<strong>XX</strong>ValueAndNotify() 函数</p><p>willChangeValueForKey:<br>父类原来的setter<br>didChangeValueForKey<br>内部会出发监听器(Oberser)的监听方法(observe observeValueForKeyPath: ofObject: change: content:)</p><h2 id="如何手动触发KVO"><a href="#如何手动触发KVO" class="headerlink" title="如何手动触发KVO"></a>如何手动触发<strong>KVO</strong></h2><p>调用<br>willChangeValueForKey:<br>didChangeValueForKey:</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> KVO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weak指针的原理</title>
      <link href="/post/weak%E6%8C%87%E9%92%88%E7%9A%84%E5%8E%9F%E7%90%86.html"/>
      <url>/post/weak%E6%8C%87%E9%92%88%E7%9A%84%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<p>所有的弱引用存放在一个哈希表<br>对象销毁是 从哈希表取出所有弱引用销毁</p>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> weak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autorelease</title>
      <link href="/post/Autorelease.html"/>
      <url>/post/Autorelease.html</url>
      
        <content type="html"><![CDATA[<h2 id="Autorelease"><a href="#Autorelease" class="headerlink" title="Autorelease"></a>Autorelease</h2><h4 id="autorelease在什么时候释放"><a href="#autorelease在什么时候释放" class="headerlink" title="autorelease在什么时候释放"></a>autorelease在什么时候释放</h4>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>耗电优化</title>
      <link href="/post/%E8%80%97%E7%94%B5%E4%BC%98%E5%8C%96.html"/>
      <url>/post/%E8%80%97%E7%94%B5%E4%BC%98%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="少用定时器"><a href="#少用定时器" class="headerlink" title="少用定时器"></a>少用定时器</h2><h2 id="优化I-O操作"><a href="#优化I-O操作" class="headerlink" title="优化I&#x2F;O操作"></a>优化I&#x2F;O操作</h2><ul><li>尽量不要频繁写入小数据，最好批量一次性写入</li><li>读写大量重要数据是，考虑用dispatch_io，其提供了基于GCD的异步操作文件I&#x2F;O的API。用dispatch_io系统会优化磁盘访问</li><li>数据量比较大，使用数据库</li></ul><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><ul><li>减少、压缩网络数据</li><li>如果多次请求的结果相同，尽量使用缓存</li><li>使用断点续传，否则网络不稳定时可能多次传输相同的内容</li><li>网络不可用是，不要尝试执行网络请求</li><li>让用户可以取消长时间运行或者速度很慢的网络操作，设置合适的超时时间</li><li>批量传输，比如，下载视频流时，不要传输很小的数据包，直接下载整个文件或者一块一块的下载。如果下载广告，一次性下载完成，然后慢慢展示。如果是电子邮件，一次下载多封，不要一封一封的下载</li></ul><h2 id="定位优化"><a href="#定位优化" class="headerlink" title="定位优化"></a>定位优化</h2><ul><li>如果只需要快速确定用户位置，最好使用CLLocationManager的requestLocation方法。定位完成后，会自动让定位硬件断电</li><li>如果不是导航应用，尽量不要使用实时更新位置，定位完毕就关闭定位服务</li><li>尽量降低定位精度，尽量不要使用精度最高的kCLLocationAccuracyBest</li><li>需要后台定位时，尽量设置pausesLocationUpdatesAutomtically为YES，如果用户不太可能移动的时候系统会自动暂停位置更新</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP启动优化</title>
      <link href="/post/APP%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96.html"/>
      <url>/post/APP%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="APP的启动"><a href="#APP的启动" class="headerlink" title="APP的启动"></a>APP的启动</h2><h3 id="APP的启动分为2种"><a href="#APP的启动分为2种" class="headerlink" title="APP的启动分为2种"></a>APP的启动分为2种</h3><ul><li>冷启动(Cold Launch)：从零开始启动APP</li><li>热启动(Warm Launch)：APP已经在内存中，再次点击图标启动APP</li></ul><h3 id="APP的启动时间优化，主要是针对冷启动进行优化"><a href="#APP的启动时间优化，主要是针对冷启动进行优化" class="headerlink" title="APP的启动时间优化，主要是针对冷启动进行优化"></a>APP的启动时间优化，主要是针对冷启动进行优化</h3><ul><li>通过添加环境变量可以打印出APP的启动时间分析(Edit scheme -&gt; Run -&gt; Arguments)<ul><li>DYLD_PRINT_STATISTICS设置为1</li><li>DYLD_PRINT_STATISTICS_DETAILS设置为1，查看跟详细的信息</li></ul></li></ul><h2 id="APP的冷启动可以概况为3大阶段"><a href="#APP的冷启动可以概况为3大阶段" class="headerlink" title="APP的冷启动可以概况为3大阶段"></a>APP的冷启动可以概况为3大阶段</h2><h3 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h3><p>dyld(dynamic link editor)，Apple的动态链接器，可以用来装载Mach-O文件(可执行文件、动态库等)<br>启动APP，dyld做的事情</p><ul><li>装载APP的可执行文件，同时会递归加载所有依赖的动态库</li><li>当dyld把可执行文件、动态库都装载完毕后，会通知Runtime进行下一个处理</li></ul><h3 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h3><ul><li>调用map_images进行可执行文件内容的解析和处理</li><li>在load_images中调用call_load_methods，调用所有Class和Category的+load方法</li><li>进行各种objc结构的初始化(注册Objc类、初始化类对象等等)</li><li>调用C++静态初始化器和__attribute__((constructor))修饰的函数</li></ul><p>到此为止，可执行文件和动态库中所有的符号(Class，Protocol，Selector，IMP，…)都已经按格式成功加载到内从中，被runtime所管理</p><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>APP的启动由dyld主导，将可执行文件加载到内存，顺便加载所有依赖的动态库<br>并由runtime负责加载成objc定义的结构<br>所有初始化结束后，dyld就会调用Main函数</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="dyldb"><a href="#dyldb" class="headerlink" title="dyldb"></a>dyldb</h3><ul><li>减少动态库、合并一些动态库</li><li>减少Objc类、分类的数量、减少Selector数量</li><li>减少C++虚函数数量</li><li>swift尽量使用struct</li></ul><h3 id="runtime-1"><a href="#runtime-1" class="headerlink" title="runtime"></a>runtime</h3><ul><li>用 +initialize方法和dispatch_once取代所有的__attribute__((constructor))、C++静态构造器、Object的+load</li></ul><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><ul><li>尽可能将一些操作延迟，不要全部放在finishLaunching方法中</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程组</title>
      <link href="/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%84.html"/>
      <url>/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%84.html</url>
      
        <content type="html"><![CDATA[<h2 id="队列组-–-dispatch-group-t"><a href="#队列组-–-dispatch-group-t" class="headerlink" title="队列组 – dispatch_group_t"></a>队列组 – dispatch_group_t</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS的那些锁</title>
      <link href="/post/iOS%E7%9A%84%E9%82%A3%E4%BA%9B%E9%94%81.html"/>
      <url>/post/iOS%E7%9A%84%E9%82%A3%E4%BA%9B%E9%94%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>  在线程获取锁但没有获取到时，线程会进入休眠状态，等锁被释放时线程会被唤醒<br>  防止两个线程同时对用一个公共资源进行读写的机制。当获取锁操作失败时，线程会进入睡眠，等待锁释放时被唤醒</p><h2 id="互斥锁又分为"><a href="#互斥锁又分为" class="headerlink" title="互斥锁又分为"></a>互斥锁又分为</h2><ul><li>递归锁 可重入锁，同一个线程在锁释放前可再次获取锁，即可递归调用</li><li>非递归锁 不可重入，必须等锁释放后才能再次获取锁</li></ul><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>  自旋锁的线程会一直处于等待状态(忙等待)不会进入休眠 效率高</p><h2 id="自旋锁-1"><a href="#自旋锁-1" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>线程反复检查锁变量是否可⽤。由于线程在这⼀过程中保持执⾏， 因此是⼀种忙等待。⼀旦获取了⾃旋锁，线程会⼀直保持该锁，直⾄显式释 放⾃旋锁<br>自旋锁避免了进程上下文的调度开心，因此多余线程只会阻塞很短时间的场合是有效的</p><h2 id="自旋锁-2"><a href="#自旋锁-2" class="headerlink" title="自旋锁"></a>自旋锁</h2><ol><li>OSSpinLock</li></ol><ul><li>OSSpinLock 已被废弃<br>   自旋锁之所以不安全，是因为自旋锁由于获取锁时，线程一直处于忙等待状态，造成了任务的优先级反转，而OSSpinLock忙等待的实际就可能造成高优先级一直running等待，占用CPU时间片，而低优先级任务无法抢占时间片，变成迟迟完不成，不释放锁的情况。</li></ul><ol start="2"><li>automic</li></ol><ul><li>只能保证setter、getter方法的线程安全，并不能保证数据安全</li></ul><ol start="3"><li>读写锁</li></ol><ul><li>读写锁实际是一种特殊的自旋锁，他把对共享资源的访问者划分成读者和写者，读者只对共享资源进行访问，写者则需要对共享资源进行写操作。这种锁相对于自旋锁而言，能提高并发性，因为在多处理器系统中，它允许同时有多个读者来访问共享资源，最大可能的读者数为实际的CPU数<ul><li>写者是排他性的，一个读写锁同时只能有一个写者或者多个读者(与CPU数相关)，但不能同时既有读者又有写者。在读写锁保持器件也是抢占时效的</li><li>如果读写锁当前没有读者，也没有写者，那么写者可以立即获得写锁，否则它必须自旋在那里，直到没有任何写者或者读者。如果读写锁没有写者，那么读者可以立即获得该读写锁，否则读者必须自旋在那里，直到写者释放该读写锁</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;pthread.h&gt;</span><br><span class="line">// 全局声明读写锁</span><br><span class="line">pthread_rwlock_t lock;</span><br><span class="line">// 初始化读写锁</span><br><span class="line">pthread_rwlock_init(&amp;lock, NULL);</span><br><span class="line">// 读操作-加锁</span><br><span class="line">pthread_rwlock_rdlock(&amp;lock);</span><br><span class="line">// 读操作-尝试加锁</span><br><span class="line">pthread_rwlock_tryrdlock(&amp;lock);</span><br><span class="line">// 写操作-加锁</span><br><span class="line">pthread_rwlock_wrlock(&amp;lock);</span><br><span class="line">// 写操作-尝试加锁</span><br><span class="line">pthread_rwlock_trywrlock(&amp;lock);</span><br><span class="line">// 解锁</span><br><span class="line">pthread_rwlock_unlock(&amp;lock);</span><br><span class="line">// 释放锁</span><br><span class="line">pthread_rwlock_destroy(&amp;lock);</span><br></pre></td></tr></table></figure><p>平时很少直接使用读写锁pthread_rwlock_t，更多的是采用其他方式，例如使用栅栏函数完成读写锁的需求</p><h2 id="互斥锁-1"><a href="#互斥锁-1" class="headerlink" title="互斥锁"></a>互斥锁</h2><ol><li>pthread_mutex</li></ol><ul><li>pthread_mutex就是互斥锁本身 — 当锁被占用，而其他线程申请锁时，不是使用忙等，而是阻塞线程并睡眠<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;pthread.h&gt;</span><br><span class="line">// 全局声明互斥锁</span><br><span class="line">pthread_mutex_t _lock;</span><br><span class="line">// 初始化互斥锁</span><br><span class="line">pthread_mutex_init(&amp;_lock, NULL);</span><br><span class="line">// 加锁</span><br><span class="line">pthread_mutex_lock(&amp;_lock);</span><br><span class="line">// 做需要线程安全操作</span><br><span class="line">// ...</span><br><span class="line">// 解锁</span><br><span class="line">pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">// 释放锁</span><br><span class="line">pthread_mutex_destroy(&amp;_lock);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>@synchronized</li></ol><ul><li>递归锁</li><li>@synchronized 可能是日常开发中用的比较多的一种互斥锁，但并不是在任意场景下都能使用@synchronized，且它的性能较低</li><li>性能低是因为的层增删改查消耗了大量新能</li><li>底层维护一个<code>SyncData</code>哈希链表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SyncData</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SyncData</span>* <span class="title">nextData</span>;</span>   <span class="comment">// 指向下一个</span></span><br><span class="line">DisguisedPtr&lt;objc_object&gt; object;</span><br><span class="line"><span class="type">int32_t</span> threadCount;  <span class="comment">// number of THREADS using this block</span></span><br><span class="line"><span class="type">recursive_mutex_t</span> mutex;</span><br><span class="line">&#125; SyncData;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// Begin synchronizing on &#x27;obj&#x27;.</span><br><span class="line">// Allocates recursive mutex associated with &#x27;obj&#x27; if needed.</span><br><span class="line">// Returns OBJC_SYNC_SUCCESS once lock is acquired.</span><br><span class="line">int objc_sync_enter(id obj)</span><br><span class="line">&#123;</span><br><span class="line">int result = OBJC_SYNC_SUCCESS;</span><br><span class="line"></span><br><span class="line">if (obj) &#123;</span><br><span class="line">SyncData* data = id2data(obj, ACQUIRE);</span><br><span class="line">assert(data);</span><br><span class="line">data-&gt;mutex.lock();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// @synchronized(nil) does nothing</span><br><span class="line">if (DebugNilSync) &#123;</span><br><span class="line">_objc_inform(&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;);</span><br><span class="line">&#125;</span><br><span class="line">objc_sync_nil();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// End synchronizing on &#x27;obj&#x27;.</span><br><span class="line">// Returns OBJC_SYNC_SUCCESS or OBJC_SYNC_NOT_OWNING_THREAD_ERROR</span><br><span class="line">int objc_sync_exit(id obj)</span><br><span class="line">&#123;</span><br><span class="line">int result = OBJC_SYNC_SUCCESS;</span><br><span class="line"></span><br><span class="line">if (obj) &#123;</span><br><span class="line">SyncData* data = id2data(obj, RELEASE);</span><br><span class="line">if (!data) &#123;</span><br><span class="line">result = OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">bool okay = data-&gt;mutex.tryUnlock();</span><br><span class="line">if (!okay) &#123;</span><br><span class="line">result = OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">// @synchronized(nil) does nothing</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>NSLock</li></ol><ul><li><p>NSLokc是对互斥锁(pthread_mutex)的简单封装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    self.testArray = [NSMutableArray array];</span><br><span class="line">    NSLock *lock = [[NSLock alloc] ini];</span><br><span class="line">    for (int i = 0; i &lt; 20000; i++) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [lock lock];</span><br><span class="line">            self.testArray = [NSMutableArray array];</span><br><span class="line">            [lock unlock];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项<br> 使用互斥锁NSLock异步并发调用block快，block快内部递归调用自己</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    NSLock *lock = [[NSLock alloc] init];</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        static void (^block)(int);</span><br><span class="line"></span><br><span class="line">        block = ^(int value) &#123;</span><br><span class="line">            NSLog(@&quot;加锁前&quot;);</span><br><span class="line">            [lock lock];</span><br><span class="line">            NSLog(@&quot;加锁后&quot;);</span><br><span class="line">            if (value &gt; 0) &#123;</span><br><span class="line">                NSLog(@&quot;value--%d&quot;, value);</span><br><span class="line">                block(value - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            [lock unlock];</span><br><span class="line">        &#125;;</span><br><span class="line">        block(10);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 加锁前 -&gt; 加锁后 -&gt; value--10 -&gt; 加锁前</span><br></pre></td></tr></table></figure><p> 原因：互斥锁在递归调用是会造成堵塞，并非死锁</p><ul><li>第一次加锁之后还没有出锁就进行递归调用</li><li>第二次加锁就堵塞了线程</li></ul><p> 解决方案：使用递归锁 NSRecursiveLock 替换 NSLock</p></li></ul><ol start="4"><li>NSRecursiveLock</li></ol><ul><li>NSRecursiveLock使用和NSLock类似 使用 NSRecursiveLock 可以解决上面问题<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        static void (^block)(int);</span><br><span class="line"></span><br><span class="line">        block = ^(int value) &#123;</span><br><span class="line">            NSLog(@&quot;加锁前&quot;);</span><br><span class="line">            [lock lock];</span><br><span class="line">            NSLog(@&quot;加锁后&quot;);</span><br><span class="line">            if (value &gt; 0) &#123;</span><br><span class="line">                NSLog(@&quot;value--%d&quot;, value);</span><br><span class="line">                block(value - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            [lock unlock];</span><br><span class="line">        &#125;;</span><br><span class="line">        block(10);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 加锁前 -&gt; 加锁后 -&gt; value--10 -&gt; 加锁前 -&gt; 加锁后 -&gt; value--9 -&gt; 加锁前 -&gt; 加锁后 -&gt; ...</span><br></pre></td></tr></table></figure></li><li>注意事项<br> 递归锁在使用时需要注意思索问题 – 前后代码互相等待便会产生思索</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    NSRecursiveLock *lock = [[NSRecursiveLock alloc] init];</span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            static void (^block)(int);</span><br><span class="line"></span><br><span class="line">            block = ^(int value) &#123;</span><br><span class="line">                NSLog(@&quot;加锁前&quot;);</span><br><span class="line">                [lock lock];</span><br><span class="line">                NSLog(@&quot;加锁后&quot;);</span><br><span class="line">                if (value &gt; 0) &#123;</span><br><span class="line">                    NSLog(@&quot;value--%d&quot;, value);</span><br><span class="line">                    block(value - 1);</span><br><span class="line">                &#125;</span><br><span class="line">                [lock unlock];</span><br><span class="line">            &#125;;</span><br><span class="line">            block(10);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>Crash</code>提示野指针错误<br>   原因：for 循环在block内部对同一个对象进行了多次锁操作，知道这个资源上挂着N把锁，最后大家都无法一次性解锁—找不到解锁的出口<br>        即 线程1中加锁1、同时线程2中加锁2 -&gt; 解锁1等待解锁2 -&gt; 解锁2等待解锁1 -&gt; 无法结束解锁 – 形成思索</p><p>   解决：可以采用使用缓存的@synchronized，因为他对对象进行锁操作，会先从缓存查找是否有所syncData存在。如果有，直接返回而不加锁，保证所锁的唯一性</p><ol start="5"><li>dispatch_semaphore_t</li></ol><ul><li><p>信号量</p></li><li><p>dispatch_semaphore_create() 创建信号量</p></li><li><p>dispatch_semaphore_wait() 等待信号量，信号量减1。 当信号量 &lt; 0 时会阻塞当前线程，根据传入的等待时间决定接下来的操作–如果永久等地啊将等到信号(signal) 才执行下去</p></li><li><p>dispatch_semaphore_signal() 释放信号量，信号量加1。 当信号量 &gt;&#x3D; 0 会执行 wait 之后的代码</p><p> 要求按顺序执行</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;Felix&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        dispatch_async(queue, ^ &#123;</span><br><span class="line">            NSLog(&quot;当前%d----线程%@&quot;, i, [NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">        // 使用栅栏函数</span><br><span class="line">        // dispatch_barrier_async(queue, ^&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dispatch_semaphore_test &#123;</span><br><span class="line">    dispatch_semaphore_t sem = dispatch_semaphore_create(0);</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;Felix&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        dispatch_async(queue, ^ &#123;</span><br><span class="line">            NSLog(&quot;当前%d----线程%@&quot;, i, [NSThread currentThread]);</span><br><span class="line">            // 打印任务结束后信号量解锁</span><br><span class="line">            dispatch_semaphore_signal(sem);</span><br><span class="line">        &#125;);</span><br><span class="line">        // 加锁</span><br><span class="line">        // dispatch_semaphore_wait(sem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建信号量时传入值为1时，可以通过两次才堵塞</li><li>传入值为2时，可以通过三次才堵塞</li></ul><ol start="6"><li>NSCondition</li></ol><ul><li>NSCondition 是一个条件锁，线程1需要等到条件1满足才会往下走，否则就会堵塞等待，直至条件满足<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NSCondition</span>: <span class="title class_ inherited__">NSObject</span>, <span class="title class_ inherited__">NSLocking</span> &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> mutex <span class="operator">=</span> _MutexPointer.allocate(capacity: <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> cond <span class="operator">=</span> _ConditionVariablePointer.allocate(capacity: <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        pthread_mutex_init(mutex, <span class="literal">nil</span>)</span><br><span class="line">        pthread_cond_init(cond, <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        pthread_cond_destroy(cond)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">lock</span>() &#123;</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">unlock</span>() &#123;</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">wait</span>() &#123;</span><br><span class="line">        pthread_cond_wait(cond, mutex)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">wait</span>(<span class="params">until</span> <span class="params">limit</span>: <span class="type">Date</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">var</span> timeout <span class="operator">=</span> timeSpecFrom(date: limit) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pthread_cond_timedwait(cond, mutex, <span class="operator">&amp;</span>timeout) <span class="operator">==</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">signal</span>() &#123;</span><br><span class="line">        pthread_cond_signal(cond)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">broadcast</span>() &#123;</span><br><span class="line">        pthread_cond_broadcast(cond) <span class="comment">// wait  signal</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>NSCondition 是对 mutex 和 cond 的一种封装(cond就是用于访问和操作特定类型数据的指针)</li><li>wait 操作会阻塞线程，使其进入休眠状态，直至超时</li><li>signal 操作是唤醒一个正在休眠等待的线程</li><li>broadcast 会唤醒所有正在等待的线程</li></ul></li></ul><ol start="7"><li>NSConditionLock</li></ol><ul><li>NSCondition + Lock<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">NSConditionLock</span> : <span class="title class_ inherited__">NSObject</span>, <span class="title class_ inherited__">NSLocking</span> &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _cond <span class="operator">=</span> <span class="type">NSCondition</span>()</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _value: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> _thread: _swift_CFThreadRef<span class="operator">?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(condition: <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="params">condition</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        _value <span class="operator">=</span> condition</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">lock</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> lock(before: <span class="type">Date</span>.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">unlock</span>() &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        _thread <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> condition: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">lock</span>(<span class="params">whenCondition</span> <span class="params">condition</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> lock(whenCondition: condition, before: <span class="type">Date</span>.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">`try`</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock(before: <span class="type">Date</span>.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">tryLock</span>(<span class="params">whenCondition</span> <span class="params">condition</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock(whenCondition: condition, before: <span class="type">Date</span>.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">unlock</span>(<span class="params">withCondition</span> <span class="params">condition</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        _thread <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">        _value <span class="operator">=</span> condition</span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">lock</span>(<span class="params">before</span> <span class="params">limit</span>: <span class="type">Date</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        <span class="keyword">while</span> _thread <span class="operator">!=</span> <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _thread <span class="operator">=</span> pthread_self()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">func</span> <span class="title function_">lock</span>(<span class="params">whenCondition</span> <span class="params">condition</span>: <span class="type">Int</span>, <span class="params">before</span> <span class="params">limit</span>: <span class="type">Date</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        <span class="keyword">while</span> _thread <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">||</span> _value <span class="operator">!=</span> condition &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="operator">!</span>_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _thread <span class="operator">=</span> pthread_self()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>NSConditionLock 是 NSCondition加线程数的封装</li><li>NSConditionLock 可以设置锁条件，而NSCondition只是无脑的通知信号</li></ul><ol start="8"><li>os_unfair_lock</li></ol><ul><li>如果等待锁的线程优先级比较高，它会一直占用着CPU资源，优先级低的线程就无法释放锁</li><li>由于 OSSpinLock自旋锁的BUG，替代方案是内部封装了os_unfair_lock，而os_unfair_lock在加锁是会处于休眠状态，而不是自旋锁的等待状态</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>OSSpinLock不在安全，底层使用os_unfair_lock替代</li><li>atomic只能保证setter、getter时线程安全，所以更多的时候使用nonatiomic修饰</li><li>读写锁更多使用栅栏函数来实现</li><li>@synchronized在底层维护了一个哈希链表进行data的存储，使用recursive_mutex_t进行加锁</li><li>NSLock、NSRecursiveLock、NSCondition和NSConditionLock底层都是对pthread_mutex的封装</li><li>NScondition和NSConditionLock是条件锁，当满足某一个条件时才能执行操作，和信号量dispatch_semaphore类似</li><li>普通场景下涉及到线程安全，可以使用NSLock</li><li>循环调用时用 NSRecuriveLock</li><li>循环调用且有线程影响是，注意死锁，有死锁问题使用@synchronized</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> LOCK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html"/>
      <url>/post/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="GCD的常用函数"><a href="#GCD的常用函数" class="headerlink" title="GCD的常用函数"></a>GCD的常用函数</h3><ul><li>用同步的方式执行任务(在当前线程中执行任务，不具备开启新线程的能力)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);</span><br><span class="line">// queue: 队列</span><br><span class="line">// block: 任务</span><br></pre></td></tr></table></figure></li><li>用异步的方式执行任务(在新的线程中执行任务，具备开启新线程的能力)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</span><br></pre></td></tr></table></figure></li></ul><h3 id="GCD的队列"><a href="#GCD的队列" class="headerlink" title="GCD的队列"></a>GCD的队列</h3><h4 id="并发队列-Concurrent-Dispatch-Queue"><a href="#并发队列-Concurrent-Dispatch-Queue" class="headerlink" title="并发队列 Concurrent Dispatch Queue"></a>并发队列 Concurrent Dispatch Queue</h4><ul><li>可以让多个任务并发(同时)执行(自动开启多个线程同时执行任务)</li><li>并发功能只有在异步(dispatch_async)函数下才有效</li></ul><h4 id="串行队列-Serial-Dispatch-Queue"><a href="#串行队列-Serial-Dispatch-Queue" class="headerlink" title="串行队列 Serial Dispatch Queue"></a>串行队列 Serial Dispatch Queue</h4><ul><li>让任务一个接着一个执行(一个任务执行完毕，再执行下一个任务)</li></ul><h3 id="容易混淆的术语"><a href="#容易混淆的术语" class="headerlink" title="容易混淆的术语"></a>容易混淆的术语</h3><h4 id="有4个术语比较容易混淆：同步、异步、并发、串行"><a href="#有4个术语比较容易混淆：同步、异步、并发、串行" class="headerlink" title="有4个术语比较容易混淆：同步、异步、并发、串行"></a>有4个术语比较容易混淆：同步、异步、并发、串行</h4><ul><li>同步(dispatch_sync)和异步(dispatch_async)主要影响：能不能开启新的线程<ul><li>dispatch_sync同步：在当前线程中执行任务，不具备开启新线程的能力，同步需要立马拿出来执行，要注意是从队列中</li><li>dispatch_async异步：在新的线程中执行任务，<strong>具备</strong>开启新线程的能力，异步不需要立马拿出来执行<ul><li>在主队列(dispatch_get_main_queue())不会开启新的线程</li></ul></li></ul></li><li>并发(DISPATCH_QUEUE_CONCURRENT)和串行(DISPATCH_QUEUE_SERIAL)主要影响：任务的执行方式<ul><li>并发：多个任务并发(同时)执行</li><li>串行：一个任务执行完毕后，再执行下一个任务</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  &amp;nbsp;  | 并发队列 | 手动创建串行队列  | 主队列</span><br><span class="line">同步(sync)  |  **没有**开启新的线程&lt;br&gt;**串行**执行任务   |  **没有**开启新的线程&lt;br&gt;**串行**执行任务 | **没有**开启新的线程&lt;br&gt;**串行**执行任务</span><br><span class="line">异步(async)  | **有**开启新的线程&lt;br&gt;**并行**发行执行任务   |  **有**开启新的线程&lt;br&gt;**串行**执行任务 | **没有**开启新的线程&lt;br&gt;**串行**执行任务</span><br></pre></td></tr></table></figure><blockquote><p> 使用sync函数往当前串行队列中添加任务，会卡住当前的串行队列(产生死锁)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">// 死锁</span><br><span class="line">- (void)interview01 &#123;</span><br><span class="line">    // 在主线程执行 interview01</span><br><span class="line">    // 队列先进先出</span><br><span class="line">    dispatch_queue_t queue = dispatch_get_main_queue();</span><br><span class="line">    // queue 队列</span><br><span class="line">    // interview01 在**主队列中**，执行 log123 需要上一个任务执行完毕，</span><br><span class="line">    // 而上一个任务 interview01 执行完毕，又需要 log123 执行，因为是 sync 函数，必须里面在当前线程执行任务，执行完毕才能继续往下执行</span><br><span class="line">    dispatch_sync(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;123&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    // dispatch_sync：立马在当前线程执行任务，执行完毕才能继续往下执行</span><br><span class="line">&#125;</span><br><span class="line">// 不会死锁</span><br><span class="line">- (void)interview02 &#123;</span><br><span class="line">    // 在主线程执行</span><br><span class="line">    // 在主线程执行</span><br><span class="line">    NSLog(@&quot;123&quot;);</span><br><span class="line">    dispatch_queue_t queue = dispatch_get_main_queue();</span><br><span class="line">    // 一定是 123 -&gt; 1234 -&gt; block 里面</span><br><span class="line">    // 都在主队列中，串行执行任务，由于 async 不会卡住，所以等 interview02 任务执行完，再执行 block 里面</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, [NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;1234&quot;);</span><br><span class="line">    // dispatch_async：不要求立马在当前线程同步执行任务</span><br><span class="line">&#125;</span><br><span class="line">// 会死锁</span><br><span class="line">- (void)interview03 &#123;</span><br><span class="line">    // 在主线程执行</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    // 串行队列</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.myqueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    // 开辟了线程</span><br><span class="line">    dispatch_async(queue, ^&#123; // 0</span><br><span class="line">        // 子线程执行</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        // 1 需要立马从串行队列 queue 拿出来执，但现在还在执行 0，0执行完的前提是1要执行，因为 1 是 sync 需要立马执行</span><br><span class="line">        dispatch_sync(queue, ^&#123; // 1</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不会死锁</span><br><span class="line">- (void)interview04 &#123;</span><br><span class="line">    // 在主线程执行</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    // 串行队列</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.myqueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    // 并行</span><br><span class="line">    dispatch_queue_t queue2 = dispatch_queue_create(&quot;com.gcd.myqueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    // 开辟了线程</span><br><span class="line">    dispatch_async(queue, ^&#123; // 0</span><br><span class="line">        // 子线程执行</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        // 不会开启线程 因为是 sync</span><br><span class="line">        dispatch_sync(queue2, ^&#123; // 1</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 不会死锁</span><br><span class="line">- (void)interview05 &#123;</span><br><span class="line">    // 在主线程执行</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    // 串行队列</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;com.gcd.myqueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    // 并行</span><br><span class="line">    dispatch_queue_t queue2 = dispatch_queue_create(&quot;com.gcd.myqueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    // 开辟了线程</span><br><span class="line">    dispatch_async(queue, ^&#123; // 0</span><br><span class="line">        // 子线程执行</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        // 不会开启线程 因为是 sync，不会死锁因为是 并发队列一起执行，但一定是3先执行再执行4，因为sync同步需要立马拿出来执行</span><br><span class="line">        dispatch_sync(queue2, ^&#123; // 1</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>下面打印的结果是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (void)test &#123;</span><br><span class="line">    NSLog(@&quot;2&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;1&quot;);</span><br><span class="line">        // 子线程默认没有开启 RunLoop</span><br><span class="line">        // performSelector:withObject:afterDelay: 底层是定时器，并且已经往 RunLoop 中添加了这个定时器添 只是没有 跑起来 runloop</span><br><span class="line"></span><br><span class="line">        [self performSelector:@selector(test) withObject:nil afterDelay:0];</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;3&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// log:  1 3</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">        // 开启一个子线程，子线程默认不启动RunLoop</span><br><span class="line">        NSThread *thread = [[NSThread alloc] initWithBlock:^&#123;</span><br><span class="line">            NSLog(@&quot;1&quot;);</span><br><span class="line">        &#125;];</span><br><span class="line">        [thread start];</span><br><span class="line">        // 给子线程发消息，需要RunLoop</span><br><span class="line">        [self performSelector:@selector(test) onThread:thread withObject:nil waitUntilDone:true];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// log:  1 并且崩溃</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunLoop在实际开发中的应用</title>
      <link href="/post/RunLoop%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html"/>
      <url>/post/RunLoop%E5%9C%A8%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="RunLoop在实际开发中的应用"><a href="#RunLoop在实际开发中的应用" class="headerlink" title="RunLoop在实际开发中的应用"></a>RunLoop在实际开发中的应用</h2><h3 id="控制线程生命周期-线程保活"><a href="#控制线程生命周期-线程保活" class="headerlink" title="控制线程生命周期(线程保活)"></a>控制线程生命周期(线程保活)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLad];</span><br><span class="line">    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line">    [thread start];</span><br><span class="line">&#125;</span><br><span class="line">- (void)run &#123;</span><br><span class="line">    NSLog(@&quot;run&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// run -&gt; thread deallo</span><br><span class="line"></span><br><span class="line">// 线程保活</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // initWithTarget:self 会强引用控制器 导致循环引用</span><br><span class="line">    // self.thread = [[NSThread alloc] initWithTarget:self selector:@selector(run) object:nil];</span><br><span class="line"></span><br><span class="line">    self.stopped = false;</span><br><span class="line"></span><br><span class="line">    __weak typeof(self) weakSelf = self;</span><br><span class="line">    self.thread = [[NSThread alloc] initWithBlock:^&#123;</span><br><span class="line">        NSLog(@&quot;run&quot;);</span><br><span class="line">        // [NSRunLoop currentRunLoop] 获取线程就是创建线程</span><br><span class="line">        // 需要往RunLoop添加Source/Timer/Observer</span><br><span class="line">        [[NSRunLoop currentRunLoop] addPort:[[NSPort alloc] init] forMode:NSDefaultRunLoopMode];</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         it runs the receiver in the NSDefaultRunLoopMode by repeatedly invoking runMode:beforeDate:</span><br><span class="line">         In other words, this method effectively begins an infinite loop that processes data from the run loop’s input sources and timers.</span><br><span class="line">         [[NSRunLoop currentRunLoop] run] 相当于</span><br><span class="line">         while (1) &#123;</span><br><span class="line">             [NSRunLoop currentRunLoop] runMode:&lt;#(nonnull NSRunLoopMode)#&gt; beforeDate:&lt;#(nonnull NSDate *)#&gt;</span><br><span class="line">         &#125;</span><br><span class="line">         */</span><br><span class="line">        // NSRunLoop 的 run 方法是无法停止的，他专门用于开启一个用不销毁的线程(RunLoop)</span><br><span class="line">        // [[NSRunLoop currentRunLoop] run];</span><br><span class="line"></span><br><span class="line">        //线程保活</span><br><span class="line">        while (weakSelf &amp;&amp; !weakSelf.isStopped) &#123;</span><br><span class="line">            [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NSLog(@&quot;end&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    [self.thread start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    // 最后一个参数为 YES 会等待 线程中 test 方法执行完打印 123</span><br><span class="line">    // 最后一个参数为 NO 会直接打印 123</span><br><span class="line">    if (!self.thread) return;</span><br><span class="line">    [self performSelector:@selector(test) onThread:self.thread withObject:nil waitUntilDone:NO];</span><br><span class="line">    NSLog(@&quot;123&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)test &#123;</span><br><span class="line">    NSLog(@&quot;test&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)stop &#123;</span><br><span class="line">    if (!self.thread) return;</span><br><span class="line">    // waitUntilDone 只能为 YES</span><br><span class="line">    // NO 会造成野指针 控制销毁和子线程 stop方法同时进行 控制器坏内存</span><br><span class="line">    [self performSelector:@selector(stopThread) onThread:self.thread withObject:nil waitUntilDone:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用于停止子线程的 RunLoop</span><br><span class="line">- (void)stopThread &#123;</span><br><span class="line">    self.stopped = true;</span><br><span class="line">    CFRunLoopStop(CFRunLoopGetCurrent());</span><br><span class="line">    self.thread = nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [self stop];</span><br><span class="line">    // dealloc 执行完毕 weakSelf 为空</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决NSTimer在滑动时停止工作问题"><a href="#解决NSTimer在滑动时停止工作问题" class="headerlink" title="解决NSTimer在滑动时停止工作问题"></a>解决NSTimer在滑动时停止工作问题</h3><ul><li>NSDefaultRunLoopMode 和 UITrackingRunLoopMode 才是真正存在的模式</li><li>NSRunLoopCommonModes 并不是真正的一种 RunLoop模式，只是一个标记，能在_commonModes(RunLoop结构体中)数组中存放的模式中运行<ul><li>如果 timer 是 NSRunLoopCommonModes 该模式下的，就会存放在_commonModeItems里(RunLoop结构体中)</li></ul></li></ul><h3 id="监控应用卡顿"><a href="#监控应用卡顿" class="headerlink" title="监控应用卡顿"></a>监控应用卡顿</h3><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RunLoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KVC原理</title>
      <link href="/post/KVC%E5%8E%9F%E7%90%86.html"/>
      <url>/post/KVC%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2><p><strong>KVC(Key-Value Coding)键值编码</strong>是利用<strong>NSKeyValueCoding</strong>非正式协议实现的一种机制，对象采用过这种机制来提供对其属性的间接访问</p><ul><li><strong>KVC</strong>通过对<strong>NSObject</strong>的扩展来实现，所有继承了<strong>NSObject</strong>的类都可以使用<strong>KVC</strong></li><li><strong>NSArray</strong>、<strong>NSDictionary</strong>、<strong>NSSet</strong>、<strong>NSOrderedSet</strong>也遵循<strong>KVC</strong>协议</li><li>除了少数类型(结构体)以外都可以使用<strong>KVC</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 通过 key 设值</span><br><span class="line">- (void)setValue:(nullable id)value forKey:(NSString *)key;</span><br><span class="line">// 通过 key 取值</span><br><span class="line">- (nullable id)valueForKey:(NSString *)key;</span><br><span class="line">// 通过 keyPath 设值</span><br><span class="line">- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath;</span><br><span class="line">// 通过 keyPath 取值</span><br><span class="line">- (nullable id)valueForKeyPath:(NSString *)keyPath;</span><br></pre></td></tr></table></figure><strong>NSKeyValueCoding</strong>类别的其它方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 默认YES。如果返回YES，如果没有找到 set&lt;Key&gt; 方法的话， 会按照_key，_isKey，key，isKey的顺序搜索成员变量，返回NO则不会搜索</span><br><span class="line">+ (BOOL)accessInstanceVariablesDirectly;</span><br><span class="line">// 键值验证，可以通过高方法检验键值的正确性</span><br><span class="line">- (BOOL)validateValue:(inout id _Nullable * _Nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;</span><br><span class="line">// 如果key不存在，并且没有搜索到和key相关的字段，就会调用此方法，抛出异常。两个方法分别对应 get 和 set</span><br><span class="line">- (nullable id)valueForUndefineKey:(NSString *)key;  // get</span><br><span class="line">- (void)setValue:(nullable id)value forUndefinedKey:(NSString *)key; // get</span><br><span class="line">// setValue 方法传 nil 时调用此方法</span><br><span class="line">// 当且仅当 NSNumber 和 NSValue 类型是才会调用此方法</span><br><span class="line">- (void)setNilValueForKey:(NSString *)key;</span><br><span class="line">// 一组 key 对应的value，将其转成字典返回，可用于将 Model 转成字典</span><br><span class="line">- (NSDictionary&lt;NSString *, id&gt; *)dictionaryWithValuesForKeys:(NSArray&lt;NSString *&gt; *)keys;</span><br></pre></td></tr></table></figure></li></ul><h2 id="集合操作符"><a href="#集合操作符" class="headerlink" title="集合操作符"></a>集合操作符</h2><ul><li>聚合操作符<ul><li><strong>@avg</strong>: 返回操作对象指定属性的平均值</li><li><strong>@count</strong>: 返回操作对象指定属性的个数</li><li><strong>@max</strong>: 返回操作对象指定属性的最大值</li><li><strong>@min</strong>: 返回操作对象指定属性的最小值</li><li><strong>@sum</strong>: 返回操作对象指定属性值之和</li></ul></li><li>数组操作符<ul><li><strong>@distinctUnionOfObjects</strong>: 返回操作对象指定属性的集合–去重</li><li><strong>@unionOfObjects</strong>: 返回操作对象指定属性的集合</li></ul></li><li>嵌套操作符<ul><li><strong>@distinctUnionOfArrays</strong>: 返回操作对象(嵌套集合)指定属性的集合–去重，返回的是<strong>NSArray</strong></li><li><strong>@unionOfArrays</strong>: 返回操作对象(集合)指定属性的集合</li><li><strong>@distinctUnionOfSets</strong>: 返回操作对象(嵌套集合)指定属性的集合–去重，返回的是<strong>NSSet</strong></li></ul></li></ul><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><h4 id="Setter-赋值方法"><a href="#Setter-赋值方法" class="headerlink" title="Setter 赋值方法"></a><em><strong>Setter</strong></em> 赋值方法</h4><ol><li>按 <strong>set<Key></strong>:、**_set<Key>**: 顺序查找对象中是否有对应的方法<ul><li>找到了直接调用方法赋值</li><li>没有找到跳到第2步</li></ul></li><li>通过判断<strong>accessInstanceVariablesDirectly</strong>返回值<ul><li><strong>YES</strong> 按照 **_<key><strong>、</strong>_is<Key><strong>、</strong><key><strong>、</strong>is<Key>**的顺序查找成员变量，找到了赋值；没找到跳到第3步</li><li><strong>is<Key></strong> 跳到第3步</li></ul></li><li>调用 <strong>setValue: forUndfinedKey:</strong> 默认情况下抛出异常，子类可以重写该方法避免崩溃<!-- ![](./_image/2020-05-25/2020-05-25-17-15-05.png) --></li></ol><h4 id="Getter-取值方法"><a href="#Getter-取值方法" class="headerlink" title="Getter 取值方法"></a><em><strong>Getter</strong></em> 取值方法</h4><ol><li>按照 <strong>get<Key><strong>、</strong><key><strong>、</strong>is<Key><strong>、</strong><key></strong> 顺序查找对象中是否有对应的方法</li><li>查找是否有<strong>countOf<Key><strong>和</strong>objectIn<Key>AtIndex:<strong>方法(对应于</strong>NSArray</strong>类定义的原始方法)以及**<key>AtIndexes:<strong>方法(对应于</strong>NSArray<strong>方法</strong>objectsAtIndexes:**)<ul><li>如果找到其中的第一个(<strong>countOf<Key></strong>)，再找到其他两个中的至少一个，则创建一个响应所有<strong>NSArray</strong>方法的代理集合对象，并返回该对象(即要么是<strong>countOf<Key> + objectIn<Key>AtIndex:<strong>，要么是</strong>+ <key>AtIndexes:，要么是countOf<Key> + objectIn<Key>AtIndex: + <key>AtIndexes:</strong>)</li><li>如果没有找到，跳转到第3步</li></ul></li><li>查找名为**counOf<Key><strong>、</strong>enumeratorOf<Key><strong>和</strong>memberOf<Key>**这三个方法(对应于NSSet类定义的原始方法)<ul><li>如果找到这三个方法，则创建一个响应所有<strong>NSSet</strong>方法的代理集合对象，并返回该对象</li><li>如果没有找到，跳转到第4步</li></ul></li><li>判断<strong>accessInstanceVariablesDirectly</strong><ul><li>为<strong>YES</strong>时按照**_<key><strong>、</strong>_is<Key><strong>、</strong><key><strong>、</strong>is<Key>**的顺序查找成员变量，找到了就取值</li><li>为<strong>NO</strong>时跳转第6步</li></ul></li><li>判断取出的属性值<ul><li>属性值是对象，直接返回</li><li>属性值不是对象，但是可以转化为<strong>NSNumber</strong>类型，则将属性值转化为<strong>NSNumber</strong>类型返回</li><li>属性值不是对象，也不能转化为<strong>NSNumber</strong>类型，则将属性值转化为<strong>NSValue</strong>类型返回</li></ul></li><li>调用**valueForUndefinedKey:**默认情况下抛出异常，子类可以重写该方法避免崩溃</li></ol><!-- ![](./_image/2020-05-25/2020-05-25-17-17-58.png) -->]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> KVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunLoop</title>
      <link href="/post/RunLoop.html"/>
      <url>/post/RunLoop.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是RunLoop"><a href="#什么是RunLoop" class="headerlink" title="什么是RunLoop"></a>什么是<strong>RunLoop</strong></h2><ul><li>运行循环</li><li>在程序运行过程中循环做一些事情<ul><li>某种 mode 下的 Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer</li></ul></li><li>保持程序的持续运行</li><li>节省CPU资源，提高程序性能：该做事时做事，该休息时休息</li><li>应用范围<ul><li>定时器(Timer)、PerformSelector</li><li>GCD Async Main Queue</li><li>事件响应、手势识别、界面刷新</li><li>网络请求</li><li>AutoreleasePool</li></ul></li></ul><h2 id="RunLoop对象"><a href="#RunLoop对象" class="headerlink" title="RunLoop对象"></a><strong>RunLoop</strong>对象</h2><ul><li>iOS中有2套API来访问和使用RunLoop<ul><li>Foundation: NSRunLoop</li><li>Core Foundation: CFRunLoopRef</li></ul></li><li>NSRunLoop 和 CFRunLoopRef 都代表着RunLoop对象<ul><li>NSRunLoop是基于CFRunLoopRef的一层OC包装</li></ul></li></ul><h2 id="RunLoop与线程"><a href="#RunLoop与线程" class="headerlink" title="RunLoop与线程"></a><strong>RunLoop</strong>与线程</h2><ul><li>每条线程都有唯一的一个与之对应的<strong>RunLoop</strong>对象</li><li><strong>RunLoop</strong>保存在一个全局的Dictionary里，线程作为key，RunLoop作为value</li><li>线程刚开始创建时并没有RunLoop对象，RunLoop会在第一次获取它时创建([NSRunLoop currentRunLoop])</li><li>RunLoop会在线程结束时候销毁</li><li>主线程的RunLoop已经自动获取(创建)，<strong>子线程默认没有开启RunLoop</strong></li></ul><h2 id="RunLoop相关的类"><a href="#RunLoop相关的类" class="headerlink" title="RunLoop相关的类"></a>RunLoop相关的类</h2><ul><li>Core Foundation 中关于RunLoop的5个类</li><li>CFRunLoopRef</li><li>CFRunLoopModeRef</li><li>CFRunLoopSourceRef    事务</li><li>CFRunLoopTimerRef     定时器</li><li>CFRunLoopObServerRef  监听器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// CFRunLoopRef</span><br><span class="line">typedef struct __CFRunLoop * CFRunLoopRef;</span><br><span class="line">struct __CFRunLoop &#123;</span><br><span class="line">    pthread_t _pthread;</span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;  // 当前 mode</span><br><span class="line">    CFMutableSetRef _modes;   // 存放 CFRunLoopModeRef 的集合</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// CFRunLoopModeRef</span><br><span class="line">typedef struct __CFRunLoopModeRef * CFRunLoopModeRef;</span><br><span class="line">struct __CFRunLoopModeRef &#123;</span><br><span class="line">    CFStringRef _name;</span><br><span class="line">    CFMutableSetRef _sources0;   // 存放 CFRunLoopSourceRef 的集合</span><br><span class="line">    CFMutableSetRef _sources1;   // 存放 CFRunLoopSourceRef 的集合</span><br><span class="line">    CFMutableArrayRef _obervers; // 存放 CFRunLoopObServerRef 的集合</span><br><span class="line">    CFMutableArrayRef _timers;   // 存放 CFRunLoopTimerRef 的集合</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CFRunLoopModeRef"><a href="#CFRunLoopModeRef" class="headerlink" title="CFRunLoopModeRef"></a>CFRunLoopModeRef</h3><ul><li>CFRunLoopModeRef代表RunLoop的运行模式</li><li>一个RunLoop包含若干个Mode，每个Mode又包含若干个Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer</li><li>RunLoop启动时只能选择其中一个Mode，作为currentMode</li><li>如果需要切换Mode，只能退出当前Loop，再重新选择一个Mode进入<ul><li>不同组的Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer能分隔开来，互不影响(普通模式和滚动模式)</li></ul></li><li>如果Mode里没有Source0&#x2F;Source1&#x2F;Timer&#x2F;Observer，RunLoop就会立马退出</li><li>常见的2中Mode<ul><li>KCFRunLoopDefaultMode(NSDefaultRunLoopMode)：App的默认Mode，通常主线程是在这个Mode下运行</li><li>UITrackingRunLoopMode：界面跟踪Mode，用户ScrollView追中触摸滑动，保证界面滑动时不受其他Mode影响</li></ul></li><li>kCFRunLoopCommonModes 默认包括 KCFRunLoopDefaultMode 和 UITrackingRunLoopMode</li></ul><h3 id="CFRunLoopSourceRef"><a href="#CFRunLoopSourceRef" class="headerlink" title="CFRunLoopSourceRef"></a>CFRunLoopSourceRef</h3><h4 id="Source0"><a href="#Source0" class="headerlink" title="Source0"></a>Source0</h4><ul><li>触摸事件处理(<strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</strong>)</li><li>performSelector:onThread:</li></ul><h4 id="Source1"><a href="#Source1" class="headerlink" title="Source1"></a>Source1</h4><ul><li>基于Port(端口)的线程通信(多线程通信)</li><li>系统事件捕捉(事件通过Source1捕捉，分发到Source0处理)</li></ul><h3 id="CFRunLoopTimerRef"><a href="#CFRunLoopTimerRef" class="headerlink" title="CFRunLoopTimerRef"></a>CFRunLoopTimerRef</h3><ul><li>NSTimer</li><li>performSelector:withObject:afterDelay:</li></ul><h3 id="CFRunLoopObServerRef"><a href="#CFRunLoopObServerRef" class="headerlink" title="CFRunLoopObServerRef"></a>CFRunLoopObServerRef</h3><ul><li>用于监听RunLoop的状态</li><li>UI刷新(BeforeWaiting)</li><li>autorelease pool(BeforeWaiting)</li></ul><h2 id="RunLoop-状态"><a href="#RunLoop-状态" class="headerlink" title="RunLoop 状态"></a>RunLoop 状态</h2><ul><li>kCFRunLoopEntry             即将进入Loop</li><li>kCFRunLoopBeforeTimers      即将处理Timer</li><li>kCFRunLoopBeforeSources     即将处理Sources</li><li>kCFRunLoopBeforewaiting     即将进入休眠</li><li>kCFRunLoopAfterwaiting      刚从休眠中唤醒</li><li>kCFRunLoopExit              即将退出Loop</li></ul><h2 id="RunLoop的运行逻辑"><a href="#RunLoop的运行逻辑" class="headerlink" title="RunLoop的运行逻辑"></a>RunLoop的运行逻辑</h2><ol><li>通知Observers：进入Loop</li><li>通知Observers：即将处理Timers</li><li>通知Observers：即将处理Sources</li><li>处理Blocks</li><li>处理Source0</li><li>如果存在Source1，跳转到第8步</li><li>通知Observers：开始休眠(等待消息唤醒)    &#x2F;&#x2F; 线程阻塞 通过<strong>match_msg</strong> 内核层面<strong>API</strong></li><li>通知Observers：结束休眠(被某个消息唤醒)<br> 8.1 处理Timer<br> 8.2 处理GCD Async To Main Queue<br> 8.3 处理Source1</li><li>处理Blocks</li><li>根据前面的执行结果，决定如果操作<br> 10.1 有可能回到第2步<br> 10.2 退出Loop</li><li>通知Observers：退出Loop</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> RunLoop </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
